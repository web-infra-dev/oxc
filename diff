
test262/test/built-ins/RegExp/prototype/exec/S15.10.6.2_A2_T6.js


var __instance=new Number(1);__instance.exec=RegExp.prototype.exec;try{throw new Test262Error('#1.1: __instance = new Number(1.0); __instance.exec = RegExp.prototype.exec; __instance["exec"]("message to investigate"). Actual: '+__instance["exec"]("message to investigate"))}catch(e){assert.sameValue(e instanceof TypeError,!0,"The result of evaluating (e instanceof TypeError) is expected to be true")}


var __instance=new Number(1);__instance.exec=RegExp.prototype.exec;try{throw new Test262Error('#1.1: __instance = new Number(1.0); __instance.exec = RegExp.prototype.exec; __instance["exec"]("message to investigate"). Actual: '+__instance.exec("message to investigate"))}catch(e){assert.sameValue(e instanceof TypeError,!0,"The result of evaluating (e instanceof TypeError) is expected to be true")}



test262/test/language/statements/const/global-use-before-initialization-in-prior-statement.js


x;const x=1;


const x=1;



test262/test/built-ins/TypedArray/prototype/at/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.at,"function","implements TypedArray.prototype.at"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.at(0);try{ab.resize(BPE*3)}catch(_){}array.at(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.at(0),new Test262Error("at completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.at,"function","implements TypedArray.prototype.at"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.at(0);try{ab.resize(BPE*3)}catch{}array.at(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.at(0),new Test262Error("at completed successfully")})});



test262/test/language/statements/const/block-local-use-before-initialization-in-prior-statement.js


assert.throws(ReferenceError,function(){{x;const x=1}});


assert.throws(ReferenceError,function(){{const x=1}});



test262/test/language/expressions/dynamic-import/syntax/valid/callexpression-arguments.js


assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")()},"empty arguments"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")(1)},"arguments with trailing comma"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")(1,2)},"2 arguments"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")(...[])},"spread args");


assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")()},"empty arguments"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")(1)},"arguments with trailing comma"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")(1,2)},"2 arguments"),assert.throws(TypeError,()=>{import("./empty_FIXTURE.js")()},"spread args");



test262/test/built-ins/Array/from/from-array.js


var array=[0,"foo",,Infinity],result=Array.from(array);assert.sameValue(result.length,4,"The value of result.length is expected to be 4");assert.sameValue(result[0],0,"The value of result[0] is expected to be 0");assert.sameValue(result[1],"foo",'The value of result[1] is expected to be "foo"');assert.sameValue(result[2],void 0,"The value of result[2] is expected to equal undefined");assert.sameValue(result[3],Infinity,"The value of result[3] is expected to equal Infinity");assert.notSameValue(result,array,"The value of result is expected to not equal the value of `array`");assert(result instanceof Array,"The result of evaluating (result instanceof Array) is expected to be true");


var array=[0,"foo",,1/0],result=Array.from(array);assert.sameValue(result.length,4,"The value of result.length is expected to be 4"),assert.sameValue(result[0],0,"The value of result[0] is expected to be 0"),assert.sameValue(result[1],"foo",'The value of result[1] is expected to be "foo"'),assert.sameValue(result[2],void 0,"The value of result[2] is expected to equal undefined"),assert.sameValue(result[3],1/0,"The value of result[3] is expected to equal Infinity"),assert.notSameValue(result,array,"The value of result is expected to not equal the value of `array`"),assert(result instanceof Array,"The result of evaluating (result instanceof Array) is expected to be true");



test262/test/built-ins/TypedArray/prototype/at/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.at,"function","implements TypedArray.prototype.at"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.at(0);try{ab.resize(BPE*3)}catch(_){}array.at(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.at(0),new Test262Error("at completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.at,"function","implements TypedArray.prototype.at"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.at(0);try{ab.resize(BPE*3)}catch{}array.at(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.at(0),new Test262Error("at completed successfully")})});



test262/test/built-ins/Array/prototype/indexOf/15.4.4.14-5-12.js


var arr=[];arr[Math.pow(2,32)-2]=!0;assert.sameValue(arr.indexOf(!0,Infinity),-1,"arr.indexOf(true, Infinity)");


var arr=[];arr[Math.pow(2,32)-2]=!0,assert.sameValue(arr.indexOf(!0,1/0),-1,"arr.indexOf(true, Infinity)");



test262/test/built-ins/RegExp/prototype/exec/failure-lastindex-set.js


for(var R_g=/./g,R_y=/./y,R_gy=/./gy,S="test",lastIndex,bigLastIndexes=[Infinity,Number.MAX_VALUE,Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER-1,4294967300,4294967299,4294967298,4294967297,4294967296,4294967295,5],i=0;i<bigLastIndexes.length;i++)lastIndex=bigLastIndexes[i],R_g.lastIndex=lastIndex,R_y.lastIndex=lastIndex,R_gy.lastIndex=lastIndex,assert.sameValue(R_g.exec(S),null,"global RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_y.exec(S),null,"sticky RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_gy.exec(S),null,"global sticky RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_g.lastIndex,0,"global RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length"),assert.sameValue(R_y.lastIndex,0,"sticky RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length"),assert.sameValue(R_gy.lastIndex,0,"global sticky RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length");


for(var R_g=/./g,R_y=/./y,R_gy=/./gy,S="test",lastIndex,bigLastIndexes=[1/0,Number.MAX_VALUE,Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER-1,4294967300,4294967299,4294967298,4294967297,4294967296,4294967295,5],i=0;i<bigLastIndexes.length;i++)lastIndex=bigLastIndexes[i],R_g.lastIndex=lastIndex,R_y.lastIndex=lastIndex,R_gy.lastIndex=lastIndex,assert.sameValue(R_g.exec(S),null,"global RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_y.exec(S),null,"sticky RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_gy.exec(S),null,"global sticky RegExp instance must fail to match against '"+S+"' at lastIndex "+lastIndex),assert.sameValue(R_g.lastIndex,0,"global RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length"),assert.sameValue(R_y.lastIndex,0,"sticky RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length"),assert.sameValue(R_gy.lastIndex,0,"global sticky RegExp instance lastIndex must be reset after "+lastIndex+" exceeds string length");



test262/test/built-ins/TypedArrayConstructors/ctors/object-arg/iterated-array-with-modified-array-iterator.js


let ArrayIteratorPrototype=Object.getPrototypeOf([].values()),values;ArrayIteratorPrototype.next=function(){let done=values.length===0,value=values.pop();return{value,done}};testWithTypedArrayConstructors(function(TypedArray){values=[1,2,3,4];var ta=new TypedArray([0]);assert.sameValue(ta.length,4);assert.sameValue(ta[0],4);assert.sameValue(ta[1],3);assert.sameValue(ta[2],2);assert.sameValue(ta[3],1)});


let ArrayIteratorPrototype=Object.getPrototypeOf([].values()),values;ArrayIteratorPrototype.next=function(){let done=values.length===0;return{value:values.pop(),done}},testWithTypedArrayConstructors(function(TypedArray){values=[1,2,3,4];var ta=new TypedArray([0]);assert.sameValue(ta.length,4),assert.sameValue(ta[0],4),assert.sameValue(ta[1],3),assert.sameValue(ta[2],2),assert.sameValue(ta[3],1)});



test262/test/annexB/built-ins/escape/prop-desc.js


assert.sameValue(typeof this.escape,"function"),assert.sameValue(typeof this["escape"],"function"),verifyProperty(this,"escape",{writable:!0,enumerable:!1,configurable:!0});


assert.sameValue(typeof this.escape,"function"),assert.sameValue(typeof this.escape,"function"),verifyProperty(this,"escape",{writable:!0,enumerable:!1,configurable:!0});



test262/test/language/statements/const/syntax/with-initializer-default-statement-list.js


switch(!0){default:const x=1}


switch(!0){default:}



test262/test/language/expressions/dynamic-import/syntax/valid/nested-block-labeled-import-attributes-trailing-comma-second.js


label:import("./empty_FIXTURE.js",{});


import("./empty_FIXTURE.js",{});



test262/test/language/statements/const/syntax/with-initializer-case-expression-statement-list.js


switch(!0){case!0:const x=1}


switch(!0){case!0:}



test262/test/built-ins/Array/from/array-like-has-length-but-no-indexes-with-values.js


const length=5,newlyCreatedArray=Array.from({length});assert.sameValue(newlyCreatedArray.length,length,"The newly created array's length is equal to the value of the length property for the provided array like object");assert.compareArray(newlyCreatedArray,[void 0,void 0,void 0,void 0,void 0]);const newlyCreatedAndMappedArray=Array.from({length}).map(x=>1);assert.sameValue(newlyCreatedAndMappedArray.length,length,"The newly created and mapped array's length is equal to the value of the length property for the provided array like object");assert.compareArray(newlyCreatedAndMappedArray,[1,1,1,1,1]);


const length=5,newlyCreatedArray=Array.from({length:5});assert.sameValue(newlyCreatedArray.length,5,"The newly created array's length is equal to the value of the length property for the provided array like object"),assert.compareArray(newlyCreatedArray,[void 0,void 0,void 0,void 0,void 0]);const newlyCreatedAndMappedArray=Array.from({length:5}).map(x=>1);assert.sameValue(newlyCreatedAndMappedArray.length,5,"The newly created and mapped array's length is equal to the value of the length property for the provided array like object"),assert.compareArray(newlyCreatedAndMappedArray,[1,1,1,1,1]);



test262/test/built-ins/String/prototype/trim/15.5.4.20-2-9.js


assert.sameValue(String.prototype.trim.call(Infinity),"Infinity","String.prototype.trim.call(Infinity)");


assert.sameValue(String.prototype.trim.call(1/0),"Infinity","String.prototype.trim.call(Infinity)");



test262/test/built-ins/String/prototype/trim/15.5.4.20-2-29.js


assert.sameValue(String.prototype.trim.call("AB\n\\cd"),"AB\n\\cd",'String.prototype.trim.call("AB\n\\cd")');


assert.sameValue(String.prototype.trim.call(`AB
\\cd`),`AB
\\cd`,`String.prototype.trim.call("AB
\\cd")`);



test262/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.lastIndexOf,"function","implements TypedArray.prototype.lastIndexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.lastIndexOf(0n);try{ab.resize(BPE*3)}catch(_){}array.lastIndexOf(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.lastIndexOf(0n),new Test262Error("lastIndexOf completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.lastIndexOf,"function","implements TypedArray.prototype.lastIndexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.lastIndexOf(0n);try{ab.resize(BPE*3)}catch{}array.lastIndexOf(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.lastIndexOf(0n),new Test262Error("lastIndexOf completed successfully")})});



test262/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/fromIndex-infinity.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.lastIndexOf(43n,Infinity),2,"lastIndexOf(43, Infinity)");assert.sameValue(sample.lastIndexOf(43n,-1/0),-1,"lastIndexOf(43, -Infinity)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.lastIndexOf(43n,1/0),2,"lastIndexOf(43, Infinity)"),assert.sameValue(sample.lastIndexOf(43n,-1/0),-1,"lastIndexOf(43, -Infinity)")});



test262/test/language/expressions/less-than/S11.8.1_A2.1_T2.js


try{throw x<1,new Test262Error("#1.1: x < 1 throw ReferenceError. Actual: "+(x<1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x < 1 throw ReferenceError. Actual: "+e)}


try{throw x<1,new Test262Error("#1.1: x < 1 throw ReferenceError. Actual: "+(x<1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x < 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/lastIndexOf/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.lastIndexOf,"function","implements TypedArray.prototype.lastIndexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.lastIndexOf(0);try{ab.resize(BPE*3)}catch(_){}array.lastIndexOf(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.lastIndexOf(0),new Test262Error("lastIndexOf completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.lastIndexOf,"function","implements TypedArray.prototype.lastIndexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.lastIndexOf(0);try{ab.resize(BPE*3)}catch{}array.lastIndexOf(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.lastIndexOf(0),new Test262Error("lastIndexOf completed successfully")})});



test262/test/language/expressions/less-than/S11.8.1_A2.1_T3.js


try{throw 1<y,new Test262Error("#1.1: 1 < y throw ReferenceError. Actual: "+(1<y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 < y throw ReferenceError. Actual: "+e)}


try{throw 1<y,new Test262Error("#1.1: 1 < y throw ReferenceError. Actual: "+(1<y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 < y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/lastIndexOf/fromIndex-infinity.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.lastIndexOf(43,Infinity),2,"lastIndexOf(43, Infinity)");assert.sameValue(sample.lastIndexOf(43,-1/0),-1,"lastIndexOf(43, -Infinity)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.lastIndexOf(43,1/0),2,"lastIndexOf(43, Infinity)"),assert.sameValue(sample.lastIndexOf(43,-1/0),-1,"lastIndexOf(43, -Infinity)")});



test262/test/language/expressions/less-than/S11.8.1_A1.js


if(eval("0	<	1")!==!0)throw new Test262Error("#1: (0\\u0009<\\u00091) === true");if(eval("0\v<\v1")!==!0)throw new Test262Error("#2: (0\\u000B<\\u000B1) === true");if(eval("0\f<\f1")!==!0)throw new Test262Error("#3: (0\\u000C<\\u000C1) === true");if(eval("0 < 1")!==!0)throw new Test262Error("#4: (0\\u0020<\\u00201) === true");if(eval("0\xA0<\xA01")!==!0)throw new Test262Error("#5: (0\\u00A0<\\u00A01) === true");if(eval("0\n<\n1")!==!0)throw new Test262Error("#6: (0\\u000A<\\u000A1) === true");if(eval("0\r<\r1")!==!0)throw new Test262Error("#7: (0\\u000D<\\u000D1) === true");if(eval("0\u2028<\u20281")!==!0)throw new Test262Error("#8: (0\\u2028<\\u20281) === true");if(eval("0\u2029<\u20291")!==!0)throw new Test262Error("#9: (0\\u2029<\\u20291) === true");if(eval("0	\v\f \xA0\n\r\u2028\u2029<	\v\f \xA0\n\r\u2028\u20291")!==!0)throw new Test262Error("#10: (0\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029<\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");


if(eval("0	<	1")!==!0)throw new Test262Error("#1: (0\\u0009<\\u00091) === true");if(eval("0\v<\v1")!==!0)throw new Test262Error("#2: (0\\u000B<\\u000B1) === true");if(eval("0\f<\f1")!==!0)throw new Test262Error("#3: (0\\u000C<\\u000C1) === true");if(eval("0 < 1")!==!0)throw new Test262Error("#4: (0\\u0020<\\u00201) === true");if(eval("0\xA0<\xA01")!==!0)throw new Test262Error("#5: (0\\u00A0<\\u00A01) === true");if(eval(`0
<
1`)!==!0)throw new Test262Error("#6: (0\\u000A<\\u000A1) === true");if(eval("0\r<\r1")!==!0)throw new Test262Error("#7: (0\\u000D<\\u000D1) === true");if(eval("0\u2028<\u20281")!==!0)throw new Test262Error("#8: (0\\u2028<\\u20281) === true");if(eval("0\u2029<\u20291")!==!0)throw new Test262Error("#9: (0\\u2029<\\u20291) === true");if(eval(`0	\v\f \xA0
\r\u2028\u2029<	\v\f \xA0
\r\u2028\u20291`)!==!0)throw new Test262Error("#10: (0\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029<\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");



test262/test/language/expressions/less-than/S11.8.1_A2.4_T3.js


try{throw x<(x=1),new Test262Error("#1.1: x < (x = 1) throw ReferenceError. Actual: "+(x<(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x < (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x<(x=1),new Test262Error("#1.1: x < (x = 1) throw ReferenceError. Actual: "+(x<(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x < (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/less-than/S11.8.1_A3.2_T1.2.js


if({}<function(){return 1}!=={}.toString()<function(){return 1}.toString())throw new Test262Error("#1: ({} < function(){return 1}) === ({}.toString() < function(){return 1}.toString())");if(function(){return 1}<{}!==function(){return 1}.toString()<{}.toString())throw new Test262Error("#2: (function(){return 1} < {}) === (function(){return 1}.toString() < {}.toString())");if(function(){return 1}<function(){return 1}!==function(){return 1}.toString()<function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} < function(){return 1}) === (function(){return 1}.toString() < function(){return 1}.toString())");if({}<{}!=={}.toString()<{}.toString())throw new Test262Error("#4: ({} < {}) === ({}.toString() < {}.toString())");


if({}<function(){return 1}!={}.toString()<function(){return 1}.toString())throw new Test262Error("#1: ({} < function(){return 1}) === ({}.toString() < function(){return 1}.toString())");if(function(){return 1}<{}!=function(){return 1}.toString()<{}.toString())throw new Test262Error("#2: (function(){return 1} < {}) === (function(){return 1}.toString() < {}.toString())");if(function(){return 1}<function(){return 1}!=function(){return 1}.toString()<function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} < function(){return 1}) === (function(){return 1}.toString() < function(){return 1}.toString())");if({}<{}!={}.toString()<{}.toString())throw new Test262Error("#4: ({} < {}) === ({}.toString() < {}.toString())");



test262/test/language/expressions/less-than/S11.8.1_A2.4_T1.js


var x=1;if((x=0)<x!==!1)throw new Test262Error("#1: var x = 1; (x = 0) < x === false");var x=0;if(x<(x=1)!==!0)throw new Test262Error("#2: var x = 0; x < (x = 1) === true");


var x=1;if((x=0)<x)throw new Test262Error("#1: var x = 1; (x = 0) < x === false");var x=0;if(!(x<(x=1)))throw new Test262Error("#2: var x = 0; x < (x = 1) === true");



test262/test/built-ins/Temporal/PlainDateTime/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,12,34,56,987,654,321);[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const instance=new Temporal.PlainDateTime(2e3,5,2,12,34,56,987,654,321);[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/Temporal/ZonedDateTime/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),later=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),later=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/language/expressions/less-than/bigint-and-bigint.js


assert.sameValue(0n<0n,!1,"The result of (0n < 0n) is false"),assert.sameValue(1n<1n,!1,"The result of (1n < 1n) is false"),assert.sameValue(-1n<-1n,!1,"The result of (-1n < -1n) is false"),assert.sameValue(0n<0n,!1,"The result of (0n < -0n) is false"),assert.sameValue(0n<0n,!1,"The result of (-0n < 0n) is false"),assert.sameValue(0n<1n,!0,"The result of (0n < 1n) is true"),assert.sameValue(1n<0n,!1,"The result of (1n < 0n) is false"),assert.sameValue(0n<-1n,!1,"The result of (0n < -1n) is false"),assert.sameValue(-1n<0n,!0,"The result of (-1n < 0n) is true"),assert.sameValue(1n<-1n,!1,"The result of (1n < -1n) is false"),assert.sameValue(-1n<1n,!0,"The result of (-1n < 1n) is true"),assert.sameValue(0x1fffffffffffff01n<0x1fffffffffffff02n,!0,"The result of (0x1fffffffffffff01n < 0x1fffffffffffff02n) is true"),assert.sameValue(0x1fffffffffffff02n<0x1fffffffffffff01n,!1,"The result of (0x1fffffffffffff02n < 0x1fffffffffffff01n) is false"),assert.sameValue(-2305843009213693697n<-2305843009213693698n,!1,"The result of (-0x1fffffffffffff01n < -0x1fffffffffffff02n) is false"),assert.sameValue(-2305843009213693698n<-2305843009213693697n,!0,"The result of (-0x1fffffffffffff02n < -0x1fffffffffffff01n) is true"),assert.sameValue(0x10000000000000000n<0n,!1,"The result of (0x10000000000000000n < 0n) is false"),assert.sameValue(0n<0x10000000000000000n,!0,"The result of (0n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<1n,!1,"The result of (0x10000000000000000n < 1n) is false"),assert.sameValue(1n<0x10000000000000000n,!0,"The result of (1n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<-1n,!1,"The result of (0x10000000000000000n < -1n) is false"),assert.sameValue(-1n<0x10000000000000000n,!0,"The result of (-1n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000001n<0n,!1,"The result of (0x10000000000000001n < 0n) is false"),assert.sameValue(0n<0x10000000000000001n,!0,"The result of (0n < 0x10000000000000001n) is true"),assert.sameValue(-18446744073709551616n<0n,!0,"The result of (-0x10000000000000000n < 0n) is true"),assert.sameValue(0n<-18446744073709551616n,!1,"The result of (0n < -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551616n<1n,!0,"The result of (-0x10000000000000000n < 1n) is true"),assert.sameValue(1n<-18446744073709551616n,!1,"The result of (1n < -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551616n<-1n,!0,"The result of (-0x10000000000000000n < -1n) is true"),assert.sameValue(-1n<-18446744073709551616n,!1,"The result of (-1n < -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551617n<0n,!0,"The result of (-0x10000000000000001n < 0n) is true"),assert.sameValue(0n<-18446744073709551617n,!1,"The result of (0n < -0x10000000000000001n) is false"),assert.sameValue(0x10000000000000000n<0x100000000n,!1,"The result of (0x10000000000000000n < 0x100000000n) is false"),assert.sameValue(0x100000000n<0x10000000000000000n,!0,"The result of (0x100000000n < 0x10000000000000000n) is true");


assert.sameValue(0n<0n,!1,"The result of (0n < 0n) is false"),assert.sameValue(1n<1n,!1,"The result of (1n < 1n) is false"),assert.sameValue(-1n<-1n,!1,"The result of (-1n < -1n) is false"),assert.sameValue(0n<-0n,!1,"The result of (0n < -0n) is false"),assert.sameValue(-0n<0n,!1,"The result of (-0n < 0n) is false"),assert.sameValue(0n<1n,!0,"The result of (0n < 1n) is true"),assert.sameValue(1n<0n,!1,"The result of (1n < 0n) is false"),assert.sameValue(0n<-1n,!1,"The result of (0n < -1n) is false"),assert.sameValue(-1n<0n,!0,"The result of (-1n < 0n) is true"),assert.sameValue(1n<-1n,!1,"The result of (1n < -1n) is false"),assert.sameValue(-1n<1n,!0,"The result of (-1n < 1n) is true"),assert.sameValue(0x1fffffffffffff01n<0x1fffffffffffff02n,!0,"The result of (0x1fffffffffffff01n < 0x1fffffffffffff02n) is true"),assert.sameValue(0x1fffffffffffff02n<0x1fffffffffffff01n,!1,"The result of (0x1fffffffffffff02n < 0x1fffffffffffff01n) is false"),assert.sameValue(-0x1fffffffffffff01n<-0x1fffffffffffff02n,!1,"The result of (-0x1fffffffffffff01n < -0x1fffffffffffff02n) is false"),assert.sameValue(-0x1fffffffffffff02n<-0x1fffffffffffff01n,!0,"The result of (-0x1fffffffffffff02n < -0x1fffffffffffff01n) is true"),assert.sameValue(0x10000000000000000n<0n,!1,"The result of (0x10000000000000000n < 0n) is false"),assert.sameValue(0n<0x10000000000000000n,!0,"The result of (0n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<1n,!1,"The result of (0x10000000000000000n < 1n) is false"),assert.sameValue(1n<0x10000000000000000n,!0,"The result of (1n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<-1n,!1,"The result of (0x10000000000000000n < -1n) is false"),assert.sameValue(-1n<0x10000000000000000n,!0,"The result of (-1n < 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000001n<0n,!1,"The result of (0x10000000000000001n < 0n) is false"),assert.sameValue(0n<0x10000000000000001n,!0,"The result of (0n < 0x10000000000000001n) is true"),assert.sameValue(-0x10000000000000000n<0n,!0,"The result of (-0x10000000000000000n < 0n) is true"),assert.sameValue(0n<-0x10000000000000000n,!1,"The result of (0n < -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000000n<1n,!0,"The result of (-0x10000000000000000n < 1n) is true"),assert.sameValue(1n<-0x10000000000000000n,!1,"The result of (1n < -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000000n<-1n,!0,"The result of (-0x10000000000000000n < -1n) is true"),assert.sameValue(-1n<-0x10000000000000000n,!1,"The result of (-1n < -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000001n<0n,!0,"The result of (-0x10000000000000001n < 0n) is true"),assert.sameValue(0n<-0x10000000000000001n,!1,"The result of (0n < -0x10000000000000001n) is false"),assert.sameValue(0x10000000000000000n<0x100000000n,!1,"The result of (0x10000000000000000n < 0x100000000n) is false"),assert.sameValue(0x100000000n<0x10000000000000000n,!0,"The result of (0x100000000n < 0x10000000000000000n) is true");



test262/test/language/expressions/less-than/S11.8.1_A2.4_T4.js


if((y=1)<y!==!1)throw new Test262Error("#1: (y = 1) < y === false");


if((y=1)<y)throw new Test262Error("#1: (y = 1) < y === false");



test262/test/built-ins/Array/prototype/indexOf/15.4.4.14-3-8.js


var obj={0:0,length:Infinity};assert.sameValue(Array.prototype.indexOf.call(obj,0),0,"Array.prototype.indexOf.call(obj, 0)");


var obj={0:0,length:1/0};assert.sameValue(Array.prototype.indexOf.call(obj,0),0,"Array.prototype.indexOf.call(obj, 0)");



test262/test/built-ins/TypedArray/prototype/keys/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.keys,"function","implements TypedArray.prototype.keys"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.keys();try{ab.resize(BPE*3)}catch(_){}array.keys();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.keys(),new Test262Error("keys completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.keys,"function","implements TypedArray.prototype.keys"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.keys();try{ab.resize(BPE*3)}catch{}array.keys();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.keys(),new Test262Error("keys completed successfully")})});



test262/test/built-ins/TypedArray/prototype/keys/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.keys,"function","implements TypedArray.prototype.keys"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.keys();try{ab.resize(BPE*3)}catch(_){}array.keys();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.keys(),new Test262Error("keys completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.keys,"function","implements TypedArray.prototype.keys"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.keys();try{ab.resize(BPE*3)}catch{}array.keys();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.keys(),new Test262Error("keys completed successfully")})});



test262/test/language/expressions/less-than/S11.8.1_A4.11.js


var x="x";if(x<x+"y"!==!0)throw new Test262Error('#6: var x = "x"; (x < x + "y") === true');


var x="x";if(!(x<x+"y"))throw new Test262Error('#6: var x = "x"; (x < x + "y") === true');



test262/test/built-ins/Temporal/ZonedDateTime/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/language/expressions/less-than/S11.8.1_A4.10.js


var x="x";if(x+"y"<x!==!1)throw new Test262Error('#6: var x = "x"; (x + "y" < x) === false');


var x="x";if(x+"y"<x)throw new Test262Error('#6: var x = "x"; (x + "y" < x) === false');



test262/test/language/expressions/less-than/S11.8.1_A4.9.js


if(Number.MAX_VALUE/2<Number.MAX_VALUE!==!0)throw new Test262Error("#7: (Number.MAX_VALUE/2 < Number.MAX_VALUE) === true");if(Number.MIN_VALUE<Number.MIN_VALUE*2!==!0)throw new Test262Error("#8: (Number.MIN_VALUE < Number.MIN_VALUE*2) === true");


if(!(Number.MAX_VALUE/2<Number.MAX_VALUE))throw new Test262Error("#7: (Number.MAX_VALUE/2 < Number.MAX_VALUE) === true");if(!(Number.MIN_VALUE<Number.MIN_VALUE*2))throw new Test262Error("#8: (Number.MIN_VALUE < Number.MIN_VALUE*2) === true");



test262/test/built-ins/Date/prototype/toISOString/15.9.5.43-0-15.js


var date=new Date(Infinity,1,70,0,0,0);assert.throws(RangeError,function(){date.toISOString()});


var date=new Date(1/0,1,70,0,0,0);assert.throws(RangeError,function(){date.toISOString()});



test262/test/language/expressions/concatenation/S9.8_A4_T2.js


var x1="abc";if(x1+""!==x1)throw new Test262Error('#1: "abc" + "" === "abc". Actual: abc');var x2="abc";if(typeof x2+""!==typeof x2)throw new Test262Error('#2: typeof "abc" + "" === "string". Actual: string');


var x1="abc";if(x1+""!==x1)throw new Test262Error('#1: "abc" + "" === "abc". Actual: abc');var x2="abc";if(typeof x2!=typeof x2)throw new Test262Error('#2: typeof "abc" + "" === "string". Actual: string');



test262/test/language/expressions/unary-plus/S11.4.6_A2.1_T2.js


try{throw+x,new Test262Error("#1.1: +x throw ReferenceError. Actual: "+ +x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: +x throw ReferenceError. Actual: "+e)}


try{throw+x,new Test262Error("#1.1: +x throw ReferenceError. Actual: "+ +x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: +x throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/find/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.find,"function","implements TypedArray.prototype.find"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.find(()=>{});try{ab.resize(BPE*3)}catch(_){}array.find(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.find(()=>{}),new Test262Error("find completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.find,"function","implements TypedArray.prototype.find"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.find(()=>{});try{ab.resize(BPE*3)}catch{}array.find(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.find(()=>{}),new Test262Error("find completed successfully")})});



test262/test/built-ins/NativeErrors/SyntaxError/proto-from-ctor-realm.js


var other=$262.createRealm().global,newTarget=new other.Function,err;newTarget.prototype=void 0;err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is undefined");newTarget.prototype=null;err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is null");newTarget.prototype=!0;err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Boolean");newTarget.prototype="";err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a String");newTarget.prototype=Symbol();err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Symbol");newTarget.prototype=Infinity;err=Reflect.construct(SyntaxError,[],newTarget);assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Number");


var other=$262.createRealm().global,newTarget=new other.Function,err;newTarget.prototype=void 0,err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is undefined"),newTarget.prototype=null,err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is null"),newTarget.prototype=!0,err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Boolean"),newTarget.prototype="",err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a String"),newTarget.prototype=Symbol(),err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Symbol"),newTarget.prototype=1/0,err=Reflect.construct(SyntaxError,[],newTarget),assert.sameValue(Object.getPrototypeOf(err),other.SyntaxError.prototype,"newTarget.prototype is a Number");



test262/test/built-ins/Temporal/PlainDateTime/prototype/subtract/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDateTime.from({year:2e3,month:5,day:2,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDateTime.from({year:2e3,month:5,day:2,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/find/BigInt/return-undefined-if-predicate-returns-false-value.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.find(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=sample.find(function(){return""});assert.sameValue(result,void 0,"ToBoolean(empty string)");result=sample.find(function(){return});assert.sameValue(result,void 0,"ToBoolean(undefined)");result=sample.find(function(){return null});assert.sameValue(result,void 0,"ToBoolean(null)");result=sample.find(function(){return 0});assert.sameValue(result,void 0,"ToBoolean(0)");result=sample.find(function(){return-0});assert.sameValue(result,void 0,"ToBoolean(-0)");result=sample.find(function(){return NaN});assert.sameValue(result,void 0,"ToBoolean(NaN)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.find(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=sample.find(function(){return""}),assert.sameValue(result,void 0,"ToBoolean(empty string)"),result=sample.find(function(){}),assert.sameValue(result,void 0,"ToBoolean(undefined)"),result=sample.find(function(){return null}),assert.sameValue(result,void 0,"ToBoolean(null)"),result=sample.find(function(){return 0}),assert.sameValue(result,void 0,"ToBoolean(0)"),result=sample.find(function(){return-0}),assert.sameValue(result,void 0,"ToBoolean(-0)"),result=sample.find(function(){return NaN}),assert.sameValue(result,void 0,"ToBoolean(NaN)")});



test262/test/language/expressions/unary-plus/S11.4.6_A1.js


if(eval("+	1")!==1)throw new Test262Error("#1: +\\u00091 === 1");if(eval("+\v1")!==1)throw new Test262Error("#2: +\\u000B1 === 1");if(eval("+\f1")!==1)throw new Test262Error("#3: +\\u000C1 === 1");if(eval("+ 1")!==1)throw new Test262Error("#4: +\\u0020 === 1");if(eval("+\xA01")!==1)throw new Test262Error("#5: +\\u00A01 === 1");if(eval("+\n1")!==1)throw new Test262Error("#6: +\\u000A1 === 1");if(eval("+\r1")!==1)throw new Test262Error("#7: +\\u000D1 === 1");if(eval("+\u20281")!==1)throw new Test262Error("#8: +\\u20281 === 1");if(eval("+\u20291")!==1)throw new Test262Error("#9: +\\u20291 === 1");if(eval("+	\v\f \xA0\n\r\u2028\u20291")!==1)throw new Test262Error("#10: +\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");


if(eval("+	1")!==1)throw new Test262Error("#1: +\\u00091 === 1");if(eval("+\v1")!==1)throw new Test262Error("#2: +\\u000B1 === 1");if(eval("+\f1")!==1)throw new Test262Error("#3: +\\u000C1 === 1");if(eval("+ 1")!==1)throw new Test262Error("#4: +\\u0020 === 1");if(eval("+\xA01")!==1)throw new Test262Error("#5: +\\u00A01 === 1");if(eval(`+
1`)!==1)throw new Test262Error("#6: +\\u000A1 === 1");if(eval("+\r1")!==1)throw new Test262Error("#7: +\\u000D1 === 1");if(eval("+\u20281")!==1)throw new Test262Error("#8: +\\u20281 === 1");if(eval("+\u20291")!==1)throw new Test262Error("#9: +\\u20291 === 1");if(eval(`+	\v\f \xA0
\r\u2028\u20291`)!==1)throw new Test262Error("#10: +\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");



test262/test/built-ins/Date/prototype/valueOf/S9.4_A3_T2.js


var d1=new Date(Number.NaN);assert.sameValue(d1.valueOf(),NaN,"d1.valueOf() returns NaN");var d2=new Date(Infinity);assert.sameValue(d2.valueOf(),NaN,"d2.valueOf() returns NaN");var d3=new Date(-1/0);assert.sameValue(d3.valueOf(),NaN,"d3.valueOf() returns NaN");var d4=new Date(0);assert.sameValue(d4.valueOf(),0,"d4.valueOf() must return 0");var d5=new Date(-0);assert.sameValue(d5.valueOf(),0,"d5.valueOf() must return 0");


var d1=new Date(Number.NaN);assert.sameValue(d1.valueOf(),NaN,"d1.valueOf() returns NaN");var d2=new Date(1/0);assert.sameValue(d2.valueOf(),NaN,"d2.valueOf() returns NaN");var d3=new Date(-1/0);assert.sameValue(d3.valueOf(),NaN,"d3.valueOf() returns NaN");var d4=new Date(0);assert.sameValue(d4.valueOf(),0,"d4.valueOf() must return 0");var d5=new Date(-0);assert.sameValue(d5.valueOf(),0,"d5.valueOf() must return 0");



test262/test/language/expressions/unary-plus/S11.4.6_A3_T5.js


if(isNaN(+{})!==!0)throw new Test262Error("#1: +{} === Not-a-Number. Actual: "+ +{});if(isNaN(+function(){return 1})!==!0)throw new Test262Error("#2: +function(){return 1} === Not-a-Number. Actual: "+ +function(){return 1});


if(isNaN(NaN)!==!0)throw new Test262Error("#1: +{} === Not-a-Number. Actual: NaN");if(isNaN(+function(){return 1})!==!0)throw new Test262Error("#2: +function(){return 1} === Not-a-Number. Actual: "+ +function(){return 1});



test262/test/built-ins/TypedArray/prototype/find/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.find,"function","implements TypedArray.prototype.find"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.find(()=>{});try{ab.resize(BPE*3)}catch(_){}array.find(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.find(()=>{}),new Test262Error("find completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.find,"function","implements TypedArray.prototype.find"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.find(()=>{});try{ab.resize(BPE*3)}catch{}array.find(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.find(()=>{}),new Test262Error("find completed successfully")})});



test262/test/language/expressions/postfix-increment/bigint.js


var x=0n;assert.sameValue(x++,0n,"var x = 0n; x++ === 0n");assert.sameValue(x,1n,"var x = 0n; x++; x === 1n");var x=-1n;assert.sameValue(x++,-1n,"var x = -1n; x++ === -1n");assert.sameValue(x,0n,"var x = -1n; x++; x === 0n");var x=123456n;assert.sameValue(x++,123456n,"var x = 123456n; x++ === 123456n");assert.sameValue(x,123457n,"var x = 123456n; x++; x === 123457n");var x=-123457n;assert.sameValue(x++,-123457n,"var x = -123457n; x++ === -123457n");assert.sameValue(x,-123456n,"var x = -123457n; x++; x === -123456n");var x=0x1fffffffffffff00n;assert.sameValue(x++,0x1fffffffffffff00n,"var x = 0x1fffffffffffff00n; x++ === 0x1fffffffffffff00n");assert.sameValue(x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; x++; x === 0x1fffffffffffff01n");var x=-2305843009213693697n;assert.sameValue(x++,-2305843009213693697n,"var x = -0x1fffffffffffff01n; x++ === -0x1fffffffffffff01n");assert.sameValue(x,-2305843009213693696n,"var x = -0x1fffffffffffff01n; x++; x === -0x1fffffffffffff00n");var x={y:0n};assert.sameValue(x.y++,0n,"var x = {y:0n}; x.y++ === 0n");assert.sameValue(x.y,1n,"var x = {y:0n}; x.y++; x.y === 1n");var x={y:{z:0n}};assert.sameValue(x.y.z++,0n,"var x = {y:{z:0n}}; x.y.z++ === 0n");assert.sameValue(x.y.z,1n,"var x = {y:{z:0n}}; x.y.z++; x.y.z === 1n");var x=[0n];assert.sameValue(x[0]++,0n,"var x = [0n]; x[0]++ === 0n");assert.sameValue(x[0],1n,"var x = [0n]; x[0]++; x[0] === 1n");var x=[null,[null,null,0n]];assert.sameValue(x[1][2]++,0n,"var x = [null, [null, null, 0n]]; x[1][2]++ === 0n");assert.sameValue(x[1][2],1n,"var x = [null, [null, null, 0n]]; x[1][2]++; x[1][2] === 1n");var x={y:[0n]};assert.sameValue(x.y[0]++,0n,"var x = {y:[0n]}; x.y[0]++ === 0n");assert.sameValue(x.y[0],1n,"var x = {y:[0n]}; x.y[0]++; x.y[0] === 1n");var x=[{z:0n}];assert.sameValue(x[0].z++,0n,"var x = [{z:0n}]; x[0].z++ === 0n");assert.sameValue(x[0].z,1n,"var x = [{z:0n}]; x[0].z++; x[0].z === 1n");


var x=0n;assert.sameValue(x++,0n,"var x = 0n; x++ === 0n"),assert.sameValue(x,1n,"var x = 0n; x++; x === 1n");var x=-1n;assert.sameValue(x++,-1n,"var x = -1n; x++ === -1n"),assert.sameValue(x,0n,"var x = -1n; x++; x === 0n");var x=123456n;assert.sameValue(x++,123456n,"var x = 123456n; x++ === 123456n"),assert.sameValue(x,123457n,"var x = 123456n; x++; x === 123457n");var x=-123457n;assert.sameValue(x++,-123457n,"var x = -123457n; x++ === -123457n"),assert.sameValue(x,-123456n,"var x = -123457n; x++; x === -123456n");var x=0x1fffffffffffff00n;assert.sameValue(x++,0x1fffffffffffff00n,"var x = 0x1fffffffffffff00n; x++ === 0x1fffffffffffff00n"),assert.sameValue(x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; x++; x === 0x1fffffffffffff01n");var x=-0x1fffffffffffff01n;assert.sameValue(x++,-0x1fffffffffffff01n,"var x = -0x1fffffffffffff01n; x++ === -0x1fffffffffffff01n"),assert.sameValue(x,-0x1fffffffffffff00n,"var x = -0x1fffffffffffff01n; x++; x === -0x1fffffffffffff00n");var x={y:0n};assert.sameValue(x.y++,0n,"var x = {y:0n}; x.y++ === 0n"),assert.sameValue(x.y,1n,"var x = {y:0n}; x.y++; x.y === 1n");var x={y:{z:0n}};assert.sameValue(x.y.z++,0n,"var x = {y:{z:0n}}; x.y.z++ === 0n"),assert.sameValue(x.y.z,1n,"var x = {y:{z:0n}}; x.y.z++; x.y.z === 1n");var x=[0n];assert.sameValue(x[0]++,0n,"var x = [0n]; x[0]++ === 0n"),assert.sameValue(x[0],1n,"var x = [0n]; x[0]++; x[0] === 1n");var x=[null,[null,null,0n]];assert.sameValue(x[1][2]++,0n,"var x = [null, [null, null, 0n]]; x[1][2]++ === 0n"),assert.sameValue(x[1][2],1n,"var x = [null, [null, null, 0n]]; x[1][2]++; x[1][2] === 1n");var x={y:[0n]};assert.sameValue(x.y[0]++,0n,"var x = {y:[0n]}; x.y[0]++ === 0n"),assert.sameValue(x.y[0],1n,"var x = {y:[0n]}; x.y[0]++; x.y[0] === 1n");var x=[{z:0n}];assert.sameValue(x[0].z++,0n,"var x = [{z:0n}]; x[0].z++ === 0n"),assert.sameValue(x[0].z,1n,"var x = [{z:0n}]; x[0].z++; x[0].z === 1n");



test262/test/built-ins/TypedArray/prototype/find/return-undefined-if-predicate-returns-false-value.js


testWithTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.find(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=sample.find(function(){return""});assert.sameValue(result,void 0,"ToBoolean(empty string)");result=sample.find(function(){return});assert.sameValue(result,void 0,"ToBoolean(undefined)");result=sample.find(function(){return null});assert.sameValue(result,void 0,"ToBoolean(null)");result=sample.find(function(){return 0});assert.sameValue(result,void 0,"ToBoolean(0)");result=sample.find(function(){return-0});assert.sameValue(result,void 0,"ToBoolean(-0)");result=sample.find(function(){return NaN});assert.sameValue(result,void 0,"ToBoolean(NaN)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.find(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=sample.find(function(){return""}),assert.sameValue(result,void 0,"ToBoolean(empty string)"),result=sample.find(function(){}),assert.sameValue(result,void 0,"ToBoolean(undefined)"),result=sample.find(function(){return null}),assert.sameValue(result,void 0,"ToBoolean(null)"),result=sample.find(function(){return 0}),assert.sameValue(result,void 0,"ToBoolean(0)"),result=sample.find(function(){return-0}),assert.sameValue(result,void 0,"ToBoolean(-0)"),result=sample.find(function(){return NaN}),assert.sameValue(result,void 0,"ToBoolean(NaN)")});



test262/test/language/expressions/postfix-increment/S11.3.1_A2.1_T2.js


try{throw x++,new Test262Error("#1.1: x++ throw ReferenceError. Actual: "+ x++)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x++ throw ReferenceError. Actual: "+e)}


try{throw x++,new Test262Error("#1.1: x++ throw ReferenceError. Actual: "+x++)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x++ throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/find/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.find(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.find(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.find(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.find(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/built-ins/Map/is-a-constructor.js


assert.sameValue(isConstructor(Map),!0,"isConstructor(Map) must return true"),new Map;


assert.sameValue(isConstructor(Map),!0,"isConstructor(Map) must return true");



test262/test/language/statements/let/global-use-before-initialization-in-prior-statement.js


x;let x;


let x;



test262/test/language/statements/let/block-local-use-before-initialization-in-prior-statement.js


assert.throws(ReferenceError,function(){{x;let x}});


assert.throws(ReferenceError,function(){{let x}});



test262/test/built-ins/RegExp/S15.10.2.13_A2_T1.js


var __executed=/[^]a/m.exec("a\naba"),__expected=["\na"];__expected.index=1;__expected.input="a\naba";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[^]a/m.exec(`a
aba`),__expected=[`
a`];__expected.index=1,__expected.input=`a
aba`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T6.js


var __executed=/[^o]t\b/.exec("pilOt\nsoviet robot	openoffice"),__expected=["Ot"];__expected.index=3;__expected.input="pilOt\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[^o]t\b/.exec(`pilOt
soviet robot	openoffice`),__expected=["Ot"];__expected.index=3,__expected.input=`pilOt
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/expressions/property-accessors/S8.12.3_A2.js


var __obj={};if(__obj.propFoo!==void 0)throw new Test262Error("#1: var __obj={}; __obj.propFoo === undefined. Actual: "+__obj.propFoo);if(__obj["propFoo"]!==void 0)throw new Test262Error("#2: var __obj={}; __obj['propFoo'] === undefined. Actual: "+__obj["propFoo"]);


var __obj={};if(__obj.propFoo!==void 0)throw new Test262Error("#1: var __obj={}; __obj.propFoo === undefined. Actual: "+__obj.propFoo);if(__obj.propFoo!==void 0)throw new Test262Error("#2: var __obj={}; __obj['propFoo'] === undefined. Actual: "+__obj.propFoo);



test262/test/built-ins/RegExp/S15.10.2.6_A1_T2.js


var __executed=/e$/.exec("pairs\nmakes	double"),__expected=["e"];__expected.index=17;__expected.input="pairs\nmakes	double";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/e$/.exec(`pairs
makes	double`),__expected=["e"];__expected.index=17,__expected.input=`pairs
makes	double`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Temporal/PlainDateTime/prototype/since/roundingincrement-non-integer.js


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5),result=later.since(earlier,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,0,0,0,0,0,0,4,"roundingIncrement 2.5 truncates to 2");const result2=later.since(earlier,{smallestUnit:"days",roundingIncrement:1000000000.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5),result=later.since(earlier,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,0,0,0,0,0,0,4,"roundingIncrement 2.5 truncates to 2");const result2=later.since(earlier,{smallestUnit:"days",roundingIncrement:1e9+.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");



test262/test/language/expressions/property-accessors/S11.2.1_A1.2.js


if(eval('Number[	"POSITIVE_INFINITY"	]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#1: Number[\\u0009"POSITIVE_INFINITY"\\u0009] === Number.POSITIVE_INFINITY');if(eval('Number[\v"POSITIVE_INFINITY"\v]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#2: Number[\\u000B"POSITIVE_INFINITY"\\u000B] === Number.POSITIVE_INFINITY');if(eval('Number[\f"POSITIVE_INFINITY"\f]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#3: Number[\\u000C"POSITIVE_INFINITY"\\u000C] === Number.POSITIVE_INFINITY');if(eval('Number[ "POSITIVE_INFINITY" ]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#4: Number[\\u0020"POSITIVE_INFINITY"\\u0020] === Number.POSITIVE_INFINITY');if(eval('Number[\xA0"POSITIVE_INFINITY"\xA0]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#5: Number[\\u00A0"POSITIVE_INFINITY"\\u00A0] === Number.POSITIVE_INFINITY');if(eval('Number[\n"POSITIVE_INFINITY"\n]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#6: Number[\\u000A"POSITIVE_INFINITY"\\u000A] === Number.POSITIVE_INFINITY');if(eval('Number[\r"POSITIVE_INFINITY"\r]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#7: Number[\\u000D"POSITIVE_INFINITY"\\u000D] === Number.POSITIVE_INFINITY');if(eval('Number[\u2028"POSITIVE_INFINITY"\u2028]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#8: Number[\\u2028"POSITIVE_INFINITY"\\u2028] === Number.POSITIVE_INFINITY');if(eval('Number[\u2029"POSITIVE_INFINITY"\u2029]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#9: Number[\\u2029"POSITIVE_INFINITY"\\u2029] === Number.POSITIVE_INFINITY');if(eval('Number[	\v\f \xA0\n\r\u2028\u2029"POSITIVE_INFINITY"	\v\f \xA0\n\r\u2028\u2029]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#10: Number[\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029"POSITIVE_INFINITY"\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029] === Number.POSITIVE_INFINITY');


if(eval('Number[	"POSITIVE_INFINITY"	]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#1: Number[\\u0009"POSITIVE_INFINITY"\\u0009] === Number.POSITIVE_INFINITY');if(eval('Number[\v"POSITIVE_INFINITY"\v]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#2: Number[\\u000B"POSITIVE_INFINITY"\\u000B] === Number.POSITIVE_INFINITY');if(eval('Number[\f"POSITIVE_INFINITY"\f]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#3: Number[\\u000C"POSITIVE_INFINITY"\\u000C] === Number.POSITIVE_INFINITY');if(eval('Number[ "POSITIVE_INFINITY" ]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#4: Number[\\u0020"POSITIVE_INFINITY"\\u0020] === Number.POSITIVE_INFINITY');if(eval('Number[\xA0"POSITIVE_INFINITY"\xA0]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#5: Number[\\u00A0"POSITIVE_INFINITY"\\u00A0] === Number.POSITIVE_INFINITY');if(eval(`Number[
"POSITIVE_INFINITY"
]`)!==Number.POSITIVE_INFINITY)throw new Test262Error('#6: Number[\\u000A"POSITIVE_INFINITY"\\u000A] === Number.POSITIVE_INFINITY');if(eval('Number[\r"POSITIVE_INFINITY"\r]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#7: Number[\\u000D"POSITIVE_INFINITY"\\u000D] === Number.POSITIVE_INFINITY');if(eval('Number[\u2028"POSITIVE_INFINITY"\u2028]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#8: Number[\\u2028"POSITIVE_INFINITY"\\u2028] === Number.POSITIVE_INFINITY');if(eval('Number[\u2029"POSITIVE_INFINITY"\u2029]')!==Number.POSITIVE_INFINITY)throw new Test262Error('#9: Number[\\u2029"POSITIVE_INFINITY"\\u2029] === Number.POSITIVE_INFINITY');if(eval(`Number[	\v\f \xA0
\r\u2028\u2029"POSITIVE_INFINITY"	\v\f \xA0
\r\u2028\u2029]`)!==Number.POSITIVE_INFINITY)throw new Test262Error('#10: Number[\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029"POSITIVE_INFINITY"\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029] === Number.POSITIVE_INFINITY');



test262/test/language/expressions/property-accessors/S11.2.1_A3_T5.js


try{throw null.toString(),new Test262Error("#1.1: null.toString() throw TypeError. Actual: "+null.toString())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: null.toString() throw TypeError. Actual: "+e)}try{throw null["toString"](),new Test262Error('#2.1: null["toString"]() throw TypeError. Actual: '+null["toString"]())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2.2: null["toString"]() throw TypeError. Actual: '+e)}


try{throw null.toString(),new Test262Error("#1.1: null.toString() throw TypeError. Actual: "+null.toString())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: null.toString() throw TypeError. Actual: "+e)}try{throw null.toString(),new Test262Error('#2.1: null["toString"]() throw TypeError. Actual: '+null.toString())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2.2: null["toString"]() throw TypeError. Actual: '+e)}



test262/test/built-ins/TypedArray/prototype/filter/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.filter,"function","implements TypedArray.prototype.filter"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.filter(()=>{});try{ab.resize(BPE*3)}catch(_){}array.filter(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.filter(()=>{}),new Test262Error("filter completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.filter,"function","implements TypedArray.prototype.filter"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.filter(()=>{});try{ab.resize(BPE*3)}catch{}array.filter(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.filter(()=>{}),new Test262Error("filter completed successfully")})});



test262/test/language/expressions/property-accessors/S11.2.1_A3_T4.js


try{throw(void 0).toString(),new Test262Error("#1.1: undefined.toString() throw TypeError. Actual: "+(void 0).toString())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: undefined.toString() throw TypeError. Actual: "+e)}try{throw(void 0)["toString"](),new Test262Error('#2.1: undefined["toString"]() throw TypeError. Actual: '+(void 0)["toString"]())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2.2: undefined["toString"]() throw TypeError. Actual: '+e)}


try{throw(void 0).toString(),new Test262Error("#1.1: undefined.toString() throw TypeError. Actual: "+(void 0).toString())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: undefined.toString() throw TypeError. Actual: "+e)}try{throw(void 0).toString(),new Test262Error('#2.1: undefined["toString"]() throw TypeError. Actual: '+(void 0).toString())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2.2: undefined["toString"]() throw TypeError. Actual: '+e)}



test262/test/built-ins/RegExp/regexp-modifiers/remove-ignoreCase-does-not-affect-dotAll-flag.js


var re1=/(?-i:.es)/i;assert(re1.test("aes"),"s should match s in modified group");assert(!re1.test("aeS"),"s should not match S in modified group");assert(!re1.test("\nes"),". should not match newline in modified group");assert(!re1.test("\neS"),". should not match newline in modified group");var re2=/(?-i:.es)/is;assert(re2.test("aes"),"s should match s in modified group");assert(!re2.test("aeS"),"s should not match S in modified group");assert(re2.test("\nes"),". should match newline in modified group");assert(!re2.test("\neS"),"s should not match S in modified group");


var re1=/(?-i:.es)/i;assert(re1.test("aes"),"s should match s in modified group"),assert(!re1.test("aeS"),"s should not match S in modified group"),assert(!re1.test(`
es`),". should not match newline in modified group"),assert(!re1.test(`
eS`),". should not match newline in modified group");var re2=/(?-i:.es)/is;assert(re2.test("aes"),"s should match s in modified group"),assert(!re2.test("aeS"),"s should not match S in modified group"),assert(re2.test(`
es`),". should match newline in modified group"),assert(!re2.test(`
eS`),"s should not match S in modified group");



test262/test/language/expressions/property-accessors/S11.2.1_A1.1.js


if(eval("Number	.	POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Number\\u0009.\\u0009POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\v.\vPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: Number\\u000B.\\u000BPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\f.\fPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#3: Number\\u000C.\\u000CPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number . POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#4: Number\\u0020.\\u0020POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\xA0.\xA0POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Number\\u00A0.\\u00A0POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\n.\nPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#6: Number\\u000A.\\u000APOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\r.\rPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#7: Number\\u000D.\\u000DPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\u2028.\u2028POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#8: Number\\u2028.\\u2028POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\u2029.\u2029POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#9: Number\\u2029.\\u2029POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number	\v\f \xA0\n\r\u2028\u2029.	\v\f \xA0\n\r\u2028\u2029POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#10: Number\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029.\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029POSITIVE_INFINITY === Number.POSITIVE_INFINITY");


if(eval("Number	.	POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Number\\u0009.\\u0009POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\v.\vPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: Number\\u000B.\\u000BPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\f.\fPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#3: Number\\u000C.\\u000CPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number . POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#4: Number\\u0020.\\u0020POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\xA0.\xA0POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Number\\u00A0.\\u00A0POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval(`Number
.
POSITIVE_INFINITY`)!==Number.POSITIVE_INFINITY)throw new Test262Error("#6: Number\\u000A.\\u000APOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\r.\rPOSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#7: Number\\u000D.\\u000DPOSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\u2028.\u2028POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#8: Number\\u2028.\\u2028POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval("Number\u2029.\u2029POSITIVE_INFINITY")!==Number.POSITIVE_INFINITY)throw new Test262Error("#9: Number\\u2029.\\u2029POSITIVE_INFINITY === Number.POSITIVE_INFINITY");if(eval(`Number	\v\f \xA0
\r\u2028\u2029.	\v\f \xA0
\r\u2028\u2029POSITIVE_INFINITY`)!==Number.POSITIVE_INFINITY)throw new Test262Error("#10: Number\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029.\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029POSITIVE_INFINITY === Number.POSITIVE_INFINITY");



test262/test/built-ins/String/prototype/search/S15.5.4.12_A7.js


var __FACTORY=String.prototype.search;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.search; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.1: __FACTORY = String.prototype.search; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}


var __FACTORY=String.prototype.search;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.search; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.1: __FACTORY = String.prototype.search; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}



test262/test/language/statements/let/syntax/escaped-let.js


this.let=0;let;a;var a;


this.let=0,let;var a;



test262/test/language/expressions/property-accessors/S11.2.1_A2.js


try{throw object[1],new Test262Error("#1.1: object[1] throw ReferenceError. Actual: "+object[1])}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: object[1] throw ReferenceError. Actual: "+e)}try{throw object.prop,new Test262Error("#2.1: object.prop throw ReferenceError. Actual: "+object.prop)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#2.2: object.prop throw ReferenceError. Actual: "+e)}


try{throw object[1],new Test262Error("#1.1: object[1] throw ReferenceError. Actual: "+object[1])}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: object[1] throw ReferenceError. Actual: "+e)}try{throw object.prop,new Test262Error("#2.1: object.prop throw ReferenceError. Actual: "+object.prop)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#2.2: object.prop throw ReferenceError. Actual: "+e)}



test262/test/built-ins/RegExp/regexp-modifiers/add-dotAll-does-not-affect-alternatives-outside.js


var re1=/a.a|b.b|(?s:c.c)|d.d|e.e/;assert(!re1.test("a\na"),"Alternative `a.a` should not match newline");assert(!re1.test("b\nb"),"Alternative `b.b` should not match newline");assert(re1.test("c\nc"),"Alternative `(?s:c.c)` should match newline in modified group");assert(!re1.test("d\nd"),"Alternative `d.d` should not match newline");assert(!re1.test("e\ne"),"Alternative `e.e` should not match newline");var re2=/(a.a)|(?:b.b)|(?s:c.c)|(?:d.d)|(e.e)/;assert(!re2.test("a\na"),"Alternative `(a.a)` should not match newline");assert(!re2.test("b\nb"),"Alternative `(?:b.b)` should not match newline");assert(re2.test("c\nc"),"Alternative `(?s:c.c)` should match newline in modified group");assert(!re2.test("d\nd"),"Alternative `(?:d.d)` should not match newline");assert(!re2.test("e\ne"),"Alternative `(e.e)` should not match newline");


var re1=/a.a|b.b|(?s:c.c)|d.d|e.e/;assert(!re1.test(`a
a`),"Alternative `a.a` should not match newline"),assert(!re1.test(`b
b`),"Alternative `b.b` should not match newline"),assert(re1.test(`c
c`),"Alternative `(?s:c.c)` should match newline in modified group"),assert(!re1.test(`d
d`),"Alternative `d.d` should not match newline"),assert(!re1.test(`e
e`),"Alternative `e.e` should not match newline");var re2=/(a.a)|(?:b.b)|(?s:c.c)|(?:d.d)|(e.e)/;assert(!re2.test(`a
a`),"Alternative `(a.a)` should not match newline"),assert(!re2.test(`b
b`),"Alternative `(?:b.b)` should not match newline"),assert(re2.test(`c
c`),"Alternative `(?s:c.c)` should match newline in modified group"),assert(!re2.test(`d
d`),"Alternative `(?:d.d)` should not match newline"),assert(!re2.test(`e
e`),"Alternative `(e.e)` should not match newline");



test262/test/language/expressions/logical-and/S11.11.1_A2.1_T3.js


try{throw y,new Test262Error("#1.1: true && y throw ReferenceError. Actual: "+y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: true && y throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: true && y throw ReferenceError. Actual: "+y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: true && y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Temporal/PlainDateTime/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/language/expressions/logical-and/S11.11.1_A2.1_T2.js


try{throw x&&!0,new Test262Error("#1.1: x && true throw ReferenceError. Actual: "+(x&&!0))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x && true throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: x && true throw ReferenceError. Actual: "+(x&&!0))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x && true throw ReferenceError. Actual: "+e)}



test262/test/built-ins/RegExp/regexp-modifiers/changing-multiline-flag-does-not-affect-multiline-modifier.js


var re1=new RegExp(/(?m:es$)/m,"");assert(re1.test("es"),"$ still should match end of input in modified group");assert(re1.test("es\ns"),"$ still should match newline in modified group");var re2=new RegExp(/^(?-m:es$)/,"m");assert(re2.test("es"),"$ still should match end of input in modified group");assert(!re2.test("es\ns"),"$ still should not match newline in modified group");


var re1=new RegExp(/(?m:es$)/m,"");assert(re1.test("es"),"$ still should match end of input in modified group"),assert(re1.test(`es
s`),"$ still should match newline in modified group");var re2=new RegExp(/^(?-m:es$)/,"m");assert(re2.test("es"),"$ still should match end of input in modified group"),assert(!re2.test(`es
s`),"$ still should not match newline in modified group");



test262/test/built-ins/RegExp/regexp-modifiers/remove-multiline-does-not-affect-dotAll-flag.js


var re1=/(?-m:es.$)/m;assert(re1.test("esz"),". should match z in modified group");assert(!re1.test("es\n"),". should not match newline in modified group");assert(!re1.test("esz\n"),"$ should not match newline in modified group");assert(!re1.test("es\n\n"),"$ should not match newline in modified group");var re2=/(?-m:es.$)/ms;assert(re2.test("esz"),". should match z in modified group");assert(re2.test("es\n"),". should match newline in modified group");assert(!re2.test("esz\n"),"$ should not match newline in modified group");assert(!re2.test("es\n\n"),"$ should not match newline in modified group");


var re1=/(?-m:es.$)/m;assert(re1.test("esz"),". should match z in modified group"),assert(!re1.test(`es
`),". should not match newline in modified group"),assert(!re1.test(`esz
`),"$ should not match newline in modified group"),assert(!re1.test(`es

`),"$ should not match newline in modified group");var re2=/(?-m:es.$)/ms;assert(re2.test("esz"),". should match z in modified group"),assert(re2.test(`es
`),". should match newline in modified group"),assert(!re2.test(`esz
`),"$ should not match newline in modified group"),assert(!re2.test(`es

`),"$ should not match newline in modified group");



test262/test/built-ins/TypedArray/prototype/filter/BigInt/result-full-callbackfn-returns-true.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n]);[!0,1,"test262",Symbol("1"),{},[],-1,Infinity,-1/0,.1,-.1].forEach(function(val){var result=sample.filter(function(){return val});assert(compareArray(result,sample),val)})});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n]);[!0,1,"test262",Symbol("1"),{},[],-1,1/0,-1/0,.1,-.1].forEach(function(val){var result=sample.filter(function(){return val});assert(compareArray(result,sample),val)})});



test262/test/language/expressions/logical-and/S11.11.1_A1.js


if(eval("true	&&	true")!==!0)throw new Test262Error("#1: (true\\u0009&&\\u0009true) === true");if(eval("true\v&&\vtrue")!==!0)throw new Test262Error("#2: (true\\u000B&&\\u000Btrue) === true");if(eval("true\f&&\ftrue")!==!0)throw new Test262Error("#3: (true\\u000C&&\\u000Ctrue) === true");if(eval("true && true")!==!0)throw new Test262Error("#4: (true\\u0020&&\\u0020true) === true");if(eval("true\xA0&&\xA0true")!==!0)throw new Test262Error("#5: (true\\u00A0&&\\u00A0true) === true");if(eval("true\n&&\ntrue")!==!0)throw new Test262Error("#6: (true\\u000A&&\\u000Atrue) === true");if(eval("true\r&&\rtrue")!==!0)throw new Test262Error("#7: (true\\u000D&&\\u000Dtrue) === true");if(eval("true\u2028&&\u2028true")!==!0)throw new Test262Error("#8: (true\\u2028&&\\u2028true) === true");if(eval("true\u2029&&\u2029true")!==!0)throw new Test262Error("#9: (true\\u2029&&\\u2029true) === true");if(eval("true	\v\f \xA0\n\r\u2028\u2029&&	\v\f \xA0\n\r\u2028\u2029true")!==!0)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029&&\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");


if(eval("true	&&	true")!==!0)throw new Test262Error("#1: (true\\u0009&&\\u0009true) === true");if(eval("true\v&&\vtrue")!==!0)throw new Test262Error("#2: (true\\u000B&&\\u000Btrue) === true");if(eval("true\f&&\ftrue")!==!0)throw new Test262Error("#3: (true\\u000C&&\\u000Ctrue) === true");if(eval("true && true")!==!0)throw new Test262Error("#4: (true\\u0020&&\\u0020true) === true");if(eval("true\xA0&&\xA0true")!==!0)throw new Test262Error("#5: (true\\u00A0&&\\u00A0true) === true");if(eval(`true
&&
true`)!==!0)throw new Test262Error("#6: (true\\u000A&&\\u000Atrue) === true");if(eval("true\r&&\rtrue")!==!0)throw new Test262Error("#7: (true\\u000D&&\\u000Dtrue) === true");if(eval("true\u2028&&\u2028true")!==!0)throw new Test262Error("#8: (true\\u2028&&\\u2028true) === true");if(eval("true\u2029&&\u2029true")!==!0)throw new Test262Error("#9: (true\\u2029&&\\u2029true) === true");if(eval(`true	\v\f \xA0
\r\u2028\u2029&&	\v\f \xA0
\r\u2028\u2029true`)!==!0)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029&&\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");



test262/test/built-ins/RegExp/regexp-modifiers/nesting-add-multiline-within-remove-multiline.js


var re1=/(?-m:es(?m:$)|js$)/m;assert(re1.test("es\ns"),"$ should match newline in modified group");assert(re1.test("js"),"$ should match end of input in nested modified group");assert(!re1.test("js\ns"),"$ should not match newline in nested modified group");var re2=/(?-m:es(?m-:$)|js$)/m;assert(re2.test("es\ns"),"$ should match newline in modified group");assert(re2.test("js"),"$ should match end of input in nested modified group");assert(!re2.test("js\ns"),"$ should not match newline in nested modified group");


var re1=/(?-m:es(?m:$)|js$)/m;assert(re1.test(`es
s`),"$ should match newline in modified group"),assert(re1.test("js"),"$ should match end of input in nested modified group"),assert(!re1.test(`js
s`),"$ should not match newline in nested modified group");var re2=/(?-m:es(?m-:$)|js$)/m;assert(re2.test(`es
s`),"$ should match newline in modified group"),assert(re2.test("js"),"$ should match end of input in nested modified group"),assert(!re2.test(`js
s`),"$ should not match newline in nested modified group");



test262/test/built-ins/RegExp/regexp-modifiers/nesting-remove-multiline-within-add-multiline.js


var re1=/(?m:es$|(?-m:js$))/;assert(re1.test("es\ns"),"first $ should match newline in modified group");assert(re1.test("js"),"second $ should match end of input in nested modified group");assert(!re1.test("js\ns"),"second $ should not match newline in nested modified group");var re2=/(?m-:es$|(?-m:js$))/;assert(re2.test("es\ns"),"first $ should match newline in modified group");assert(re2.test("js"),"second $ should match end of input in nested modified group");assert(!re2.test("js\ns"),"second $ should not match newline in nested modified group");


var re1=/(?m:es$|(?-m:js$))/;assert(re1.test(`es
s`),"first $ should match newline in modified group"),assert(re1.test("js"),"second $ should match end of input in nested modified group"),assert(!re1.test(`js
s`),"second $ should not match newline in nested modified group");var re2=/(?m-:es$|(?-m:js$))/;assert(re2.test(`es
s`),"first $ should match newline in modified group"),assert(re2.test("js"),"second $ should match end of input in nested modified group"),assert(!re2.test(`js
s`),"second $ should not match newline in nested modified group");



test262/test/built-ins/Temporal/PlainDateTime/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/RegExp/regexp-modifiers/remove-multiline-does-not-affect-ignoreCase-flag.js


var re1=/(?-m:es$)/m;assert(re1.test("es"),"s should match s in modified group");assert(!re1.test("eS"),"s should not match S in modified group");assert(!re1.test("es\nz"),"$ should not match newline in modified group");assert(!re1.test("eS\nz"),"s should not match S in modified group");var re2=/(?-m:es$)/im;assert(re2.test("es"),"s should match s in modified group");assert(re2.test("eS"),"s should match S in modified group");assert(!re2.test("es\nz"),"$ should not match newline in modified group");assert(!re2.test("eS\nz"),"$ should not match newline in modified group");


var re1=/(?-m:es$)/m;assert(re1.test("es"),"s should match s in modified group"),assert(!re1.test("eS"),"s should not match S in modified group"),assert(!re1.test(`es
z`),"$ should not match newline in modified group"),assert(!re1.test(`eS
z`),"s should not match S in modified group");var re2=/(?-m:es$)/mi;assert(re2.test("es"),"s should match s in modified group"),assert(re2.test("eS"),"s should match S in modified group"),assert(!re2.test(`es
z`),"$ should not match newline in modified group"),assert(!re2.test(`eS
z`),"$ should not match newline in modified group");



test262/test/built-ins/TypedArray/prototype/filter/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.filter,"function","implements TypedArray.prototype.filter"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.filter(()=>{});try{ab.resize(BPE*3)}catch(_){}array.filter(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.filter(()=>{}),new Test262Error("filter completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.filter,"function","implements TypedArray.prototype.filter"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.filter(()=>{});try{ab.resize(BPE*3)}catch{}array.filter(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.filter(()=>{}),new Test262Error("filter completed successfully")})});



test262/test/built-ins/RegExp/regexp-modifiers/add-multiline-does-not-affect-ignoreCase-flag.js


var re1=/(?m:es$)/;assert(re1.test("es"),"s should match s in modified group");assert(!re1.test("eS"),"s should not match S in modified group");assert(re1.test("es\nz"),"$ should match newline in modified group");assert(!re1.test("eS\nz"),"s should not match S in modified group");var re2=/(?m:es$)/i;assert(re2.test("es"),"s should match s in modified group");assert(re2.test("eS"),"s should match S in modified group");assert(re2.test("es\nz"),"$ should match newline in modified group");assert(re2.test("eS\nz"),"$ should match newline in modified group");var re3=/(?m-:es$)/;assert(re3.test("es"),"s should match s in modified group");assert(!re3.test("eS"),"s should not match S in modified group");assert(re3.test("es\nz"),"$ should match newline in modified group");assert(!re3.test("eS\nz"),"s should not match S in modified group");var re4=/(?m-:es$)/i;assert(re4.test("es"),"s should match s in modified group");assert(re4.test("eS"),"s should match S in modified group");assert(re4.test("es\nz"),"$ should match newline in modified group");assert(re4.test("eS\nz"),"$ should match newline in modified group");


var re1=/(?m:es$)/;assert(re1.test("es"),"s should match s in modified group"),assert(!re1.test("eS"),"s should not match S in modified group"),assert(re1.test(`es
z`),"$ should match newline in modified group"),assert(!re1.test(`eS
z`),"s should not match S in modified group");var re2=/(?m:es$)/i;assert(re2.test("es"),"s should match s in modified group"),assert(re2.test("eS"),"s should match S in modified group"),assert(re2.test(`es
z`),"$ should match newline in modified group"),assert(re2.test(`eS
z`),"$ should match newline in modified group");var re3=/(?m-:es$)/;assert(re3.test("es"),"s should match s in modified group"),assert(!re3.test("eS"),"s should not match S in modified group"),assert(re3.test(`es
z`),"$ should match newline in modified group"),assert(!re3.test(`eS
z`),"s should not match S in modified group");var re4=/(?m-:es$)/i;assert(re4.test("es"),"s should match s in modified group"),assert(re4.test("eS"),"s should match S in modified group"),assert(re4.test(`es
z`),"$ should match newline in modified group"),assert(re4.test(`eS
z`),"$ should match newline in modified group");



test262/test/built-ins/RegExp/regexp-modifiers/remove-dotAll-does-not-affect-ignoreCase-flag.js


var re1=/(?-s:.es)/s;assert(re1.test("aes"),"s should match s in modified group");assert(!re1.test("aeS"),"s should not match S in modified group");assert(!re1.test("\nes"),". should not match newline in modified group");assert(!re1.test("\neS"),". should not match newline in modified group");var re2=/(?-s:.es)/is;assert(re2.test("aes"),"s should match s in modified group");assert(re2.test("aeS"),"s should match S in modified group");assert(!re2.test("\nes"),". should not match newline in modified group");assert(!re2.test("\neS"),". should not match newline in modified group");


var re1=/(?-s:.es)/s;assert(re1.test("aes"),"s should match s in modified group"),assert(!re1.test("aeS"),"s should not match S in modified group"),assert(!re1.test(`
es`),". should not match newline in modified group"),assert(!re1.test(`
eS`),". should not match newline in modified group");var re2=/(?-s:.es)/si;assert(re2.test("aes"),"s should match s in modified group"),assert(re2.test("aeS"),"s should match S in modified group"),assert(!re2.test(`
es`),". should not match newline in modified group"),assert(!re2.test(`
eS`),". should not match newline in modified group");



test262/test/built-ins/RegExp/regexp-modifiers/add-remove-modifiers.js


var re1=/(?m-i:^a$)/i;assert(!re1.test("A\n"),"Should not match 'A\\n'");assert(re1.test("a\n"),"Should match 'a\\n'");var re2=new RegExp("(?m-i:^a$)","i");assert(!re2.test("A\n"),"Should not match 'A\\n'");assert(re2.test("a\n"),"Should match 'a\\n'");


var re1=/(?m-i:^a$)/i;assert(!re1.test(`A
`),"Should not match 'A\\n'"),assert(re1.test(`a
`),"Should match 'a\\n'");var re2=new RegExp("(?m-i:^a$)","i");assert(!re2.test(`A
`),"Should not match 'A\\n'"),assert(re2.test(`a
`),"Should match 'a\\n'");



test262/test/built-ins/String/prototype/S15.5.3.1_A3.js


if(!String.hasOwnProperty("prototype"))throw new Test262Error("#1: String.hasOwnProperty('prototype') return true. Actual: "+String.hasOwnProperty("prototype"));verifyNotConfigurable(String,"prototype");try{if(delete String.prototype!==!1)throw new Test262Error("#2: String.prototype has the attribute DontDelete")}catch(e){if(e instanceof Test262Error)throw e;assert(e instanceof TypeError)}if(!String.hasOwnProperty("prototype"))throw new Test262Error("#3: delete String.prototype; String.hasOwnProperty('prototype') return true. Actual: "+String.hasOwnProperty("prototype"));


if(!String.hasOwnProperty("prototype"))throw new Test262Error("#1: String.hasOwnProperty('prototype') return true. Actual: "+String.hasOwnProperty("prototype"));verifyNotConfigurable(String,"prototype");try{if(delete String.prototype)throw new Test262Error("#2: String.prototype has the attribute DontDelete")}catch(e){if(e instanceof Test262Error)throw e;assert(e instanceof TypeError)}if(!String.hasOwnProperty("prototype"))throw new Test262Error("#3: delete String.prototype; String.hasOwnProperty('prototype') return true. Actual: "+String.hasOwnProperty("prototype"));



test262/test/built-ins/Temporal/ZonedDateTime/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/RegExp/regexp-modifiers/add-dotAll-does-not-affect-ignoreCase-flag.js


var re1=/(?s:.es)/;assert(re1.test("aes"),"s should match s in modified group");assert(re1.test("\nes"),"s should match s in modified group");assert(!re1.test("aeS"),"s should not match S in modified group");assert(!re1.test("\neS"),"s should not match S in modified group");var re2=/(?s:.es)/i;assert(re2.test("aes"),"s should match s in modified group");assert(re2.test("aeS"),"s should match S in modified group");assert(re2.test("\nes"),"s should match s in modified group");assert(re2.test("\neS"),"s should match S in modified group");var re3=/(?s-:.es)/;assert(re3.test("aes"),"s should match s in modified group");assert(re3.test("\nes"),"s should match s in modified group");assert(!re3.test("aeS"),"s should not match S in modified group");assert(!re3.test("\neS"),"s should not match S in modified group");var re4=/(?s-:.es)/i;assert(re4.test("aes"),"s should match s in modified group");assert(re4.test("aeS"),"s should match S in modified group");assert(re4.test("\nes"),"s should match s in modified group");assert(re4.test("\neS"),"s should match S in modified group");


var re1=/(?s:.es)/;assert(re1.test("aes"),"s should match s in modified group"),assert(re1.test(`
es`),"s should match s in modified group"),assert(!re1.test("aeS"),"s should not match S in modified group"),assert(!re1.test(`
eS`),"s should not match S in modified group");var re2=/(?s:.es)/i;assert(re2.test("aes"),"s should match s in modified group"),assert(re2.test("aeS"),"s should match S in modified group"),assert(re2.test(`
es`),"s should match s in modified group"),assert(re2.test(`
eS`),"s should match S in modified group");var re3=/(?s-:.es)/;assert(re3.test("aes"),"s should match s in modified group"),assert(re3.test(`
es`),"s should match s in modified group"),assert(!re3.test("aeS"),"s should not match S in modified group"),assert(!re3.test(`
eS`),"s should not match S in modified group");var re4=/(?s-:.es)/i;assert(re4.test("aes"),"s should match s in modified group"),assert(re4.test("aeS"),"s should match S in modified group"),assert(re4.test(`
es`),"s should match s in modified group"),assert(re4.test(`
eS`),"s should match S in modified group");



test262/test/built-ins/RegExp/regexp-modifiers/remove-dotAll-does-not-affect-multiline-flag.js


var re1=/(?-s:.es$)/s;assert(re1.test("aes"),". should match a in modified group");assert(!re1.test("aes\nz"),"$ should not match newline in modified group");assert(!re1.test("\nes"),". should not match newline in modified group");assert(!re1.test("\nes\nz"),"$ should not match newline in modified group");var re2=/(?-s:.es$)/ms;assert(re2.test("aes"),". should match a in modified group");assert(re2.test("aes\nz"),"$ should match newline in modified group");assert(!re2.test("\nes"),". should not match newline in modified group");assert(!re2.test("\nes\nz"),". should not match newline in modified group");


var re1=/(?-s:.es$)/s;assert(re1.test("aes"),". should match a in modified group"),assert(!re1.test(`aes
z`),"$ should not match newline in modified group"),assert(!re1.test(`
es`),". should not match newline in modified group"),assert(!re1.test(`
es
z`),"$ should not match newline in modified group");var re2=/(?-s:.es$)/sm;assert(re2.test("aes"),". should match a in modified group"),assert(re2.test(`aes
z`),"$ should match newline in modified group"),assert(!re2.test(`
es`),". should not match newline in modified group"),assert(!re2.test(`
es
z`),". should not match newline in modified group");



test262/test/language/expressions/division/S11.5.2_A2.1_T2.js


try{throw x/1,new Test262Error("#1.1: x / 1 throw ReferenceError. Actual: "+x/1)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x / 1 throw ReferenceError. Actual: "+e)}


try{throw x/1,new Test262Error("#1.1: x / 1 throw ReferenceError. Actual: "+x/1)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x / 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/filter/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,NaNvalue=isFloatTypedArrayConstructor(TA)?NaN:0,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,finalResult,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.filter(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,finalResult=NaNvalue,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,finalResult=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.compareArray(result,[0,0,finalResult],"result (shrink)");elements=[];indices=[];arrays=[];result=sample.filter(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.compareArray(result,expectedElements,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,NaNvalue=isFloatTypedArrayConstructor(TA)?NaN:0,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,finalResult,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.filter(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,finalResult=NaNvalue,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,finalResult=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.compareArray(result,[0,0,finalResult],"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.filter(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.compareArray(result,expectedElements,"result (grow)")});



test262/test/language/expressions/division/S11.5.2_A2.1_T3.js


try{throw 1/y,new Test262Error("#1.1: 1 / y throw ReferenceError. Actual: "+1/y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 / y throw ReferenceError. Actual: "+e)}


try{throw 1/y,new Test262Error("#1.1: 1 / y throw ReferenceError. Actual: "+1/y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 / y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/RegExp/regexp-modifiers/add-ignoreCase-does-not-affect-multiline-flag.js


var re1=/(?i:es$)/;assert(re1.test("es"),"s should match s in modified group");assert(re1.test("eS"),"s should match S in modified group");assert(!re1.test("es\nz"),"$ should not match newline in modified group");assert(!re1.test("eS\nz"),"$ should not match newline in modified group");var re2=/(?i:es$)/m;assert(re2.test("es"),"s should match s in modified group");assert(re2.test("eS"),"s should match S in modified group");assert(re2.test("es\nz"),"$ should match newline in modified group");assert(re2.test("eS\nz"),"$ should match newline in modified group");var re3=/(?i-:es$)/;assert(re3.test("es"),"s should match s in modified group");assert(re3.test("eS"),"s should match S in modified group");assert(!re3.test("es\nz"),"$ should not match newline in modified group");assert(!re3.test("eS\nz"),"$ should not match newline in modified group");var re4=/(?i-:es$)/m;assert(re4.test("es"),"s should match s in modified group");assert(re4.test("eS"),"s should match S in modified group");assert(re4.test("es\nz"),"$ should match newline in modified group");assert(re4.test("eS\nz"),"$ should match newline in modified group");


var re1=/(?i:es$)/;assert(re1.test("es"),"s should match s in modified group"),assert(re1.test("eS"),"s should match S in modified group"),assert(!re1.test(`es
z`),"$ should not match newline in modified group"),assert(!re1.test(`eS
z`),"$ should not match newline in modified group");var re2=/(?i:es$)/m;assert(re2.test("es"),"s should match s in modified group"),assert(re2.test("eS"),"s should match S in modified group"),assert(re2.test(`es
z`),"$ should match newline in modified group"),assert(re2.test(`eS
z`),"$ should match newline in modified group");var re3=/(?i-:es$)/;assert(re3.test("es"),"s should match s in modified group"),assert(re3.test("eS"),"s should match S in modified group"),assert(!re3.test(`es
z`),"$ should not match newline in modified group"),assert(!re3.test(`eS
z`),"$ should not match newline in modified group");var re4=/(?i-:es$)/m;assert(re4.test("es"),"s should match s in modified group"),assert(re4.test("eS"),"s should match S in modified group"),assert(re4.test(`es
z`),"$ should match newline in modified group"),assert(re4.test(`eS
z`),"$ should match newline in modified group");



test262/test/built-ins/String/prototype/substring/S15.5.4.15_A7.js


var __FACTORY=String.prototype.substring;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.substring; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: undefined = 1 throw a TypeError. Actual: "+e)}


var __FACTORY=String.prototype.substring;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.substring; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: undefined = 1 throw a TypeError. Actual: "+e)}



test262/test/language/expressions/division/bigint-and-number.js


assert.throws(TypeError,function(){1n/1},"1n / 1 throws TypeError"),assert.throws(TypeError,function(){1/1n},"1 / 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)/1},"Object(1n) / 1 throws TypeError"),assert.throws(TypeError,function(){1/Object(1n)},"1 / Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n/Object(1)},"1n / Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)/1n},"Object(1) / 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)/Object(1)},"Object(1n) / Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)/Object(1n)},"Object(1) / Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n/NaN},"1n / NaN throws TypeError"),assert.throws(TypeError,function(){NaN/1n},"NaN / 1n throws TypeError"),assert.throws(TypeError,function(){1n/Infinity},"1n / Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity/1n},"Infinity / 1n throws TypeError"),assert.throws(TypeError,function(){1n/1},"1n / true throws TypeError"),assert.throws(TypeError,function(){!0/1n},"true / 1n throws TypeError"),assert.throws(TypeError,function(){1n/"1"},'1n / "1" throws TypeError'),assert.throws(TypeError,function(){"1"/1n},'"1" / 1n throws TypeError'),assert.throws(TypeError,function(){1n/null},"1n / null throws TypeError"),assert.throws(TypeError,function(){null/1n},"null / 1n throws TypeError"),assert.throws(TypeError,function(){1n/void 0},"1n / undefined throws TypeError"),assert.throws(TypeError,function(){void 0/1n},"undefined / 1n throws TypeError");


assert.throws(TypeError,function(){1n/1},"1n / 1 throws TypeError"),assert.throws(TypeError,function(){1/1n},"1 / 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)/1},"Object(1n) / 1 throws TypeError"),assert.throws(TypeError,function(){1/Object(1n)},"1 / Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n/Object(1)},"1n / Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)/1n},"Object(1) / 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)/Object(1)},"Object(1n) / Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)/Object(1n)},"Object(1) / Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n/NaN},"1n / NaN throws TypeError"),assert.throws(TypeError,function(){NaN/1n},"NaN / 1n throws TypeError"),assert.throws(TypeError,function(){1n/(1/0)},"1n / Infinity throws TypeError"),assert.throws(TypeError,function(){1/0/1n},"Infinity / 1n throws TypeError"),assert.throws(TypeError,function(){1n/!0},"1n / true throws TypeError"),assert.throws(TypeError,function(){!0/1n},"true / 1n throws TypeError"),assert.throws(TypeError,function(){1n/"1"},'1n / "1" throws TypeError'),assert.throws(TypeError,function(){"1"/1n},'"1" / 1n throws TypeError'),assert.throws(TypeError,function(){1n/null},"1n / null throws TypeError"),assert.throws(TypeError,function(){null/1n},"null / 1n throws TypeError"),assert.throws(TypeError,function(){1n/void 0},"1n / undefined throws TypeError"),assert.throws(TypeError,function(){void 0/1n},"undefined / 1n throws TypeError");



test262/test/built-ins/RegExp/regexp-modifiers/nested-add-remove-modifiers.js


var re1=/(?m:^(?-i:a)$)/i;assert(!re1.test("A\n"),"Should not match 'A\\n'");assert(re1.test("a\n"),"Should match 'a\\n'");var re2=new RegExp("(?m:^(?-i:a)$)","i");assert(!re2.test("A\n"),"Should not match 'A\\n'");assert(re2.test("a\n"),"Should match 'a\\n'");


var re1=/(?m:^(?-i:a)$)/i;assert(!re1.test(`A
`),"Should not match 'A\\n'"),assert(re1.test(`a
`),"Should match 'a\\n'");var re2=new RegExp("(?m:^(?-i:a)$)","i");assert(!re2.test(`A
`),"Should not match 'A\\n'"),assert(re2.test(`a
`),"Should match 'a\\n'");



test262/test/built-ins/RegExp/regexp-modifiers/remove-ignoreCase-does-not-affect-multiline-flag.js


var re1=/(?-i:es$)/i;assert(re1.test("es"),"s should match s in modified group");assert(!re1.test("eS"),"s should not match S in modified group");assert(!re1.test("es\nz"),"$ should not match newline in modified group");assert(!re1.test("eS\nz"),"s should not match S in modified group");var re2=/(?-i:es$)/im;assert(re2.test("es"),"s should match s in modified group");assert(!re2.test("eS"),"s should not match S in modified group");assert(re2.test("es\nz"),"$ should match newline in modified group");assert(!re2.test("eS\nz"),"s should not match S in modified group");


var re1=/(?-i:es$)/i;assert(re1.test("es"),"s should match s in modified group"),assert(!re1.test("eS"),"s should not match S in modified group"),assert(!re1.test(`es
z`),"$ should not match newline in modified group"),assert(!re1.test(`eS
z`),"s should not match S in modified group");var re2=/(?-i:es$)/im;assert(re2.test("es"),"s should match s in modified group"),assert(!re2.test("eS"),"s should not match S in modified group"),assert(re2.test(`es
z`),"$ should match newline in modified group"),assert(!re2.test(`eS
z`),"s should not match S in modified group");



test262/test/language/expressions/division/S11.5.2_A1.js


if(eval("1	/	1")!==1)throw new Test262Error("#1: 1\\u0009/\\u00091 === 1");if(eval("1\v/\v1")!==1)throw new Test262Error("#2: 1\\u000B/\\u000B1 === 1");if(eval("1\f/\f1")!==1)throw new Test262Error("#3: 1\\u000C/\\u000C1 === 1");if(eval("1 / 1")!==1)throw new Test262Error("#4: 1\\u0020/\\u00201 === 1");if(eval("1\xA0/\xA01")!==1)throw new Test262Error("#5: 1\\u00A0/\\u00A01 === 1");if(eval("1\n/\n1")!==1)throw new Test262Error("#6: 1\\u000A/\\u000A1 === 1");if(eval("1\r/\r1")!==1)throw new Test262Error("#7: 1\\u000D/\\u000D1 === 1");if(eval("1\u2028/\u20281")!==1)throw new Test262Error("#8: 1\\u2028/\\u20281 === 1");if(eval("1\u2029/\u20291")!==1)throw new Test262Error("#9: 1\\u2029/\\u20291 === 1");if(eval("1	\v\f \xA0\n\r\u2028\u2029/	\v\f \xA0\n\r\u2028\u20291")!==1)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029/\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");


if(eval("1	/	1")!==1)throw new Test262Error("#1: 1\\u0009/\\u00091 === 1");if(eval("1\v/\v1")!==1)throw new Test262Error("#2: 1\\u000B/\\u000B1 === 1");if(eval("1\f/\f1")!==1)throw new Test262Error("#3: 1\\u000C/\\u000C1 === 1");if(eval("1 / 1")!==1)throw new Test262Error("#4: 1\\u0020/\\u00201 === 1");if(eval("1\xA0/\xA01")!==1)throw new Test262Error("#5: 1\\u00A0/\\u00A01 === 1");if(eval(`1
/
1`)!==1)throw new Test262Error("#6: 1\\u000A/\\u000A1 === 1");if(eval("1\r/\r1")!==1)throw new Test262Error("#7: 1\\u000D/\\u000D1 === 1");if(eval("1\u2028/\u20281")!==1)throw new Test262Error("#8: 1\\u2028/\\u20281 === 1");if(eval("1\u2029/\u20291")!==1)throw new Test262Error("#9: 1\\u2029/\\u20291 === 1");if(eval(`1	\v\f \xA0
\r\u2028\u2029/	\v\f \xA0
\r\u2028\u20291`)!==1)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029/\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");



test262/test/built-ins/RegExp/regexp-modifiers/remove-dotAll-does-not-affect-alternatives-outside.js


var re1=/a.a|b.b|(?-s:c.c)|d.d|e.e/s;assert(re1.test("a\na"),"Alternative `a.a` should match newline");assert(re1.test("b\nb"),"Alternative `b.b` should match newline");assert(!re1.test("c\nc"),"Alternative `(?-s:c.c)` should not match newline in modified group");assert(re1.test("d\nd"),"Alternative `d.d` should match newline");assert(re1.test("e\ne"),"Alternative `e.e` should match newline");var re2=/(a.a)|(?:b.b)|(?-s:c.c)|(?:d.d)|(e.e)/s;assert(re2.test("a\na"),"Alternative `(a.a)` should match newline");assert(re2.test("b\nb"),"Alternative `(?:b.b)` should match newline");assert(!re2.test("c\nc"),"Alternative `(?-s:c.c)` should not match newline in modified group");assert(re2.test("d\nd"),"Alternative `(?:d.d)` should match newline");assert(re2.test("e\ne"),"Alternative `(e.e)` should match newline");


var re1=/a.a|b.b|(?-s:c.c)|d.d|e.e/s;assert(re1.test(`a
a`),"Alternative `a.a` should match newline"),assert(re1.test(`b
b`),"Alternative `b.b` should match newline"),assert(!re1.test(`c
c`),"Alternative `(?-s:c.c)` should not match newline in modified group"),assert(re1.test(`d
d`),"Alternative `d.d` should match newline"),assert(re1.test(`e
e`),"Alternative `e.e` should match newline");var re2=/(a.a)|(?:b.b)|(?-s:c.c)|(?:d.d)|(e.e)/s;assert(re2.test(`a
a`),"Alternative `(a.a)` should match newline"),assert(re2.test(`b
b`),"Alternative `(?:b.b)` should match newline"),assert(!re2.test(`c
c`),"Alternative `(?-s:c.c)` should not match newline in modified group"),assert(re2.test(`d
d`),"Alternative `(?:d.d)` should match newline"),assert(re2.test(`e
e`),"Alternative `(e.e)` should match newline");



test262/test/language/expressions/division/S11.5.2_A2.4_T3.js


try{throw x/(x=1),new Test262Error("#1.1: x / (x = 1) throw ReferenceError. Actual: "+x/(x=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x / (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x/(x=1),new Test262Error("#1.1: x / (x = 1) throw ReferenceError. Actual: "+x/(x=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x / (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/String/prototype/substring/S15.5.4.15_A2_T4.js


var __string=new String("this is a string object");if(__string.substring(Infinity,NaN)!=="this is a string object")throw new Test262Error('#1: __string = new String("this is a string object"); __string.substring(Infinity, NaN) === "this is a string object". Actual: '+__string.substring(Infinity,NaN));


var __string=new String("this is a string object");if(__string.substring(1/0,NaN)!=="this is a string object")throw new Test262Error('#1: __string = new String("this is a string object"); __string.substring(Infinity, NaN) === "this is a string object". Actual: '+__string.substring(1/0,NaN));



test262/test/built-ins/TypedArray/prototype/filter/result-full-callbackfn-returns-true.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42]);[!0,1,"test262",Symbol("1"),{},[],-1,Infinity,-1/0,.1,-.1].forEach(function(val){var result=sample.filter(function(){return val});assert(compareArray(result,sample),val)})});


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42]);[!0,1,"test262",Symbol("1"),{},[],-1,1/0,-1/0,.1,-.1].forEach(function(val){var result=sample.filter(function(){return val});assert(compareArray(result,sample),val)})});



test262/test/annexB/language/expressions/does-not-equals/emulates-undefined.js


var IsHTMLDDA=$262.IsHTMLDDA;assert.sameValue(IsHTMLDDA!=void 0,!1,"!= with `undefined`");assert.sameValue(void 0!=IsHTMLDDA,!1,"!= with `undefined`");assert.sameValue(IsHTMLDDA!=null,!1,"!= with `null`");assert.sameValue(null!=IsHTMLDDA,!1,"!= with `null`");assert.sameValue(IsHTMLDDA!=IsHTMLDDA,!1);


var IsHTMLDDA=$262.IsHTMLDDA;assert.sameValue(IsHTMLDDA!=null,!1,"!= with `undefined`"),assert.sameValue(IsHTMLDDA!=null,!1,"!= with `undefined`"),assert.sameValue(IsHTMLDDA!=null,!1,"!= with `null`"),assert.sameValue(IsHTMLDDA!=null,!1,"!= with `null`"),assert.sameValue(IsHTMLDDA!=IsHTMLDDA,!1);



test262/test/built-ins/Array/prototype/forEach/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.forEach.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array)});assert.compareArray(elements,expectedElements,"elements (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.forEach.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array)});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.forEach.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element),indices.push(index),arrays.push(array)}),assert.compareArray(elements,expectedElements,"elements (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.forEach.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}elements.push(element),indices.push(index),arrays.push(array)}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/built-ins/String/prototype/substring/S15.5.4.15_A3_T8.js


var __instance=new Number(NaN);__instance.substring=String.prototype.substring;if(__instance.substring(Infinity,NaN)!=="NaN")throw new Test262Error('#1: __instance = new Number(NaN); __instance.substring = String.prototype.substring;  __instance.substring(Infinity, NaN) === "NaN". Actual: '+__instance.substring(Infinity,NaN));


var __instance=new Number(NaN);if(__instance.substring=String.prototype.substring,__instance.substring(1/0,NaN)!=="NaN")throw new Test262Error('#1: __instance = new Number(NaN); __instance.substring = String.prototype.substring;  __instance.substring(Infinity, NaN) === "NaN". Actual: '+__instance.substring(1/0,NaN));



test262/test/language/expressions/conditional/S11.12_A2.1_T4.js


try{throw z,new Test262Error("#1.1: false ? true : z throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: false ? true : z throw ReferenceError. Actual: "+e)}


try{throw z,new Test262Error("#1.1: false ? true : z throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: false ? true : z throw ReferenceError. Actual: "+e)}



test262/test/annexB/language/expressions/equals/emulates-undefined.js


var IsHTMLDDA=$262.IsHTMLDDA;assert(IsHTMLDDA==void 0,"== with `undefined`");assert(void 0==IsHTMLDDA,"== with `undefined`");assert(IsHTMLDDA==null,"== with `null`");assert(null==IsHTMLDDA,"== with `null`");assert(IsHTMLDDA==IsHTMLDDA);


var IsHTMLDDA=$262.IsHTMLDDA;assert(IsHTMLDDA==null,"== with `undefined`"),assert(IsHTMLDDA==null,"== with `undefined`"),assert(IsHTMLDDA==null,"== with `null`"),assert(IsHTMLDDA==null,"== with `null`"),assert(IsHTMLDDA==IsHTMLDDA);



test262/test/language/expressions/conditional/S11.12_A1.js


if(eval("false	?	true	:	true")!==!0)throw new Test262Error("#1: (false\\u0009?\\u0009true\\u0009:\\u0009true) === true");if(eval("false\v?\vtrue\v:\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B?\\u000Btrue\\u000B:\\u000Btrue) === true");if(eval("false\f?\ftrue\f:\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C?\\u000Ctrue\\u000C:\\u000Ctrue) === true");if(eval("false ? true : true")!==!0)throw new Test262Error("#4: (false\\u0020?\\u0020true\\u0020:\\u0020true) === true");if(eval("false\xA0?\xA0true\xA0:\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0?\\u00A0true\\u00A0:\\u00A0true) === true");if(eval("false\n?\ntrue\n:\ntrue")!==!0)throw new Test262Error("#6: (false\\u000A?\\u000Atrue\\u000A:\\u000Atrue) === true");if(eval("false\r?\rtrue\r:\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D?\\u000Dtrue\\u000D:\\u000Dtrue) === true");if(eval("false\u2028?\u2028true\u2028:\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028?\\u2028true\\u2028:\\u2028true) === true");if(eval("false\u2029?\u2029true\u2029:\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029?\\u2029true\\u2029:\\u2029true) === true");if(eval("false	\v\f \xA0\n\r\u2028\u2029?	\v\f \xA0\n\r\u2028\u2029true	\v\f \xA0\n\r\u2028\u2029:	\v\f \xA0\n\r\u2028\u2029true")!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029?\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029:\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");


if(eval("false	?	true	:	true")!==!0)throw new Test262Error("#1: (false\\u0009?\\u0009true\\u0009:\\u0009true) === true");if(eval("false\v?\vtrue\v:\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B?\\u000Btrue\\u000B:\\u000Btrue) === true");if(eval("false\f?\ftrue\f:\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C?\\u000Ctrue\\u000C:\\u000Ctrue) === true");if(eval("false ? true : true")!==!0)throw new Test262Error("#4: (false\\u0020?\\u0020true\\u0020:\\u0020true) === true");if(eval("false\xA0?\xA0true\xA0:\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0?\\u00A0true\\u00A0:\\u00A0true) === true");if(eval(`false
?
true
:
true`)!==!0)throw new Test262Error("#6: (false\\u000A?\\u000Atrue\\u000A:\\u000Atrue) === true");if(eval("false\r?\rtrue\r:\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D?\\u000Dtrue\\u000D:\\u000Dtrue) === true");if(eval("false\u2028?\u2028true\u2028:\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028?\\u2028true\\u2028:\\u2028true) === true");if(eval("false\u2029?\u2029true\u2029:\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029?\\u2029true\\u2029:\\u2029true) === true");if(eval(`false	\v\f \xA0
\r\u2028\u2029?	\v\f \xA0
\r\u2028\u2029true	\v\f \xA0
\r\u2028\u2029:	\v\f \xA0
\r\u2028\u2029true`)!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029?\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029:\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");



test262/test/built-ins/RegExp/regexp-modifiers/add-ignoreCase-does-not-affect-dotAll-flag.js


var re1=/(?i:.es)/;assert(re1.test("aes"),". should match a in modified group");assert(re1.test("aeS"),". should match a in modified group");assert(!re1.test("\nes"),". should not match newline in modified group");assert(!re1.test("\neS"),". should not match newline in modified group");var re2=/(?i:.es)/s;assert(re2.test("aes"),". should match a in modified group");assert(re2.test("aeS"),". should match a in modified group");assert(re2.test("\nes"),". should match newline in modified group");assert(re2.test("\neS"),". should match newline in modified group");var re3=/(?i-:.es)/;assert(re3.test("aes"),". should match a in modified group");assert(re3.test("aeS"),". should match a in modified group");assert(!re3.test("\nes"),". should not match newline in modified group");assert(!re3.test("\neS"),". should not match newline in modified group");var re4=/(?i-:.es)/s;assert(re4.test("aes"),". should match a in modified group");assert(re4.test("aeS"),". should match a in modified group");assert(re4.test("\nes"),". should match newline in modified group");assert(re4.test("\neS"),". should match newline in modified group");


var re1=/(?i:.es)/;assert(re1.test("aes"),". should match a in modified group"),assert(re1.test("aeS"),". should match a in modified group"),assert(!re1.test(`
es`),". should not match newline in modified group"),assert(!re1.test(`
eS`),". should not match newline in modified group");var re2=/(?i:.es)/s;assert(re2.test("aes"),". should match a in modified group"),assert(re2.test("aeS"),". should match a in modified group"),assert(re2.test(`
es`),". should match newline in modified group"),assert(re2.test(`
eS`),". should match newline in modified group");var re3=/(?i-:.es)/;assert(re3.test("aes"),". should match a in modified group"),assert(re3.test("aeS"),". should match a in modified group"),assert(!re3.test(`
es`),". should not match newline in modified group"),assert(!re3.test(`
eS`),". should not match newline in modified group");var re4=/(?i-:.es)/s;assert(re4.test("aes"),". should match a in modified group"),assert(re4.test("aeS"),". should match a in modified group"),assert(re4.test(`
es`),". should match newline in modified group"),assert(re4.test(`
eS`),". should match newline in modified group");



test262/test/built-ins/String/prototype/substring/S15.5.4.15_A2_T2.js


var __string=new String("this is a string object");if(__string.substring(NaN,Infinity)!=="this is a string object")throw new Test262Error(`#1: __string = new String('this is a string object'); __string.substring(NaN, Infinity) === "this is a string object". Actual: `+__string.substring(NaN,Infinity));


var __string=new String("this is a string object");if(__string.substring(NaN,1/0)!=="this is a string object")throw new Test262Error(`#1: __string = new String('this is a string object'); __string.substring(NaN, Infinity) === "this is a string object". Actual: `+__string.substring(NaN,1/0));



test262/test/built-ins/RegExp/S15.10.2.7_A3_T1.js


var __executed=/\s+java\s+/.exec("language  java\n"),__expected=["  java\n"];__expected.index=8;__expected.input="language  java\n";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\s+java\s+/.exec(`language  java
`),__expected=[`  java
`];__expected.index=8,__expected.input=`language  java
`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/expressions/conditional/S11.12_A2.1_T3.js


try{throw y,new Test262Error("#1.1: true ? y : false throw ReferenceError. Actual: "+y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: true ? y : false throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: true ? y : false throw ReferenceError. Actual: "+y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: true ? y : false throw ReferenceError. Actual: "+e)}



test262/test/built-ins/RegExp/S15.10.2.6_A3_T1.js


var __executed=/\bp/.exec("pilot\nsoviet robot	openoffice"),__expected=["p"];__expected.index=0;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\bp/.exec(`pilot
soviet robot	openoffice`),__expected=["p"];__expected.index=0,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T10.js


var __executed=/\brobot\b/.exec("pilot\nsoviet robot	openoffice"),__expected=["robot"];__expected.index=13;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\brobot\b/.exec(`pilot
soviet robot	openoffice`),__expected=["robot"];__expected.index=13,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/expressions/instanceof/S11.8.6_A1.js


if(eval("({})	instanceof	Object")!==!0)throw new Test262Error("#1: ({})\\u0009instanceof\\u0009Object === true");if(eval("({})\vinstanceof\vObject")!==!0)throw new Test262Error("#2: ({})\\u000Binstanceof\\u000BObject === true");if(eval("({})\finstanceof\fObject")!==!0)throw new Test262Error("#3: ({})\\u000Cinstanceof\\u000CObject === true");if(eval("({}) instanceof Object")!==!0)throw new Test262Error("#4: ({})\\u0020instanceof\\u0020Object === true");if(eval("({})\xA0instanceof\xA0Object")!==!0)throw new Test262Error("#5: ({})\\u00A0instanceof\\u00A0Object === true");if(eval("({})\ninstanceof\nObject")!==!0)throw new Test262Error("#6: ({})\\u000Ainstanceof\\u000AObject === true");if(eval("({})\rinstanceof\rObject")!==!0)throw new Test262Error("#7: ({})\\u000Dinstanceof\\u000DObject === true");if(eval("({})\u2028instanceof\u2028Object")!==!0)throw new Test262Error("#8: ({})\\u2028instanceof\\u2028Object === true");if(eval("({})\u2029instanceof\u2029Object")!==!0)throw new Test262Error("#9: ({})\\u2029instanceof\\u2029Object === true");if(eval("({})	\v\f \xA0\n\r\u2028\u2029instanceof	\v\f \xA0\n\r\u2028\u2029Object")!==!0)throw new Test262Error("#10: ({})\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029instanceof\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Object === true");


if(eval("({})	instanceof	Object")!==!0)throw new Test262Error("#1: ({})\\u0009instanceof\\u0009Object === true");if(eval("({})\vinstanceof\vObject")!==!0)throw new Test262Error("#2: ({})\\u000Binstanceof\\u000BObject === true");if(eval("({})\finstanceof\fObject")!==!0)throw new Test262Error("#3: ({})\\u000Cinstanceof\\u000CObject === true");if(eval("({}) instanceof Object")!==!0)throw new Test262Error("#4: ({})\\u0020instanceof\\u0020Object === true");if(eval("({})\xA0instanceof\xA0Object")!==!0)throw new Test262Error("#5: ({})\\u00A0instanceof\\u00A0Object === true");if(eval(`({})
instanceof
Object`)!==!0)throw new Test262Error("#6: ({})\\u000Ainstanceof\\u000AObject === true");if(eval("({})\rinstanceof\rObject")!==!0)throw new Test262Error("#7: ({})\\u000Dinstanceof\\u000DObject === true");if(eval("({})\u2028instanceof\u2028Object")!==!0)throw new Test262Error("#8: ({})\\u2028instanceof\\u2028Object === true");if(eval("({})\u2029instanceof\u2029Object")!==!0)throw new Test262Error("#9: ({})\\u2029instanceof\\u2029Object === true");if(eval(`({})	\v\f \xA0
\r\u2028\u2029instanceof	\v\f \xA0
\r\u2028\u2029Object`)!==!0)throw new Test262Error("#10: ({})\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029instanceof\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Object === true");



test262/test/language/expressions/instanceof/S11.8.6_A2.4_T3.js


try{throw object instanceof(object={},Object),new Test262Error("#1.1: object instanceof (object = {}, Object) throw ReferenceError. Actual: "+(object instanceof(object={},Object)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: object instanceof (object = {}, Object) throw ReferenceError. Actual: "+e)}


try{throw object instanceof(object={},Object),new Test262Error("#1.1: object instanceof (object = {}, Object) throw ReferenceError. Actual: "+(object instanceof(object={},Object)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: object instanceof (object = {}, Object) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Temporal/PlainDateTime/prototype/until/roundingincrement-non-integer.js


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5),result=earlier.until(later,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,0,0,0,0,0,0,4,"roundingIncrement 2.5 truncates to 2");const result2=earlier.until(later,{smallestUnit:"days",roundingIncrement:1000000000.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5),result=earlier.until(later,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,0,0,0,0,0,0,4,"roundingIncrement 2.5 truncates to 2");const result2=earlier.until(later,{smallestUnit:"days",roundingIncrement:1e9+.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");



test262/test/language/expressions/instanceof/S11.8.6_A6_T1.js


try{throw{}instanceof this,new Test262Error("#1: Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator")}


try{throw{}instanceof this,new Test262Error("#1: Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator")}



test262/test/built-ins/TypedArrayConstructors/internals/Delete/detached-buffer.js


testWithTypedArrayConstructors(function(TA){var sample=new TA(1);$DETACHBUFFER(sample.buffer);assert.sameValue(delete sample[0],!0,"The value of `delete sample[0]` is true");assert.sameValue(delete sample["1.1"],!0,'The value of `delete sample["1.1"]` is true');assert.sameValue(delete sample["-0"],!0,'The value of `delete sample["-0"]` is true');assert.sameValue(delete sample["-1"],!0,'The value of `delete sample["-1"]` is true');assert.sameValue(delete sample["1"],!0,'The value of `delete sample["1"]` is true');assert.sameValue(delete sample["2"],!0,'The value of `delete sample["2"]` is true')});


testWithTypedArrayConstructors(function(TA){var sample=new TA(1);$DETACHBUFFER(sample.buffer),assert.sameValue(delete sample[0],!0,"The value of `delete sample[0]` is true"),assert.sameValue(delete sample["1.1"],!0,'The value of `delete sample["1.1"]` is true'),assert.sameValue(delete sample["-0"],!0,'The value of `delete sample["-0"]` is true'),assert.sameValue(delete sample[-1],!0,'The value of `delete sample["-1"]` is true'),assert.sameValue(delete sample[1],!0,'The value of `delete sample["1"]` is true'),assert.sameValue(delete sample[2],!0,'The value of `delete sample["2"]` is true')});



test262/test/language/expressions/instanceof/S15.3.5.3_A1_T8.js


var FACTORY;FACTORY=Function("name","this.name=name;");if(x instanceof FACTORY!==!1)throw new Test262Error("#1: Assume F is a Function object. When the [[HasInstance]] method of F is called with value V, the following steps are taken: i) If V is not an object, return false");var x;


var FACTORY;if(FACTORY=Function("name","this.name=name;"),x instanceof FACTORY)throw new Test262Error("#1: Assume F is a Function object. When the [[HasInstance]] method of F is called with value V, the following steps are taken: i) If V is not an object, return false");var x;



test262/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/detached-buffer.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(1);$DETACHBUFFER(sample.buffer);assert.sameValue(delete sample[0],!0,"The value of `delete sample[0]` is true");assert.sameValue(delete sample["1.1"],!0,'The value of `delete sample["1.1"]` is true');assert.sameValue(delete sample["-0"],!0,'The value of `delete sample["-0"]` is true');assert.sameValue(delete sample["-1"],!0,'The value of `delete sample["-1"]` is true');assert.sameValue(delete sample["1"],!0,'The value of `delete sample["1"]` is true');assert.sameValue(delete sample["2"],!0,'The value of `delete sample["2"]` is true')});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(1);$DETACHBUFFER(sample.buffer),assert.sameValue(delete sample[0],!0,"The value of `delete sample[0]` is true"),assert.sameValue(delete sample["1.1"],!0,'The value of `delete sample["1.1"]` is true'),assert.sameValue(delete sample["-0"],!0,'The value of `delete sample["-0"]` is true'),assert.sameValue(delete sample[-1],!0,'The value of `delete sample["-1"]` is true'),assert.sameValue(delete sample[1],!0,'The value of `delete sample["1"]` is true'),assert.sameValue(delete sample[2],!0,'The value of `delete sample["2"]` is true')});



test262/test/built-ins/RegExp/S15.10.2.6_A1_T5.js


var __executed=/es$/gm.exec("pairs\nmakes	doubles"),__expected=["es"];__expected.index=17;__expected.input="pairs\nmakes	doubles";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/es$/mg.exec(`pairs
makes	doubles`),__expected=["es"];__expected.index=17,__expected.input=`pairs
makes	doubles`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/expressions/instanceof/S11.8.6_A2.1_T3.js


try{throw{}instanceof OBJECT,new Test262Error("#1.1: ({}) instanceof OBJECT throw ReferenceError. Actual: "+({}instanceof OBJECT))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: ({}) instanceof OBJECT throw ReferenceError. Actual: "+e)}


try{throw{}instanceof OBJECT,new Test262Error("#1.1: ({}) instanceof OBJECT throw ReferenceError. Actual: "+({}instanceof OBJECT))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: ({}) instanceof OBJECT throw ReferenceError. Actual: "+e)}



test262/test/language/statements/do-while/S12.6.1_A5.js


var __evaluated,__in__do__before__break,__in__do__after__break;__evaluated=eval("do {__in__do__before__break=1; break; __in__do__after__break=2;} while(0)");if(__in__do__before__break!==1)throw new Test262Error("#1: __in__do__before__break === 1. Actual:  __in__do__before__break ==="+__in__do__before__break);if(typeof __in__do__after__break!="undefined")throw new Test262Error('#2: typeof __in__do__after__break === "undefined". Actual:  typeof __in__do__after__break ==='+typeof __in__do__after__break);if(__evaluated!==1)throw new Test262Error("#3: __evaluated === 1. Actual:  __evaluated ==="+__evaluated);


var __evaluated,__in__do__before__break,__in__do__after__break;if(__evaluated=eval("do {__in__do__before__break=1; break; __in__do__after__break=2;} while(0)"),__in__do__before__break!==1)throw new Test262Error("#1: __in__do__before__break === 1. Actual:  __in__do__before__break ==="+__in__do__before__break);if(typeof __in__do__after__break<"u")throw new Test262Error('#2: typeof __in__do__after__break === "undefined". Actual:  typeof __in__do__after__break ==='+typeof __in__do__after__break);if(__evaluated!==1)throw new Test262Error("#3: __evaluated === 1. Actual:  __evaluated ==="+__evaluated);



test262/test/annexB/built-ins/unescape/prop-desc.js


assert.sameValue(typeof this.unescape,"function"),assert.sameValue(typeof this["unescape"],"function"),verifyProperty(this,"unescape",{writable:!0,enumerable:!1,configurable:!0});


assert.sameValue(typeof this.unescape,"function"),assert.sameValue(typeof this.unescape,"function"),verifyProperty(this,"unescape",{writable:!0,enumerable:!1,configurable:!0});



test262/test/built-ins/TypedArray/prototype/set/BigInt/number-tobigint.js


testWithBigIntTypedArrayConstructors(function(TA){var typedArray=new TA(1);assert.throws(TypeError,function(){typedArray.set([1])},"abrupt completion from Number: 1");assert.throws(TypeError,function(){typedArray.set([Math.pow(2,63)])},"abrupt completion from Number: 2**63");assert.throws(TypeError,function(){typedArray.set([0])},"abrupt completion from Number: +0");assert.throws(TypeError,function(){typedArray.set([-0])},"abrupt completion from Number: -0");assert.throws(TypeError,function(){typedArray.set([Infinity])},"abrupt completion from Number: Infinity");assert.throws(TypeError,function(){typedArray.set([-1/0])},"abrupt completion from Number: -Infinity");assert.throws(TypeError,function(){typedArray.set([NaN])},"abrupt completion from Number: NaN")});


testWithBigIntTypedArrayConstructors(function(TA){var typedArray=new TA(1);assert.throws(TypeError,function(){typedArray.set([1])},"abrupt completion from Number: 1"),assert.throws(TypeError,function(){typedArray.set([Math.pow(2,63)])},"abrupt completion from Number: 2**63"),assert.throws(TypeError,function(){typedArray.set([0])},"abrupt completion from Number: +0"),assert.throws(TypeError,function(){typedArray.set([-0])},"abrupt completion from Number: -0"),assert.throws(TypeError,function(){typedArray.set([1/0])},"abrupt completion from Number: Infinity"),assert.throws(TypeError,function(){typedArray.set([-1/0])},"abrupt completion from Number: -Infinity"),assert.throws(TypeError,function(){typedArray.set([NaN])},"abrupt completion from Number: NaN")});



test262/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-target-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.set,"function","implements TypedArray.prototype.set"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*4}),target=new TA(ab,0,4),source=new TA(new ArrayBuffer(BPE*4)),expectedError;try{ab.resize(BPE*3),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw target.set(source,0),new Test262Error("The `set` operation completed successfully.")})});


assert.sameValue(typeof TypedArray.prototype.set,"function","implements TypedArray.prototype.set"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*4}),target=new TA(ab,0,4),source=new TA(new ArrayBuffer(BPE*4)),expectedError;try{ab.resize(BPE*3),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw target.set(source,0),new Test262Error("The `set` operation completed successfully.")})});



test262/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-same-buffer-same-type-resized.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),source=new TA(ab),target=new TA(ab),expected=[10,20,30,40];source[0]=10n;source[1]=20n;source[2]=30n;source[3]=40n;try{ab.resize(BPE*5),expected=[10n,20n,30n,40n,0n]}catch(_){}target.set(source);assert(compareArray(target,expected),"following grow");try{ab.resize(BPE*3),expected=[10n,20n,30n]}catch(_){}target.set(source);assert(compareArray(target,expected),"following shrink")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),source=new TA(ab),target=new TA(ab),expected=[10,20,30,40];source[0]=10n,source[1]=20n,source[2]=30n,source[3]=40n;try{ab.resize(BPE*5),expected=[10n,20n,30n,40n,0n]}catch{}target.set(source),assert(compareArray(target,expected),"following grow");try{ab.resize(BPE*3),expected=[10n,20n,30n]}catch{}target.set(source),assert(compareArray(target,expected),"following shrink")});



test262/test/language/expressions/instanceof/S11.8.6_A2.1_T2.js


try{throw object instanceof Object,new Test262Error("#1.1: object instanceof Object throw ReferenceError. Actual: "+(object instanceof Object))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: object instanceof Object throw ReferenceError. Actual: "+e)}


try{throw object instanceof Object,new Test262Error("#1.1: object instanceof Object throw ReferenceError. Actual: "+(object instanceof Object))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: object instanceof Object throw ReferenceError. Actual: "+e)}



test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-priority.js


var toPrimitiveAccessed=0,toStringAccessed=0,valueOfAccessed=0,thisVal={get[Symbol.toPrimitive](){toPrimitiveAccessed+=1;return},get toString(){return toStringAccessed+=1,function(){return"42 "}},get valueOf(){return valueOfAccessed+=1,function(){return""}}},result=String.prototype.trimEnd.call(thisVal);assert.sameValue(toPrimitiveAccessed,1,"thisVal.toString expected to have been accessed.");assert.sameValue(result,"42","thisVal.toString expected to have been called.");assert.sameValue(toPrimitiveAccessed,1,"thisVal[Symbol.toPrimitive should have been accessed.");assert.sameValue(valueOfAccessed,0,"thisVal.valueOf should not have been accessed.");


var toPrimitiveAccessed=0,toStringAccessed=0,valueOfAccessed=0,thisVal={get[Symbol.toPrimitive](){toPrimitiveAccessed+=1},get toString(){return toStringAccessed+=1,function(){return"42 "}},get valueOf(){return valueOfAccessed+=1,function(){return""}}},result=String.prototype.trimEnd.call(thisVal);assert.sameValue(toPrimitiveAccessed,1,"thisVal.toString expected to have been accessed."),assert.sameValue(result,"42","thisVal.toString expected to have been called."),assert.sameValue(toPrimitiveAccessed,1,"thisVal[Symbol.toPrimitive should have been accessed."),assert.sameValue(valueOfAccessed,0,"thisVal.valueOf should not have been accessed.");



test262/test/built-ins/Array/property-cast-nan-infinity.js


var x=[];x[NaN]=1;assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined");assert.sameValue(x["NaN"],1,'The value of x["NaN"] is expected to be 1');var y=[];y[Number.POSITIVE_INFINITY]=1;assert.sameValue(y[0],void 0,"The value of y[0] is expected to equal undefined");assert.sameValue(y["Infinity"],1,'The value of y["Infinity"] is expected to be 1');var z=[];z[Number.NEGATIVE_INFINITY]=1;assert.sameValue(z[0],void 0,"The value of z[0] is expected to equal undefined");assert.sameValue(z["-Infinity"],1,'The value of z["-Infinity"] is expected to be 1');


var x=[];x[NaN]=1,assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined"),assert.sameValue(x.NaN,1,'The value of x["NaN"] is expected to be 1');var y=[];y[Number.POSITIVE_INFINITY]=1,assert.sameValue(y[0],void 0,"The value of y[0] is expected to equal undefined"),assert.sameValue(y.Infinity,1,'The value of y["Infinity"] is expected to be 1');var z=[];z[Number.NEGATIVE_INFINITY]=1,assert.sameValue(z[0],void 0,"The value of z[0] is expected to equal undefined"),assert.sameValue(z["-Infinity"],1,'The value of z["-Infinity"] is expected to be 1');



test262/test/built-ins/Temporal/PlainDateTime/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,0),later=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/built-ins/RegExp/S15.10.2.13_A2_T2.js


var __executed=/a[^]/.exec("   a	\n"),__expected=["a	"];__expected.index=3;__expected.input="   a	\n";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/a[^]/.exec(`   a	
`),__expected=["a	"];__expected.index=3,__expected.input=`   a	
`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/String/prototype/trimEnd/this-value-number.js


var trimEnd=String.prototype.trimEnd;assert.sameValue(trimEnd.call(NaN),"NaN","String.prototype.trimEnd.call(NaN)");assert.sameValue(trimEnd.call(Infinity),"Infinity","String.prototype.trimEnd.call(Infinity)");assert.sameValue(trimEnd.call(-0),"0","String.prototype.trimEnd.call(-0)");assert.sameValue(trimEnd.call(1),"1","String.prototype.trimEnd.call(1)");assert.sameValue(trimEnd.call(-1),"-1","String.prototype.trimEnd.call(-1)");


var trimEnd=String.prototype.trimEnd;assert.sameValue(trimEnd.call(NaN),"NaN","String.prototype.trimEnd.call(NaN)"),assert.sameValue(trimEnd.call(1/0),"Infinity","String.prototype.trimEnd.call(Infinity)"),assert.sameValue(trimEnd.call(-0),"0","String.prototype.trimEnd.call(-0)"),assert.sameValue(trimEnd.call(1),"1","String.prototype.trimEnd.call(1)"),assert.sameValue(trimEnd.call(-1),"-1","String.prototype.trimEnd.call(-1)");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T14.js


var __executed=/e\b/.exec("pilot\nsoviet robot	openoffice"),__expected=["e"];__expected.index=28;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/e\b/.exec(`pilot
soviet robot	openoffice`),__expected=["e"];__expected.index=28,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/statements/for/S12.6.3_A11.1_T1.js


var __str;__str="";for(var index=0;index<10;index+=1){if(index<5)continue;__str+=index}if(__str!=="56789")throw new Test262Error('#1: __str === "56789". Actual:  __str ==='+__str);


var __str;__str="";for(var index=0;index<10;index+=1)index<5||(__str+=index);if(__str!=="56789")throw new Test262Error('#1: __str === "56789". Actual:  __str ==='+__str);



test262/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-src-range-greather-than-target-throws-rangeerror.js


testWithBigIntTypedArrayConstructors(function(TA){var sample,src;sample=new TA(2);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,1)},"2 + 1 > 2");sample=new TA(1);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,0)},"2 + 0 > 1");sample=new TA(1);src=new TA(0);assert.throws(RangeError,function(){sample.set(src,2)},"0 + 2 > 1");sample=new TA(2);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,Infinity)},"2 + Infinity > 2")});


testWithBigIntTypedArrayConstructors(function(TA){var sample,src;sample=new TA(2),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,1)},"2 + 1 > 2"),sample=new TA(1),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,0)},"2 + 0 > 1"),sample=new TA(1),src=new TA(0),assert.throws(RangeError,function(){sample.set(src,2)},"0 + 2 > 1"),sample=new TA(2),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,1/0)},"2 + Infinity > 2")});



test262/test/language/expressions/instanceof/S11.8.6_A2.4_T4.js


if((OBJECT=Object,{})instanceof OBJECT!==!0)throw new Test262Error("#1: (OBJECT = Object, {}) instanceof OBJECT !== true");


if(OBJECT=Object,!({}instanceof OBJECT))throw new Test262Error("#1: (OBJECT = Object, {}) instanceof OBJECT !== true");



test262/test/language/statements/for/S12.6.3_A12_T1.js


var __str,index;__str="";for(index=0;index<10;index+=1){if(index>5)break;__str+=index}if(__str!=="012345")throw new Test262Error('#1:__str === "012345". Actual: __str ==='+__str);


var __str,index;for(__str="",index=0;index<10&&!(index>5);index+=1)__str+=index;if(__str!=="012345")throw new Test262Error('#1:__str === "012345". Actual: __str ==='+__str);



test262/test/built-ins/Temporal/PlainDateTime/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/language/statements/for/S12.6.3_A13.js


try{index=index}catch(e){throw new Test262Error('#1: VariableDeclaration in "var VariableDeclarationListNoIn" of for IterationStatement is allowed')}for(var index=0;index<6;index++);


try{index=index}catch{throw new Test262Error('#1: VariableDeclaration in "var VariableDeclarationListNoIn" of for IterationStatement is allowed')}for(var index=0;index<6;index++);



test262/test/language/expressions/instanceof/S11.8.6_A2.4_T1.js


var OBJECT=0;if((OBJECT=Object,{})instanceof OBJECT!==!0)throw new Test262Error("#1: var OBJECT = 0; (OBJECT = Object, {}) instanceof OBJECT === true");var object={};if(object instanceof(object=0,Object)!==!0)throw new Test262Error("#2: var object = {};  object instanceof (object = 0, Object) === true");


var OBJECT=0;if(OBJECT=Object,!({}instanceof OBJECT))throw new Test262Error("#1: var OBJECT = 0; (OBJECT = Object, {}) instanceof OBJECT === true");var object={};if(!(object instanceof(object=0,Object)))throw new Test262Error("#2: var object = {};  object instanceof (object = 0, Object) === true");



test262/test/built-ins/TypedArrayConstructors/internals/Delete/detached-buffer-key-is-not-numeric-index.js


testWithTypedArrayConstructors(function(TA){let sample=new TA(1),key="key";sample.string=key;$DETACHBUFFER(sample.buffer);assert.sameValue(delete sample.string,!0,"The value of `delete sample.string` is true");assert.sameValue(delete sample.undef,!0,"The value of `delete sample.undef` is true");assert.sameValue(delete sample[key],!0,"The value of `delete sample.string` is true");assert.sameValue(delete sample["undef"],!0,"The value of `delete sample.undef` is true")});


testWithTypedArrayConstructors(function(TA){let sample=new TA(1),key="key";sample.string=key,$DETACHBUFFER(sample.buffer),assert.sameValue(delete sample.string,!0,"The value of `delete sample.string` is true"),assert.sameValue(delete sample.undef,!0,"The value of `delete sample.undef` is true"),assert.sameValue(delete sample[key],!0,"The value of `delete sample.string` is true"),assert.sameValue(delete sample.undef,!0,"The value of `delete sample.undef` is true")});



test262/test/built-ins/Map/map-no-iterable-does-not-call-set.js


var set=Map.prototype.set,counter=0;Map.prototype.set=function(value){counter++,set.call(this,value)};new Map;assert.sameValue(counter,0,"`Map.prototype.set` was not called.");


var set=Map.prototype.set,counter=0;Map.prototype.set=function(value){counter++,set.call(this,value)},assert.sameValue(counter,0,"`Map.prototype.set` was not called.");



test262/test/language/statements/for/S12.6.3_A12.1_T1.js


var __str;__str="";for(var index=0;index<10;index+=1){if(index>5)break;__str+=index}if(__str!=="012345")throw new Test262Error('#1: __str === "012345". Actual:  __str ==='+__str);


var __str;__str="";for(var index=0;index<10&&!(index>5);index+=1)__str+=index;if(__str!=="012345")throw new Test262Error('#1: __str === "012345". Actual:  __str ==='+__str);



test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-conversions.js


testTypedArrayConversions(byteConversionValues,function(TA,value,expected,initial){if(TA===Float64Array)return;var src=new Float64Array([value]),target=new TA([initial]);target.set(src);assert.sameValue(target[0],expected)});


testTypedArrayConversions(byteConversionValues,function(TA,value,expected,initial){if(TA!==Float64Array){var src=new Float64Array([value]),target=new TA([initial]);target.set(src),assert.sameValue(target[0],expected)}});



test262/test/language/expressions/delete/S8.12.7_A3.js


var BLUE_NUM=1,BLUE_STR="1",YELLOW_NUM=2,YELLOW_STR="2",__color__map={red:16711680,BLUE_NUM:255,green:65280,YELLOW_STR:16776960};if(delete __color__map[YELLOW_NUM]!==!0)throw new Test262Error('#1: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[YELLOW_NUM] === true;');if(__color__map[YELLOW_STR]!==void 0)throw new Test262Error('#2: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[YELLOW_NUM]; __color__map[YELLOW_STR] === undefined. Actual: '+__color__map[YELLOW_STR]);if(delete __color__map[BLUE_STR]!==!0)throw new Test262Error('#3: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[BLUE_STR] === true. Actual: '+delete __color__map[BLUE_STR]);if(__color__map[BLUE_NUM]!==void 0)throw new Test262Error('#4: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[BLUE_STR]; __color__map[BLUE_NUM] === undefined. Actual: '+__color__map[BLUE_NUM]);


var BLUE_NUM=1,BLUE_STR="1",YELLOW_NUM=2,YELLOW_STR="2",__color__map={red:16711680,BLUE_NUM:255,green:65280,YELLOW_STR:16776960};if(!delete __color__map[YELLOW_NUM])throw new Test262Error('#1: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[YELLOW_NUM] === true;');if(__color__map[YELLOW_STR]!==void 0)throw new Test262Error('#2: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[YELLOW_NUM]; __color__map[YELLOW_STR] === undefined. Actual: '+__color__map[YELLOW_STR]);if(!delete __color__map[BLUE_STR])throw new Test262Error('#3: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[BLUE_STR] === true. Actual: '+delete __color__map[BLUE_STR]);if(__color__map[BLUE_NUM]!==void 0)throw new Test262Error('#4: var BLUE_NUM=1; var BLUE_STR="1"; var YELLOW_NUM=2; var YELLOW_STR="2"; var __color__map = {red:0xFF0000, BLUE_NUM:0x0000FF, green:0x00FF00, YELLOW_STR:0xFFFF00}; delete __color__map[BLUE_STR]; __color__map[BLUE_NUM] === undefined. Actual: '+__color__map[BLUE_NUM]);



test262/test/built-ins/Array/S15.4_A1.1_T6.js


var x=[];x[new Boolean(!0)]=1;assert.sameValue(x[1],void 0,"The value of x[1] is expected to equal undefined");assert.sameValue(x["true"],1,'The value of x["true"] is expected to be 1');x[new Boolean(!1)]=0;assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined");assert.sameValue(x["false"],0,'The value of x["false"] is expected to be 0');


var x=[];x[new Boolean(!0)]=1,assert.sameValue(x[1],void 0,"The value of x[1] is expected to equal undefined"),assert.sameValue(x.true,1,'The value of x["true"] is expected to be 1'),x[new Boolean(!1)]=0,assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined"),assert.sameValue(x.false,0,'The value of x["false"] is expected to be 0');



test262/test/built-ins/RegExp/S15.10.2.7_A3_T4.js


var __executed=/\s+java\s+/.test("java\n\nobject");assert(!__executed,"The value of !__executed is expected to be true");


var __executed=/\s+java\s+/.test(`java

object`);assert(!__executed,"The value of !__executed is expected to be true");



test262/test/language/statements/for/S12.6.3_A11_T1.js


var __str,index;__str="";for(index=0;index<10;index+=1){if(index<5)continue;__str+=index}if(__str!=="56789")throw new Test262Error('#1: __str === "56789". Actual:  __str ==='+__str);


var __str,index;for(__str="",index=0;index<10;index+=1)index<5||(__str+=index);if(__str!=="56789")throw new Test262Error('#1: __str === "56789". Actual:  __str ==='+__str);



test262/test/language/expressions/delete/S11.4.1_A2.2_T3.js


if(delete this.x!==!0)throw new Test262Error("#1: delete this.x === true");


if(!delete this.x)throw new Test262Error("#1: delete this.x === true");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T4.js


var __executed=/\bso/.exec("pilot\nsoviet robot	openoffice"),__expected=["so"];__expected.index=6;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\bso/.exec(`pilot
soviet robot	openoffice`),__expected=["so"];__expected.index=6,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-target-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.set,"function","implements TypedArray.prototype.set"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*4}),target=new TA(ab,0,4),source=new TA(new ArrayBuffer(BPE*4)),expectedError;try{ab.resize(BPE*3),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw target.set(source,0),new Test262Error("The `set` operation completed successfully.")})});


assert.sameValue(typeof TypedArray.prototype.set,"function","implements TypedArray.prototype.set"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*4}),target=new TA(ab,0,4),source=new TA(new ArrayBuffer(BPE*4)),expectedError;try{ab.resize(BPE*3),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw target.set(source,0),new Test262Error("The `set` operation completed successfully.")})});



test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-same-type-resized.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),source=new TA(ab),target=new TA(ab),expected=[10,20,30,40];source[0]=10;source[1]=20;source[2]=30;source[3]=40;try{ab.resize(BPE*5),expected=[10,20,30,40,0]}catch(_){}target.set(source);assert(compareArray(target,expected),"following grow");try{ab.resize(BPE*3),expected=[10,20,30]}catch(_){}target.set(source);assert(compareArray(target,expected),"following shrink")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),source=new TA(ab),target=new TA(ab),expected=[10,20,30,40];source[0]=10,source[1]=20,source[2]=30,source[3]=40;try{ab.resize(BPE*5),expected=[10,20,30,40,0]}catch{}target.set(source),assert(compareArray(target,expected),"following grow");try{ab.resize(BPE*3),expected=[10,20,30]}catch{}target.set(source),assert(compareArray(target,expected),"following shrink")});



test262/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-not-integer.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(2);assert.sameValue(Reflect.defineProperty(sample,"0.1",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"0.1");assert.sameValue(sample[0],0n,"'0.1' - does not change the value for [0]");assert.sameValue(sample["0.1"],void 0,"'0.1' - does not define a value for ['0.1']");assert.sameValue(Reflect.defineProperty(sample,"0.000001",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"0.000001");assert.sameValue(sample[0],0n,"'0.000001' - does not change the value for [0]");assert.sameValue(sample["0.000001"],void 0,"'0.000001' - does not define a value for ['0.000001']");assert.sameValue(Reflect.defineProperty(sample,"1.1",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"1.1");assert.sameValue(sample[1],0n,"'1.1' - does not change the value for [1]");assert.sameValue(sample["1.1"],void 0,"'1.1' - does not define a value for ['1.1']");assert.sameValue(Reflect.defineProperty(sample,"Infinity",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"Infinity");assert.sameValue(sample[0],0n,"'Infinity' - does not change the value for [0]");assert.sameValue(sample[1],0n,"'Infinity' - does not change the value for [1]");assert.sameValue(sample["Infinity"],void 0,"'Infinity' - does not define a value for ['Infinity']");assert.sameValue(Reflect.defineProperty(sample,"-Infinity",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"-Infinity");assert.sameValue(sample[0],0n,"'-Infinity' - does not change the value for [0]");assert.sameValue(sample[1],0n,"'-Infinity' - does not change the value for [1]");assert.sameValue(sample["-Infinity"],void 0,"'-Infinity' - does not define a value for ['-Infinity']")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(2);assert.sameValue(Reflect.defineProperty(sample,"0.1",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"0.1"),assert.sameValue(sample[0],0n,"'0.1' - does not change the value for [0]"),assert.sameValue(sample["0.1"],void 0,"'0.1' - does not define a value for ['0.1']"),assert.sameValue(Reflect.defineProperty(sample,"0.000001",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"0.000001"),assert.sameValue(sample[0],0n,"'0.000001' - does not change the value for [0]"),assert.sameValue(sample["0.000001"],void 0,"'0.000001' - does not define a value for ['0.000001']"),assert.sameValue(Reflect.defineProperty(sample,"1.1",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"1.1"),assert.sameValue(sample[1],0n,"'1.1' - does not change the value for [1]"),assert.sameValue(sample["1.1"],void 0,"'1.1' - does not define a value for ['1.1']"),assert.sameValue(Reflect.defineProperty(sample,"Infinity",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"Infinity"),assert.sameValue(sample[0],0n,"'Infinity' - does not change the value for [0]"),assert.sameValue(sample[1],0n,"'Infinity' - does not change the value for [1]"),assert.sameValue(sample.Infinity,void 0,"'Infinity' - does not define a value for ['Infinity']"),assert.sameValue(Reflect.defineProperty(sample,"-Infinity",{value:42n,configurable:!1,enumerable:!0,writable:!0}),!1,"-Infinity"),assert.sameValue(sample[0],0n,"'-Infinity' - does not change the value for [0]"),assert.sameValue(sample[1],0n,"'-Infinity' - does not change the value for [1]"),assert.sameValue(sample["-Infinity"],void 0,"'-Infinity' - does not define a value for ['-Infinity']")});



test262/test/language/expressions/delete/non-reference-return-true.js


var a={b:42};assert.sameValue(delete void a.b,!0,"delete void a.b");assert.sameValue(delete void 0,!0,"delete void 0");assert.sameValue(delete"number",!0,"delete typeof 0");assert.sameValue(delete delete 0,!0,"delete delete 0");assert.sameValue(delete void 0,!0,"delete void typeof +-~!0");assert.sameValue(delete{x:1},!0,"delete {x:1}");assert.sameValue(delete null,!0,"delete null");assert.sameValue(delete!0,!0,"delete true");assert.sameValue(delete!1,!0,"delete false");assert.sameValue(delete 0,!0,"delete 0");assert.sameValue(delete 1,!0,"delete 1");assert.sameValue(delete"",!0,'delete ""');assert.sameValue(delete"Test262",!0,'delete "Test262"');assert.sameValue(delete"Test262"[100],!0,'delete "Test262"[100]');assert.sameValue(delete typeof+-~!0,!0,"delete typeof +-~!0");assert.sameValue(delete+-~!0,!0,"delete +-~!0");assert.sameValue(delete-~!0,!0,"delete -~!0");assert.sameValue(delete~!0,!0,"delete ~!0");assert.sameValue(delete!0,!0,"delete !0");


var a={b:42};assert.sameValue(delete void a.b,!0,"delete void a.b"),assert.sameValue(delete void 0,!0,"delete void 0"),assert.sameValue(delete"number",!0,"delete typeof 0"),assert.sameValue(delete delete 0,!0,"delete delete 0"),assert.sameValue(delete void 0,!0,"delete void typeof +-~!0"),assert.sameValue(delete{x:1},!0,"delete {x:1}"),assert.sameValue(delete null,!0,"delete null"),assert.sameValue(delete!0,!0,"delete true"),assert.sameValue(delete!1,!0,"delete false"),assert.sameValue(delete 0,!0,"delete 0"),assert.sameValue(delete 1,!0,"delete 1"),assert.sameValue(delete"",!0,'delete ""'),assert.sameValue(delete"Test262",!0,'delete "Test262"'),assert.sameValue(delete"Test262"[100],!0,'delete "Test262"[100]'),assert.sameValue(delete"number",!0,"delete typeof +-~!0"),assert.sameValue(delete 2,!0,"delete +-~!0"),assert.sameValue(delete 2,!0,"delete -~!0"),assert.sameValue(delete-2,!0,"delete ~!0"),assert.sameValue(delete!0,!0,"delete !0");



test262/test/built-ins/Temporal/ZonedDateTime/prototype/toString/timezonename-auto.js


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00[UTC]","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00[+01:00]","built-in offset"]];for(const[timeZone,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,timeZone),result=date.toString({timeZoneName:"auto"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = auto`)}


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00[UTC]","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00[+01:00]","built-in offset"]];for(const[timeZone,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,timeZone).toString({timeZoneName:"auto"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = auto`)}



test262/test/built-ins/JSON/stringify/value-number-non-finite.js


assert.sameValue(JSON.stringify(Infinity),"null"),assert.sameValue(JSON.stringify({key:-1/0}),'{"key":null}'),assert.sameValue(JSON.stringify([NaN]),"[null]");


assert.sameValue(JSON.stringify(1/0),"null"),assert.sameValue(JSON.stringify({key:-1/0}),'{"key":null}'),assert.sameValue(JSON.stringify([NaN]),"[null]");



test262/test/built-ins/RegExp/S15.10.2.8_A3_T17.js


var __body="";__body+='<body onXXX="alert(event.type);">\n';__body+="<p>Kibology for all</p>\n";__body+="<p>All for Kibology</p>\n";__body+="</body>";var __html="";__html+="<html>\n";__html+=__body;__html+="\n</html>";var __executed=/<body.*>((.*\n?)*?)<\/body>/i.exec(__html),__expected=[__body,"\n<p>Kibology for all</p>\n<p>All for Kibology</p>\n","<p>All for Kibology</p>\n"];__expected.index=7;__expected.input=__html;assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __body="";__body+=`<body onXXX="alert(event.type);">
`,__body+=`<p>Kibology for all</p>
`,__body+=`<p>All for Kibology</p>
`,__body+="</body>";var __html="";__html+=`<html>
`,__html+=__body,__html+=`
</html>`;var __executed=/<body.*>((.*\n?)*?)<\/body>/i.exec(__html),__expected=[__body,`
<p>Kibology for all</p>
<p>All for Kibology</p>
`,`<p>All for Kibology</p>
`];__expected.index=7,__expected.input=__html,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-range-greather-than-target-throws-rangeerror.js


testWithTypedArrayConstructors(function(TA){var sample,src;sample=new TA(2);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,1)},"2 + 1 > 2");sample=new TA(1);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,0)},"2 + 0 > 1");sample=new TA(1);src=new TA(0);assert.throws(RangeError,function(){sample.set(src,2)},"0 + 2 > 1");sample=new TA(2);src=new TA(2);assert.throws(RangeError,function(){sample.set(src,Infinity)},"2 + Infinity > 2")});


testWithTypedArrayConstructors(function(TA){var sample,src;sample=new TA(2),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,1)},"2 + 1 > 2"),sample=new TA(1),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,0)},"2 + 0 > 1"),sample=new TA(1),src=new TA(0),assert.throws(RangeError,function(){sample.set(src,2)},"0 + 2 > 1"),sample=new TA(2),src=new TA(2),assert.throws(RangeError,function(){sample.set(src,1/0)},"2 + Infinity > 2")});



test262/test/language/statements/for/S12.6.3_A3.js


var __in__NotInExpression__,__in__NotInExpression__2,__in__for;try{for(function(){__in__NotInExpression__="checked",__in__NotInExpression__2="passed"}();function(){throw"FirstExpression"}();function(){throw"SecondExpression"}())__in__for="reached";throw new Test262Error('#1: (function(){throw "SecondExpression"} lead to throwing exception')}catch(e){if(e!=="FirstExpression")throw new Test262Error("#1: When for (ExpressionNoIn ; FirstExpression ; SecondExpression) Statement is evaluated first evaluates ExpressionNoIn then FirstExpression")}if(__in__NotInExpression__!=="checked"&__in__NotInExpression__2!=="passed")throw new Test262Error('#2: (__in__NotInExpression__ === "checked")&(__in__NotInExpression__2==="passed")');if(typeof __in__for!="undefined")throw new Test262Error('#3: typeof __in__for === "undefined". Actual:  typeof __in__for ==='+typeof __in__for);


var __in__NotInExpression__,__in__NotInExpression__2,__in__for;try{for(function(){__in__NotInExpression__="checked",__in__NotInExpression__2="passed"}();function(){throw"FirstExpression"}();function(){throw"SecondExpression"}())__in__for="reached";throw new Test262Error('#1: (function(){throw "SecondExpression"} lead to throwing exception')}catch(e){if(e!=="FirstExpression")throw new Test262Error("#1: When for (ExpressionNoIn ; FirstExpression ; SecondExpression) Statement is evaluated first evaluates ExpressionNoIn then FirstExpression")}if(__in__NotInExpression__!=="checked"&__in__NotInExpression__2!=="passed")throw new Test262Error('#2: (__in__NotInExpression__ === "checked")&(__in__NotInExpression__2==="passed")');if(typeof __in__for<"u")throw new Test262Error('#3: typeof __in__for === "undefined". Actual:  typeof __in__for ==='+typeof __in__for);



test262/test/language/expressions/delete/S11.4.1_A3.3_T1.js


try{throw x=1,delete x,x,new Test262Error("#1: x = 1; delete x; x is not exist")}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1: x = 1; delete x; x is not exist")}


try{throw x=1,delete x,x,new Test262Error("#1: x = 1; delete x; x is not exist")}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1: x = 1; delete x; x is not exist")}



test262/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-not-integer.js


testWithTypedArrayConstructors(function(TA){var sample=new TA(2);assert.sameValue(Reflect.defineProperty(sample,"0.1",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"0.1");assert.sameValue(sample[0],0,"'0.1' - does not change the value for [0]");assert.sameValue(sample["0.1"],void 0,"'0.1' - does not define a value for ['0.1']");assert.sameValue(Reflect.defineProperty(sample,"0.000001",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"0.000001");assert.sameValue(sample[0],0,"'0.000001' - does not change the value for [0]");assert.sameValue(sample["0.000001"],void 0,"'0.000001' - does not define a value for ['0.000001']");assert.sameValue(Reflect.defineProperty(sample,"1.1",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"1.1");assert.sameValue(sample[1],0,"'1.1' - does not change the value for [1]");assert.sameValue(sample["1.1"],void 0,"'1.1' - does not define a value for ['1.1']");assert.sameValue(Reflect.defineProperty(sample,"Infinity",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"Infinity");assert.sameValue(sample[0],0,"'Infinity' - does not change the value for [0]");assert.sameValue(sample[1],0,"'Infinity' - does not change the value for [1]");assert.sameValue(sample["Infinity"],void 0,"'Infinity' - does not define a value for ['Infinity']");assert.sameValue(Reflect.defineProperty(sample,"-Infinity",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"-Infinity");assert.sameValue(sample[0],0,"'-Infinity' - does not change the value for [0]");assert.sameValue(sample[1],0,"'-Infinity' - does not change the value for [1]");assert.sameValue(sample["-Infinity"],void 0,"'-Infinity' - does not define a value for ['-Infinity']")});


testWithTypedArrayConstructors(function(TA){var sample=new TA(2);assert.sameValue(Reflect.defineProperty(sample,"0.1",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"0.1"),assert.sameValue(sample[0],0,"'0.1' - does not change the value for [0]"),assert.sameValue(sample["0.1"],void 0,"'0.1' - does not define a value for ['0.1']"),assert.sameValue(Reflect.defineProperty(sample,"0.000001",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"0.000001"),assert.sameValue(sample[0],0,"'0.000001' - does not change the value for [0]"),assert.sameValue(sample["0.000001"],void 0,"'0.000001' - does not define a value for ['0.000001']"),assert.sameValue(Reflect.defineProperty(sample,"1.1",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"1.1"),assert.sameValue(sample[1],0,"'1.1' - does not change the value for [1]"),assert.sameValue(sample["1.1"],void 0,"'1.1' - does not define a value for ['1.1']"),assert.sameValue(Reflect.defineProperty(sample,"Infinity",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"Infinity"),assert.sameValue(sample[0],0,"'Infinity' - does not change the value for [0]"),assert.sameValue(sample[1],0,"'Infinity' - does not change the value for [1]"),assert.sameValue(sample.Infinity,void 0,"'Infinity' - does not define a value for ['Infinity']"),assert.sameValue(Reflect.defineProperty(sample,"-Infinity",{value:42,configurable:!1,enumerable:!0,writable:!0}),!1,"-Infinity"),assert.sameValue(sample[0],0,"'-Infinity' - does not change the value for [0]"),assert.sameValue(sample[1],0,"'-Infinity' - does not change the value for [1]"),assert.sameValue(sample["-Infinity"],void 0,"'-Infinity' - does not define a value for ['-Infinity']")});



test262/test/language/expressions/delete/S11.4.1_A3.2_T1.js


if(x=1,delete x!==!0)throw new Test262Error("#1: x = 1; delete x === true");


if(x=1,!delete x)throw new Test262Error("#1: x = 1; delete x === true");



test262/test/built-ins/Temporal/ZonedDateTime/prototype/toString/timezonename-critical.js


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00[!UTC]","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00[!+01:00]","built-in offset"]];for(const[timeZone,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,timeZone),result=date.toString({timeZoneName:"critical"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = critical`)}


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00[!UTC]","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00[!+01:00]","built-in offset"]];for(const[timeZone,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,timeZone).toString({timeZoneName:"critical"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = critical`)}



test262/test/built-ins/Temporal/ZonedDateTime/prototype/toString/timezonename-never.js


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00","built-in offset"]];for(const[timeZone,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,timeZone),result=date.toString({timeZoneName:"never"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = never`)}


const tests=[["UTC","1970-01-01T01:01:01.987654321+00:00","built-in UTC"],["+01:00","1970-01-01T02:01:01.987654321+01:00","built-in offset"]];for(const[timeZone,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,timeZone).toString({timeZoneName:"never"});assert.sameValue(result,expected,`${description} time zone for timeZoneName = never`)}



test262/test/built-ins/RegExp/S15.10.2.6_A3_T11.js


var __executed=/\b\w{5}\b/.exec("pilot\nsoviet robot	openoffice"),__expected=["pilot"];__expected.index=0;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\b\w{5}\b/.exec(`pilot
soviet robot	openoffice`),__expected=["pilot"];__expected.index=0,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/language/expressions/delete/S8.12.7_A1.js


if(delete Math.E!==!1)throw new Test262Error("#1: delete Math.E === false. Actual: "+delete Math.E);if(Math.E===void 0)throw new Test262Error("#2: delete Math.E; Math.E !== undefined");


if(delete Math.E)throw new Test262Error("#1: delete Math.E === false. Actual: "+delete Math.E);if(Math.E===void 0)throw new Test262Error("#2: delete Math.E; Math.E !== undefined");



test262/test/built-ins/String/prototype/at/returns-code-unit.js


assert.sameValue(typeof String.prototype.at,"function");let s="12\\ud80034";assert.sameValue(s.at(0),"1",'s.at(0) must return "1"');assert.sameValue(s.at(1),"2",'s.at(1) must return "2"');assert.sameValue(s.at(2),"\\ud800",'s.at(2) must return "\\uD800"');assert.sameValue(s.at(3),"3",'s.at(3) must return "3"');assert.sameValue(s.at(4),"4",'s.at(4) must return "4"');


assert.sameValue(typeof String.prototype.at,"function");let s="12\uD80034";assert.sameValue(s.at(0),"1",'s.at(0) must return "1"'),assert.sameValue(s.at(1),"2",'s.at(1) must return "2"'),assert.sameValue(s.at(2),"\uD800",'s.at(2) must return "\\uD800"'),assert.sameValue(s.at(3),"3",'s.at(3) must return "3"'),assert.sameValue(s.at(4),"4",'s.at(4) must return "4"');



test262/test/built-ins/TypedArrayConstructors/internals/OwnPropertyKeys/integer-indexes-resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","initial");try{ab.resize(BPE*5)}catch(_){}assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","following shrink (within bounds)");var expected;try{ab.resize(BPE*2),expected=""}catch(_){expected="0,1"}assert.sameValue(Reflect.ownKeys(array).join(","),expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","initial");try{ab.resize(BPE*5)}catch{}assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(Reflect.ownKeys(array).join(","),"0,1","following shrink (within bounds)");var expected;try{ab.resize(BPE*2),expected=""}catch{expected="0,1"}assert.sameValue(Reflect.ownKeys(array).join(","),expected,"following shrink (out of bounds)")});



test262/test/language/expressions/delete/S11.4.1_A2.2_T1.js


if(delete x!==!0)throw new Test262Error("#1: delete x === true");


if(!delete x)throw new Test262Error("#1: delete x === true");



test262/test/built-ins/String/prototype/toLocaleLowerCase/S15.5.4.17_A1_T8.js


if(Number.prototype.toLocaleLowerCase=String.prototype.toLocaleLowerCase,Infinity.toLocaleLowerCase()!=="infinity")throw new Test262Error('#1: Number.prototype.toLocaleLowerCase = String.prototype.toLocaleLowerCase; Infinity.toLocaleLowerCase()=== "infinity". Actual: '+Infinity.toLocaleLowerCase());


if(Number.prototype.toLocaleLowerCase=String.prototype.toLocaleLowerCase,(1/0).toLocaleLowerCase()!=="infinity")throw new Test262Error('#1: Number.prototype.toLocaleLowerCase = String.prototype.toLocaleLowerCase; Infinity.toLocaleLowerCase()=== "infinity". Actual: '+(1/0).toLocaleLowerCase());



test262/test/built-ins/TypedArrayConstructors/internals/Get/detached-buffer.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42]);$DETACHBUFFER(sample.buffer);assert.sameValue(sample[0],void 0,"The value of sample[0] is expected to equal `undefined`");assert.sameValue(sample["1.1"],void 0,'The value of sample["1.1"] is expected to equal `undefined`');assert.sameValue(sample["-0"],void 0,'The value of sample["-0"] is expected to equal `undefined`');assert.sameValue(sample["-1"],void 0,'The value of sample["-1"] is expected to equal `undefined`');assert.sameValue(sample["1"],void 0,'The value of sample["1"] is expected to equal `undefined`');assert.sameValue(sample["2"],void 0,'The value of sample["2"] is expected to equal `undefined`')});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42]);$DETACHBUFFER(sample.buffer),assert.sameValue(sample[0],void 0,"The value of sample[0] is expected to equal `undefined`"),assert.sameValue(sample["1.1"],void 0,'The value of sample["1.1"] is expected to equal `undefined`'),assert.sameValue(sample["-0"],void 0,'The value of sample["-0"] is expected to equal `undefined`'),assert.sameValue(sample[-1],void 0,'The value of sample["-1"] is expected to equal `undefined`'),assert.sameValue(sample[1],void 0,'The value of sample["1"] is expected to equal `undefined`'),assert.sameValue(sample[2],void 0,'The value of sample["2"] is expected to equal `undefined`')});



test262/test/language/expressions/postfix-decrement/bigint.js


var x=1n;assert.sameValue(x--,1n,"var x = 1n; x-- === 1n");assert.sameValue(x,0n,"var x = 1n; x--; x === 0n");var x=0n;assert.sameValue(x--,0n,"var x = 0n; x-- === 0n");assert.sameValue(x,-1n,"var x = 0n; x--; x === -1n");var x=123457n;assert.sameValue(x--,123457n,"var x = 123457n; x-- === 123457n");assert.sameValue(x,123456n,"var x = 123457n; x--; x === 123456n");var x=-123456n;assert.sameValue(x--,-123456n,"var x = -123456n; x-- === -123456n");assert.sameValue(x,-123457n,"var x = -123456n; x--; x === -123457n");var x=0x1fffffffffffff01n;assert.sameValue(x--,0x1fffffffffffff01n,"var x = 0x1fffffffffffff01n; x-- === 0x1fffffffffffff01n");assert.sameValue(x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; x--; x === 0x1fffffffffffff00n");var x=-2305843009213693696n;assert.sameValue(x--,-2305843009213693696n,"var x = -0x1fffffffffffff00n; x-- === -0x1fffffffffffff00n");assert.sameValue(x,-2305843009213693697n,"var x = -0x1fffffffffffff00n; x--; x === -0x1fffffffffffff01n");var x={y:1n};assert.sameValue(x.y--,1n,"var x = {y:1n}; x.y-- === 1n");assert.sameValue(x.y,0n,"var x = {y:1n}; x.y--; x.y === 0n");var x={y:{z:1n}};assert.sameValue(x.y.z--,1n,"var x = {y:{z:1n}}; x.y.z-- === 1n");assert.sameValue(x.y.z,0n,"var x = {y:{z:1n}}; x.y.z--; x.y.z === 0n");var x=[1n];assert.sameValue(x[0]--,1n,"var x = [1n]; x[0]-- === 1n");assert.sameValue(x[0],0n,"var x = [1n]; x[0]--; x[0] === 0n");var x=[null,[null,null,1n]];assert.sameValue(x[1][2]--,1n,"var x = [null, [null, null, 1n]]; x[1][2]-- === 1n");assert.sameValue(x[1][2],0n,"var x = [null, [null, null, 1n]]; x[1][2]--; x[1][2] === 0n");var x={y:[1n]};assert.sameValue(x.y[0]--,1n,"var x = {y:[1n]}; x.y[0]-- === 1n");assert.sameValue(x.y[0],0n,"var x = {y:[1n]}; x.y[0]--; x.y[0] === 0n");var x=[{z:1n}];assert.sameValue(x[0].z--,1n,"var x = [{z:1n}]; x[0].z-- === 1n");assert.sameValue(x[0].z,0n,"var x = [{z:1n}]; x[0].z--; x[0].z === 0n");


var x=1n;assert.sameValue(x--,1n,"var x = 1n; x-- === 1n"),assert.sameValue(x,0n,"var x = 1n; x--; x === 0n");var x=0n;assert.sameValue(x--,0n,"var x = 0n; x-- === 0n"),assert.sameValue(x,-1n,"var x = 0n; x--; x === -1n");var x=123457n;assert.sameValue(x--,123457n,"var x = 123457n; x-- === 123457n"),assert.sameValue(x,123456n,"var x = 123457n; x--; x === 123456n");var x=-123456n;assert.sameValue(x--,-123456n,"var x = -123456n; x-- === -123456n"),assert.sameValue(x,-123457n,"var x = -123456n; x--; x === -123457n");var x=0x1fffffffffffff01n;assert.sameValue(x--,0x1fffffffffffff01n,"var x = 0x1fffffffffffff01n; x-- === 0x1fffffffffffff01n"),assert.sameValue(x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; x--; x === 0x1fffffffffffff00n");var x=-0x1fffffffffffff00n;assert.sameValue(x--,-0x1fffffffffffff00n,"var x = -0x1fffffffffffff00n; x-- === -0x1fffffffffffff00n"),assert.sameValue(x,-0x1fffffffffffff01n,"var x = -0x1fffffffffffff00n; x--; x === -0x1fffffffffffff01n");var x={y:1n};assert.sameValue(x.y--,1n,"var x = {y:1n}; x.y-- === 1n"),assert.sameValue(x.y,0n,"var x = {y:1n}; x.y--; x.y === 0n");var x={y:{z:1n}};assert.sameValue(x.y.z--,1n,"var x = {y:{z:1n}}; x.y.z-- === 1n"),assert.sameValue(x.y.z,0n,"var x = {y:{z:1n}}; x.y.z--; x.y.z === 0n");var x=[1n];assert.sameValue(x[0]--,1n,"var x = [1n]; x[0]-- === 1n"),assert.sameValue(x[0],0n,"var x = [1n]; x[0]--; x[0] === 0n");var x=[null,[null,null,1n]];assert.sameValue(x[1][2]--,1n,"var x = [null, [null, null, 1n]]; x[1][2]-- === 1n"),assert.sameValue(x[1][2],0n,"var x = [null, [null, null, 1n]]; x[1][2]--; x[1][2] === 0n");var x={y:[1n]};assert.sameValue(x.y[0]--,1n,"var x = {y:[1n]}; x.y[0]-- === 1n"),assert.sameValue(x.y[0],0n,"var x = {y:[1n]}; x.y[0]--; x.y[0] === 0n");var x=[{z:1n}];assert.sameValue(x[0].z--,1n,"var x = [{z:1n}]; x[0].z-- === 1n"),assert.sameValue(x[0].z,0n,"var x = [{z:1n}]; x[0].z--; x[0].z === 0n");



test262/test/built-ins/TypedArray/prototype/some/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.some,"function","implements TypedArray.prototype.some"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.some(()=>{});try{ab.resize(BPE*3)}catch(_){}array.some(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.some(()=>{}),new Test262Error("some completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.some,"function","implements TypedArray.prototype.some"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.some(()=>{});try{ab.resize(BPE*3)}catch{}array.some(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.some(()=>{}),new Test262Error("some completed successfully")})});



test262/test/built-ins/String/prototype/toLocaleLowerCase/S15.5.4.17_A7.js


var __FACTORY=String.prototype.toLocaleLowerCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toLocaleLowerCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.1: var __FACTORY = String.prototype.toLocaleLowerCase; "var __instance = new __FACTORY" throw a TypeError. Actual: '+e)}


var __FACTORY=String.prototype.toLocaleLowerCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toLocaleLowerCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.1: var __FACTORY = String.prototype.toLocaleLowerCase; "var __instance = new __FACTORY" throw a TypeError. Actual: '+e)}



test262/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/detached-buffer.js


testWithBigIntTypedArrayConstructors(function(TA){let sample=new TA(1);$DETACHBUFFER(sample.buffer);assert.sameValue(sample[0],void 0,"The value of sample[0] is expected to equal `undefined`");assert.sameValue(sample["1.1"],void 0,'The value of sample["1.1"] is expected to equal `undefined`');assert.sameValue(sample["-0"],void 0,'The value of sample["-0"] is expected to equal `undefined`');assert.sameValue(sample["-1"],void 0,'The value of sample["-1"] is expected to equal `undefined`');assert.sameValue(sample["1"],void 0,'The value of sample["1"] is expected to equal `undefined`');assert.sameValue(sample["2"],void 0,'The value of sample["2"] is expected to equal `undefined`')});


testWithBigIntTypedArrayConstructors(function(TA){let sample=new TA(1);$DETACHBUFFER(sample.buffer),assert.sameValue(sample[0],void 0,"The value of sample[0] is expected to equal `undefined`"),assert.sameValue(sample["1.1"],void 0,'The value of sample["1.1"] is expected to equal `undefined`'),assert.sameValue(sample["-0"],void 0,'The value of sample["-0"] is expected to equal `undefined`'),assert.sameValue(sample[-1],void 0,'The value of sample["-1"] is expected to equal `undefined`'),assert.sameValue(sample[1],void 0,'The value of sample["1"] is expected to equal `undefined`'),assert.sameValue(sample[2],void 0,'The value of sample["2"] is expected to equal `undefined`')});



test262/test/built-ins/Temporal/PlainDateTime/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/some/BigInt/returns-true-if-any-cb-returns-true.js


var s=Symbol("1");testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(42);[!0,1,"test262",s,{},[],-1,Infinity,-1/0,.1,-.1].forEach(function(val){var called=0,result=sample.some(function(){return called++,called==1?!1:val});assert.sameValue(called,2,"callbackfn called for each index property");var msg="result is true - "+(val===s?"symbol":val);assert.sameValue(result,!0,msg)})});


var s=Symbol("1");testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(42);[!0,1,"test262",s,{},[],-1,1/0,-1/0,.1,-.1].forEach(function(val){var called=0,result=sample.some(function(){return called++,called==1?!1:val});assert.sameValue(called,2,"callbackfn called for each index property");var msg="result is true - "+(val===s?"symbol":val);assert.sameValue(result,!0,msg)})});



test262/test/built-ins/JSON/parse/reviver-array-non-configurable-prop-delete.js


var json="[1, 2]",arr=JSON.parse(json,function(key,value){return key==="0"&&Object.defineProperty(this,"1",{configurable:!1}),key==="1"?void 0:value});assert.sameValue(arr[0],1);assert(arr.hasOwnProperty("1"));assert.sameValue(arr[1],2);


var json="[1, 2]",arr=JSON.parse(json,function(key,value){if(key==="0"&&Object.defineProperty(this,"1",{configurable:!1}),key!=="1")return value});assert.sameValue(arr[0],1),assert(arr.hasOwnProperty("1")),assert.sameValue(arr[1],2);



test262/test/built-ins/TypedArray/prototype/some/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.some,"function","implements TypedArray.prototype.some"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.some(()=>{});try{ab.resize(BPE*3)}catch(_){}array.some(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.some(()=>{}),new Test262Error("some completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.some,"function","implements TypedArray.prototype.some"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.some(()=>{});try{ab.resize(BPE*3)}catch{}array.some(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.some(()=>{}),new Test262Error("some completed successfully")})});



test262/test/language/expressions/postfix-decrement/S11.3.2_A2.1_T2.js


try{throw x--,new Test262Error("#1.1: x-- throw ReferenceError. Actual: "+x--)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x-- throw ReferenceError. Actual: "+e)}


try{throw x--,new Test262Error("#1.1: x-- throw ReferenceError. Actual: "+x--)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x-- throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/some/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.some(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,!1,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.some(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,!1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.some(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,!1,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.some(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,!1,"result (grow)")});



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A2.1_T3.js


try{throw 1>=y,new Test262Error("#1.1: 1 >= y throw ReferenceError. Actual: "+(1>=y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 >= y throw ReferenceError. Actual: "+e)}


try{throw 1>=y,new Test262Error("#1.1: 1 >= y throw ReferenceError. Actual: "+(1>=y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 >= y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/some/returns-true-if-any-cb-returns-true.js


var s=Symbol("1");testWithTypedArrayConstructors(function(TA){var sample=new TA(42);[!0,1,"test262",s,{},[],-1,Infinity,-1/0,.1,-.1].forEach(function(val){var called=0,result=sample.some(function(){return called++,called==1?!1:val});assert.sameValue(called,2,"callbackfn called for each index property");var msg="result is true - "+(val===s?"symbol":val);assert.sameValue(result,!0,msg)})});


var s=Symbol("1");testWithTypedArrayConstructors(function(TA){var sample=new TA(42);[!0,1,"test262",s,{},[],-1,1/0,-1/0,.1,-.1].forEach(function(val){var called=0,result=sample.some(function(){return called++,called==1?!1:val});assert.sameValue(called,2,"callbackfn called for each index property");var msg="result is true - "+(val===s?"symbol":val);assert.sameValue(result,!0,msg)})});



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A4.11.js


var x="x";if(x+"y">=x!==!0)throw new Test262Error('#6: var x = "x"; (x + "y" >= x) === true');


var x="x";if(!(x+"y">=x))throw new Test262Error('#6: var x = "x"; (x + "y" >= x) === true');



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A4.9.js


if(Number.MAX_VALUE>=Number.MAX_VALUE/2!==!0)throw new Test262Error("#7: (Number.MAX_VALUE >= Number.MAX_VALUE/2) === true");if(Number.MIN_VALUE*2>=Number.MIN_VALUE!==!0)throw new Test262Error("#8: (Number.MIN_VALUE*2 >= Number.MIN_VALUE) === true");


if(!(Number.MAX_VALUE>=Number.MAX_VALUE/2))throw new Test262Error("#7: (Number.MAX_VALUE >= Number.MAX_VALUE/2) === true");if(!(Number.MIN_VALUE*2>=Number.MIN_VALUE))throw new Test262Error("#8: (Number.MIN_VALUE*2 >= Number.MIN_VALUE) === true");



test262/test/built-ins/JSON/parse/15.12.1.1-g1-3.js


assert.sameValue(JSON.parse("\n1234"),1234,"<LF> should be ignored"),assert.throws(SyntaxError,function(){JSON.parse("12\n34")},"<LF> should produce a syntax error as whitespace results in two tokens");


assert.sameValue(JSON.parse(`
1234`),1234,"<LF> should be ignored"),assert.throws(SyntaxError,function(){JSON.parse(`12
34`)},"<LF> should produce a syntax error as whitespace results in two tokens");



test262/test/built-ins/Array/prototype/pop/length-near-integer-limit.js


var arrayLike={"9007199254740989":"9007199254740989","9007199254740990":"9007199254740990","9007199254740991":"9007199254740991",length:9007199254740991},value=Array.prototype.pop.call(arrayLike);assert.sameValue(value,"9007199254740990","arrayLike['9007199254740990'] is returned from pop()");assert.sameValue(arrayLike.length,9007199254740990,"New arrayLike.length is 2**53 - 2");assert.sameValue(arrayLike["9007199254740989"],"9007199254740989","arrayLike['9007199254740989'] is unchanged");assert.sameValue("9007199254740990"in arrayLike,!1,"arrayLike['9007199254740990'] is removed");assert.sameValue(arrayLike["9007199254740991"],"9007199254740991","arrayLike['9007199254740991'] is unchanged");


var arrayLike={"9007199254740989":"9007199254740989","9007199254740990":"9007199254740990","9007199254740991":"9007199254740991",length:9007199254740991},value=Array.prototype.pop.call(arrayLike);assert.sameValue(value,"9007199254740990","arrayLike['9007199254740990'] is returned from pop()"),assert.sameValue(arrayLike.length,2**53-2,"New arrayLike.length is 2**53 - 2"),assert.sameValue(arrayLike["9007199254740989"],"9007199254740989","arrayLike['9007199254740989'] is unchanged"),assert.sameValue("9007199254740990"in arrayLike,!1,"arrayLike['9007199254740990'] is removed"),assert.sameValue(arrayLike["9007199254740991"],"9007199254740991","arrayLike['9007199254740991'] is unchanged");



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A2.1_T2.js


try{throw x>=1,new Test262Error("#1.1: x >= 1 throw ReferenceError. Actual: "+(x>=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >= 1 throw ReferenceError. Actual: "+e)}


try{throw x>=1,new Test262Error("#1.1: x >= 1 throw ReferenceError. Actual: "+(x>=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A4.10.js


var x="x";if(x>=x+"y"!==!1)throw new Test262Error('#6: var x = "x"; (x >= x + "y") === false');


var x="x";if(x>=x+"y")throw new Test262Error('#6: var x = "x"; (x >= x + "y") === false');



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A1.js


if(eval("1	>=	1")!==!0)throw new Test262Error("#1: (1\\u0009>=\\u00091) === true");if(eval("1\v>=\v1")!==!0)throw new Test262Error("#2: (1\\u000B>=\\u000B1) === true");if(eval("1\f>=\f1")!==!0)throw new Test262Error("#3: (1\\u000C>=\\u000C1) === true");if(eval("1 >= 1")!==!0)throw new Test262Error("#4: (1\\u0020>=\\u00201) === true");if(eval("1\xA0>=\xA01")!==!0)throw new Test262Error("#5: (1\\u00A0>=\\u00A01) === true");if(eval("1\n>=\n1")!==!0)throw new Test262Error("#6: (1\\u000A>=\\u000A1) === true");if(eval("1\r>=\r1")!==!0)throw new Test262Error("#7: (1\\u000D>=\\u000D1) === true");if(eval("1\u2028>=\u20281")!==!0)throw new Test262Error("#8: (1\\u2028>=\\u20281) === true");if(eval("1\u2029>=\u20291")!==!0)throw new Test262Error("#9: (1\\u2029>=\\u20291) === true");if(eval("1	\v\f \xA0\n\r\u2028\u2029>=	\v\f \xA0\n\r\u2028\u20291")!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");


if(eval("1	>=	1")!==!0)throw new Test262Error("#1: (1\\u0009>=\\u00091) === true");if(eval("1\v>=\v1")!==!0)throw new Test262Error("#2: (1\\u000B>=\\u000B1) === true");if(eval("1\f>=\f1")!==!0)throw new Test262Error("#3: (1\\u000C>=\\u000C1) === true");if(eval("1 >= 1")!==!0)throw new Test262Error("#4: (1\\u0020>=\\u00201) === true");if(eval("1\xA0>=\xA01")!==!0)throw new Test262Error("#5: (1\\u00A0>=\\u00A01) === true");if(eval(`1
>=
1`)!==!0)throw new Test262Error("#6: (1\\u000A>=\\u000A1) === true");if(eval("1\r>=\r1")!==!0)throw new Test262Error("#7: (1\\u000D>=\\u000D1) === true");if(eval("1\u2028>=\u20281")!==!0)throw new Test262Error("#8: (1\\u2028>=\\u20281) === true");if(eval("1\u2029>=\u20291")!==!0)throw new Test262Error("#9: (1\\u2029>=\\u20291) === true");if(eval(`1	\v\f \xA0
\r\u2028\u2029>=	\v\f \xA0
\r\u2028\u20291`)!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A4.3.js


if(Number.NEGATIVE_INFINITY>=Number.NEGATIVE_INFINITY!==!0)throw new Test262Error("#4: (-Infinity >= -Infinity) === true");if(Number.POSITIVE_INFINITY>=Number.POSITIVE_INFINITY!==!0)throw new Test262Error("#5: (+Infinity >= +Infinity) === true");if(Number.MAX_VALUE>=Number.MAX_VALUE!==!0)throw new Test262Error("#6: (Number.MAX_VALUE >= Number.MAX_VALUE) === true");if(Number.MIN_VALUE>=Number.MIN_VALUE!==!0)throw new Test262Error("#7: (Number.MIN_VALUE >= Number.MIN_VALUE) === true");


if(!(Number.NEGATIVE_INFINITY>=Number.NEGATIVE_INFINITY))throw new Test262Error("#4: (-Infinity >= -Infinity) === true");if(!(Number.POSITIVE_INFINITY>=Number.POSITIVE_INFINITY))throw new Test262Error("#5: (+Infinity >= +Infinity) === true");if(!(Number.MAX_VALUE>=Number.MAX_VALUE))throw new Test262Error("#6: (Number.MAX_VALUE >= Number.MAX_VALUE) === true");if(!(Number.MIN_VALUE>=Number.MIN_VALUE))throw new Test262Error("#7: (Number.MIN_VALUE >= Number.MIN_VALUE) === true");



test262/test/built-ins/JSON/parse/reviver-object-non-configurable-prop-delete.js


var json='{"a": 1, "b": 2}',obj=JSON.parse(json,function(key,value){return key==="a"&&Object.defineProperty(this,"b",{configurable:!1}),key==="b"?void 0:value});assert.sameValue(obj.a,1);assert(obj.hasOwnProperty("b"));assert.sameValue(obj.b,2);


var json='{"a": 1, "b": 2}',obj=JSON.parse(json,function(key,value){if(key==="a"&&Object.defineProperty(this,"b",{configurable:!1}),key!=="b")return value});assert.sameValue(obj.a,1),assert(obj.hasOwnProperty("b")),assert.sameValue(obj.b,2);



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A3.2_T1.1.js


if(new String("1")>="1"!==!0)throw new Test262Error('#2: new String("1") >= "1" === true');if("1">=new String("1")!==!0)throw new Test262Error('#3: "1" >= new String("1") === true');if(new String("1")>=new String("1")!==!0)throw new Test262Error('#4: new String("1") >= new String("1") === true');


if(!(new String("1")>="1"))throw new Test262Error('#2: new String("1") >= "1" === true');if(!("1">=new String("1")))throw new Test262Error('#3: "1" >= new String("1") === true');if(!(new String("1")>=new String("1")))throw new Test262Error('#4: new String("1") >= new String("1") === true');



test262/test/built-ins/Temporal/ZonedDateTime/prototype/round/roundingincrement-out-of-range.js


const datetime=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:0}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:.9}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:Infinity}));


const datetime=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:0})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:.9})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1/0}));



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A2.4_T3.js


try{throw x>=(x=1),new Test262Error("#1.1: x >= (x = 1) throw ReferenceError. Actual: "+(x>=(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >= (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x>=(x=1),new Test262Error("#1.1: x >= (x = 1) throw ReferenceError. Actual: "+(x>=(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >= (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A3.2_T1.2.js


if({}>=function(){return 1}!=={}.toString()>=function(){return 1}.toString())throw new Test262Error("#1: ({} >= function(){return 1}) === ({}.toString() >= function(){return 1}.toString())");if(function(){return 1}>={}!==function(){return 1}.toString()>={}.toString())throw new Test262Error("#2: (function(){return 1} >= {}) === (function(){return 1}.toString() >= {}.toString())");if(function(){return 1}>=function(){return 1}!==function(){return 1}.toString()>=function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} >= function(){return 1}) === (function(){return 1}.toString() >= function(){return 1}.toString())");if({}>={}!=={}.toString()>={}.toString())throw new Test262Error("#4: ({} >= {}) === ({}.toString() >= {}.toString())");


if({}>=function(){return 1}!={}.toString()>=function(){return 1}.toString())throw new Test262Error("#1: ({} >= function(){return 1}) === ({}.toString() >= function(){return 1}.toString())");if(function(){return 1}>={}!=function(){return 1}.toString()>={}.toString())throw new Test262Error("#2: (function(){return 1} >= {}) === (function(){return 1}.toString() >= {}.toString())");if(function(){return 1}>=function(){return 1}!=function(){return 1}.toString()>=function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} >= function(){return 1}) === (function(){return 1}.toString() >= function(){return 1}.toString())");if({}>={}!={}.toString()>={}.toString())throw new Test262Error("#4: ({} >= {}) === ({}.toString() >= {}.toString())");



test262/test/built-ins/JSON/parse/text-negative-zero.js


assert.sameValue(JSON.parse("-0"),-0),assert.sameValue(JSON.parse(" \n-0"),-0),assert.sameValue(JSON.parse("-0  	"),-0),assert.sameValue(JSON.parse("\n	 -0\n   "),-0),assert.sameValue(JSON.parse(-0),0);


assert.sameValue(JSON.parse("-0"),-0),assert.sameValue(JSON.parse(` 
-0`),-0),assert.sameValue(JSON.parse("-0  	"),-0),assert.sameValue(JSON.parse(`
	 -0
   `),-0),assert.sameValue(JSON.parse(-0),0);



test262/test/language/expressions/greater-than-or-equal/bigint-and-bigint.js


assert.sameValue(0n>=0n,!0,"The result of (0n >= 0n) is true"),assert.sameValue(1n>=1n,!0,"The result of (1n >= 1n) is true"),assert.sameValue(-1n>=-1n,!0,"The result of (-1n >= -1n) is true"),assert.sameValue(0n>=0n,!0,"The result of (0n >= -0n) is true"),assert.sameValue(0n>=0n,!0,"The result of (-0n >= 0n) is true"),assert.sameValue(0n>=1n,!1,"The result of (0n >= 1n) is false"),assert.sameValue(1n>=0n,!0,"The result of (1n >= 0n) is true"),assert.sameValue(0n>=-1n,!0,"The result of (0n >= -1n) is true"),assert.sameValue(-1n>=0n,!1,"The result of (-1n >= 0n) is false"),assert.sameValue(1n>=-1n,!0,"The result of (1n >= -1n) is true"),assert.sameValue(-1n>=1n,!1,"The result of (-1n >= 1n) is false"),assert.sameValue(0x1fffffffffffff01n>=0x1fffffffffffff02n,!1,"The result of (0x1fffffffffffff01n >= 0x1fffffffffffff02n) is false"),assert.sameValue(0x1fffffffffffff02n>=0x1fffffffffffff01n,!0,"The result of (0x1fffffffffffff02n >= 0x1fffffffffffff01n) is true"),assert.sameValue(-2305843009213693697n>=-2305843009213693698n,!0,"The result of (-0x1fffffffffffff01n >= -0x1fffffffffffff02n) is true"),assert.sameValue(-2305843009213693698n>=-2305843009213693697n,!1,"The result of (-0x1fffffffffffff02n >= -0x1fffffffffffff01n) is false"),assert.sameValue(0x10000000000000000n>=0n,!0,"The result of (0x10000000000000000n >= 0n) is true"),assert.sameValue(0n>=0x10000000000000000n,!1,"The result of (0n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>=1n,!0,"The result of (0x10000000000000000n >= 1n) is true"),assert.sameValue(1n>=0x10000000000000000n,!1,"The result of (1n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>=-1n,!0,"The result of (0x10000000000000000n >= -1n) is true"),assert.sameValue(-1n>=0x10000000000000000n,!1,"The result of (-1n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000001n>=0n,!0,"The result of (0x10000000000000001n >= 0n) is true"),assert.sameValue(0n>=0x10000000000000001n,!1,"The result of (0n >= 0x10000000000000001n) is false"),assert.sameValue(-18446744073709551616n>=0n,!1,"The result of (-0x10000000000000000n >= 0n) is false"),assert.sameValue(0n>=-18446744073709551616n,!0,"The result of (0n >= -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551616n>=1n,!1,"The result of (-0x10000000000000000n >= 1n) is false"),assert.sameValue(1n>=-18446744073709551616n,!0,"The result of (1n >= -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551616n>=-1n,!1,"The result of (-0x10000000000000000n >= -1n) is false"),assert.sameValue(-1n>=-18446744073709551616n,!0,"The result of (-1n >= -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551617n>=0n,!1,"The result of (-0x10000000000000001n >= 0n) is false"),assert.sameValue(0n>=-18446744073709551617n,!0,"The result of (0n >= -0x10000000000000001n) is true"),assert.sameValue(0x10000000000000000n>=0x100000000n,!0,"The result of (0x10000000000000000n >= 0x100000000n) is true"),assert.sameValue(0x100000000n>=0x10000000000000000n,!1,"The result of (0x100000000n >= 0x10000000000000000n) is false");


assert.sameValue(0n>=0n,!0,"The result of (0n >= 0n) is true"),assert.sameValue(1n>=1n,!0,"The result of (1n >= 1n) is true"),assert.sameValue(-1n>=-1n,!0,"The result of (-1n >= -1n) is true"),assert.sameValue(0n>=-0n,!0,"The result of (0n >= -0n) is true"),assert.sameValue(-0n>=0n,!0,"The result of (-0n >= 0n) is true"),assert.sameValue(0n>=1n,!1,"The result of (0n >= 1n) is false"),assert.sameValue(1n>=0n,!0,"The result of (1n >= 0n) is true"),assert.sameValue(0n>=-1n,!0,"The result of (0n >= -1n) is true"),assert.sameValue(-1n>=0n,!1,"The result of (-1n >= 0n) is false"),assert.sameValue(1n>=-1n,!0,"The result of (1n >= -1n) is true"),assert.sameValue(-1n>=1n,!1,"The result of (-1n >= 1n) is false"),assert.sameValue(0x1fffffffffffff01n>=0x1fffffffffffff02n,!1,"The result of (0x1fffffffffffff01n >= 0x1fffffffffffff02n) is false"),assert.sameValue(0x1fffffffffffff02n>=0x1fffffffffffff01n,!0,"The result of (0x1fffffffffffff02n >= 0x1fffffffffffff01n) is true"),assert.sameValue(-0x1fffffffffffff01n>=-0x1fffffffffffff02n,!0,"The result of (-0x1fffffffffffff01n >= -0x1fffffffffffff02n) is true"),assert.sameValue(-0x1fffffffffffff02n>=-0x1fffffffffffff01n,!1,"The result of (-0x1fffffffffffff02n >= -0x1fffffffffffff01n) is false"),assert.sameValue(0x10000000000000000n>=0n,!0,"The result of (0x10000000000000000n >= 0n) is true"),assert.sameValue(0n>=0x10000000000000000n,!1,"The result of (0n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>=1n,!0,"The result of (0x10000000000000000n >= 1n) is true"),assert.sameValue(1n>=0x10000000000000000n,!1,"The result of (1n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>=-1n,!0,"The result of (0x10000000000000000n >= -1n) is true"),assert.sameValue(-1n>=0x10000000000000000n,!1,"The result of (-1n >= 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000001n>=0n,!0,"The result of (0x10000000000000001n >= 0n) is true"),assert.sameValue(0n>=0x10000000000000001n,!1,"The result of (0n >= 0x10000000000000001n) is false"),assert.sameValue(-0x10000000000000000n>=0n,!1,"The result of (-0x10000000000000000n >= 0n) is false"),assert.sameValue(0n>=-0x10000000000000000n,!0,"The result of (0n >= -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000000n>=1n,!1,"The result of (-0x10000000000000000n >= 1n) is false"),assert.sameValue(1n>=-0x10000000000000000n,!0,"The result of (1n >= -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000000n>=-1n,!1,"The result of (-0x10000000000000000n >= -1n) is false"),assert.sameValue(-1n>=-0x10000000000000000n,!0,"The result of (-1n >= -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000001n>=0n,!1,"The result of (-0x10000000000000001n >= 0n) is false"),assert.sameValue(0n>=-0x10000000000000001n,!0,"The result of (0n >= -0x10000000000000001n) is true"),assert.sameValue(0x10000000000000000n>=0x100000000n,!0,"The result of (0x10000000000000000n >= 0x100000000n) is true"),assert.sameValue(0x100000000n>=0x10000000000000000n,!1,"The result of (0x100000000n >= 0x10000000000000000n) is false");



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A2.4_T4.js


if((y=1)>=y!==!0)throw new Test262Error("#1: (y = 1) >= y === true");


if(!((y=1)>=y))throw new Test262Error("#1: (y = 1) >= y === true");



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A2.4_T1.js


var x=1;if((x=0)>=x!==!0)throw new Test262Error("#1: var x = 1; (x = 0) >= x === true");var x=0;if(x>=(x=1)!==!1)throw new Test262Error("#2: var x = 0; x >= (x = 1) === false");


var x=1;if(!((x=0)>=x))throw new Test262Error("#1: var x = 1; (x = 0) >= x === true");var x=0;if(x>=(x=1))throw new Test262Error("#2: var x = 0; x >= (x = 1) === false");



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.10_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%C0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 110xxxxx (n = 2) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%C0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 110xxxxx (n = 2) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.12_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%"+String.fromCharCode(indexJ,indexJ)+"%A0%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%"+String.fromCharCode(indexJ,indexJ)+"%A0%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/language/expressions/greater-than-or-equal/S11.8.4_A3.1_T1.2.js


if(new Number(1)>=1!==!0)throw new Test262Error("#2: new Number(1) >= 1 === true");if(1>=new Number(1)!==!0)throw new Test262Error("#3: 1 >= new Number(1) === true");if(new Number(1)>=new Number(1)!==!0)throw new Test262Error("#4: new Number(1) >= new Number(1) === true");


if(!(new Number(1)>=1))throw new Test262Error("#2: new Number(1) >= 1 === true");if(!(1>=new Number(1)))throw new Test262Error("#3: 1 >= new Number(1) === true");if(!(new Number(1)>=new Number(1)))throw new Test262Error("#4: new Number(1) >= new Number(1) === true");



test262/test/built-ins/TypedArray/prototype/findLast/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findLast,"function","implements TypedArray.prototype.findLast"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findLast(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findLast(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLast(()=>{}),new Test262Error("findLast completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findLast,"function","implements TypedArray.prototype.findLast"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findLast(()=>{});try{ab.resize(BPE*3)}catch{}array.findLast(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLast(()=>{}),new Test262Error("findLast completed successfully")})});



test262/test/language/expressions/subtraction/S11.6.2_A2.4_T3.js


try{throw x-(x=1),new Test262Error("#1.1: x - (x = 1) throw ReferenceError. Actual: "+(x-(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x - (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x-(x=1),new Test262Error("#1.1: x - (x = 1) throw ReferenceError. Actual: "+(x-(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x - (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.2_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%1"+String.fromCharCode(indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+2) does not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%1"+String.fromCharCode(indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+2) does not represent hexadecimal digits, throw URIError");



test262/test/built-ins/TypedArray/prototype/findLast/BigInt/return-undefined-if-predicate-returns-false-value.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=sample.findLast(function(){return""});assert.sameValue(result,void 0,"ToBoolean(empty string)");result=sample.findLast(function(){return});assert.sameValue(result,void 0,"ToBoolean(undefined)");result=sample.findLast(function(){return null});assert.sameValue(result,void 0,"ToBoolean(null)");result=sample.findLast(function(){return 0});assert.sameValue(result,void 0,"ToBoolean(0)");result=sample.findLast(function(){return-0});assert.sameValue(result,void 0,"ToBoolean(-0)");result=sample.findLast(function(){return NaN});assert.sameValue(result,void 0,"ToBoolean(NaN)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=sample.findLast(function(){return""}),assert.sameValue(result,void 0,"ToBoolean(empty string)"),result=sample.findLast(function(){}),assert.sameValue(result,void 0,"ToBoolean(undefined)"),result=sample.findLast(function(){return null}),assert.sameValue(result,void 0,"ToBoolean(null)"),result=sample.findLast(function(){return 0}),assert.sameValue(result,void 0,"ToBoolean(0)"),result=sample.findLast(function(){return-0}),assert.sameValue(result,void 0,"ToBoolean(-0)"),result=sample.findLast(function(){return NaN}),assert.sameValue(result,void 0,"ToBoolean(NaN)")});



test262/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/number-tobigint.js


testWithBigIntTypedArrayConstructors(function(TA){var typedArray=new TA(1);assert.throws(TypeError,function(){typedArray[0]=1});assert.throws(TypeError,function(){typedArray[0]=Math.pow(2,63)});assert.throws(TypeError,function(){typedArray[0]=0});assert.throws(TypeError,function(){typedArray[0]=-0});assert.throws(TypeError,function(){typedArray[0]=Infinity});assert.throws(TypeError,function(){typedArray[0]=-1/0});assert.throws(TypeError,function(){typedArray[0]=NaN})});


testWithBigIntTypedArrayConstructors(function(TA){var typedArray=new TA(1);assert.throws(TypeError,function(){typedArray[0]=1}),assert.throws(TypeError,function(){typedArray[0]=Math.pow(2,63)}),assert.throws(TypeError,function(){typedArray[0]=0}),assert.throws(TypeError,function(){typedArray[0]=-0}),assert.throws(TypeError,function(){typedArray[0]=1/0}),assert.throws(TypeError,function(){typedArray[0]=-1/0}),assert.throws(TypeError,function(){typedArray[0]=NaN})});



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.11_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%E0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%E0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Temporal/PlainDateTime/prototype/add/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDateTime.from({year:2e3,month:5,day:2,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDateTime.from({year:2e3,month:5,day:2,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.2_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%"+String.fromCharCode(indexJ)+"1"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+1) does not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%"+String.fromCharCode(indexJ)+"1"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+1) does not represent hexadecimal digits, throw URIError");



test262/test/built-ins/TypedArray/prototype/findLast/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findLast,"function","implements TypedArray.prototype.findLast"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findLast(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findLast(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLast(()=>{}),new Test262Error("findLast completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findLast,"function","implements TypedArray.prototype.findLast"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findLast(()=>{});try{ab.resize(BPE*3)}catch{}array.findLast(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLast(()=>{}),new Test262Error("findLast completed successfully")})});



test262/test/language/expressions/subtraction/S11.6.2_A4_T4.js


if(Number.POSITIVE_INFINITY-1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Infinity - 1 === Infinity. Actual: Infinity");if(-1-Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#2: -1 - Infinity === -Infinity. Actual: -Infinity");if(Number.NEGATIVE_INFINITY-1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: -Infinity - 1 === -Infinity. Actual: -Infinity");if(-1-Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#4: -1 - -Infinity === Infinity. Actual: Infinity");if(Number.POSITIVE_INFINITY-Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity - Number.MAX_VALUE === Infinity. Actual: "+(Infinity-Number.MAX_VALUE));if(-Number.MAX_VALUE-Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#6: -Number.MAX_VALUE - Infinity === I-nfinity. Actual: "+(-Number.MAX_VALUE-Infinity));if(Number.NEGATIVE_INFINITY-Number.MAX_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity - Number.MAX_VALUE === -Infinity. Actual: "+(-1/0-Number.MAX_VALUE));if(-Number.MAX_VALUE-Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#8: -Number.MAX_VALUE - -Infinity === Infinity. Actual: "+(-Number.MAX_VALUE- -1/0));


if(Number.POSITIVE_INFINITY-1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Infinity - 1 === Infinity. Actual: "+(1/0-1));if(-1-Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#2: -1 - Infinity === -Infinity. Actual: "+(-1-1/0));if(Number.NEGATIVE_INFINITY-1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: -Infinity - 1 === -Infinity. Actual: "+(-1/0-1));if(-1-Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#4: -1 - -Infinity === Infinity. Actual: "+(-1- -1/0));if(Number.POSITIVE_INFINITY-Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity - Number.MAX_VALUE === Infinity. Actual: "+(1/0-Number.MAX_VALUE));if(-Number.MAX_VALUE-Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#6: -Number.MAX_VALUE - Infinity === I-nfinity. Actual: "+(-Number.MAX_VALUE-1/0));if(Number.NEGATIVE_INFINITY-Number.MAX_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity - Number.MAX_VALUE === -Infinity. Actual: "+(-1/0-Number.MAX_VALUE));if(-Number.MAX_VALUE-Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#8: -Number.MAX_VALUE - -Infinity === Infinity. Actual: "+(-Number.MAX_VALUE- -1/0));



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A5.3.js


var x=decodeURIComponent.length;verifyNotWritable(decodeURIComponent,"length",null,Infinity);if(decodeURIComponent.length!==x)throw new Test262Error("#1: x = decodeURIComponent.length; decodeURIComponent.length = Infinity; decodeURIComponent.length === x. Actual: "+decodeURIComponent.length);


var x=decodeURIComponent.length;if(verifyNotWritable(decodeURIComponent,"length",null,1/0),decodeURIComponent.length!==x)throw new Test262Error("#1: x = decodeURIComponent.length; decodeURIComponent.length = Infinity; decodeURIComponent.length === x. Actual: "+decodeURIComponent.length);



test262/test/built-ins/TypedArray/prototype/findLast/return-undefined-if-predicate-returns-false-value.js


testWithTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=sample.findLast(function(){return""});assert.sameValue(result,void 0,"ToBoolean(empty string)");result=sample.findLast(function(){return});assert.sameValue(result,void 0,"ToBoolean(undefined)");result=sample.findLast(function(){return null});assert.sameValue(result,void 0,"ToBoolean(null)");result=sample.findLast(function(){return 0});assert.sameValue(result,void 0,"ToBoolean(0)");result=sample.findLast(function(){return-0});assert.sameValue(result,void 0,"ToBoolean(-0)");result=sample.findLast(function(){return NaN});assert.sameValue(result,void 0,"ToBoolean(NaN)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA(3),called=0,result=sample.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=sample.findLast(function(){return""}),assert.sameValue(result,void 0,"ToBoolean(empty string)"),result=sample.findLast(function(){}),assert.sameValue(result,void 0,"ToBoolean(undefined)"),result=sample.findLast(function(){return null}),assert.sameValue(result,void 0,"ToBoolean(null)"),result=sample.findLast(function(){return 0}),assert.sameValue(result,void 0,"ToBoolean(0)"),result=sample.findLast(function(){return-0}),assert.sameValue(result,void 0,"ToBoolean(-0)"),result=sample.findLast(function(){return NaN}),assert.sameValue(result,void 0,"ToBoolean(NaN)")});



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A5.7.js


try{throw new decodeURIComponent,new Test262Error("#1.1: new decodeURIComponent() throw TypeError. Actual: "+new decodeURIComponent)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new decodeURIComponent() throw TypeError. Actual: "+e)}


try{throw new decodeURIComponent,new Test262Error("#1.1: new decodeURIComponent() throw TypeError. Actual: "+new decodeURIComponent)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new decodeURIComponent() throw TypeError. Actual: "+e)}



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A2.1_T1.js


for(var indexI=0;indexI<=65535;indexI++)if(indexI!==37){try{var str=String.fromCharCode(indexI),differs=decodeURIComponent(str)!==str}catch(e){throw new Test262Error("#"+decimalToHexString(indexI)+" throws")}if(differs)throw new Test262Error("#"+decimalToHexString(indexI)+" differs")}


for(var indexI=0;indexI<=65535;indexI++)if(indexI!==37){try{var str=String.fromCharCode(indexI),differs=decodeURIComponent(str)!==str}catch{throw new Test262Error("#"+decimalToHexString(indexI)+" throws")}if(differs)throw new Test262Error("#"+decimalToHexString(indexI)+" differs")}



test262/test/language/expressions/subtraction/S11.6.2_A2.1_T2.js


try{throw x-1,new Test262Error("#1.1: x - 1 throw ReferenceError. Actual: "+(x-1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x - 1 throw ReferenceError. Actual: "+e)}


try{throw x-1,new Test262Error("#1.1: x - 1 throw ReferenceError. Actual: "+(x-1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x - 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.11_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%E0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 7) and  string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%E0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 7) and  string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/tonumber-value-throws.js


testWithBigIntTypedArrayConstructors(function(TA){let sample=new TA([42n]),obj={valueOf(){throw new Test262Error}};assert.throws(Test262Error,function(){sample["0"]=obj},'`sample["0"] = obj` throws Test262Error');assert.throws(Test262Error,function(){sample["1.1"]=obj},'`sample["1.1"] = obj` throws Test262Error');assert.throws(Test262Error,function(){sample["-0"]=obj},'`sample["-0"] = obj` throws Test262Error');assert.throws(Test262Error,function(){sample["-1"]=obj},'`sample["-1"] = obj` throws Test262Error');assert.throws(Test262Error,function(){sample["1"]=obj},'`sample["1"] = obj` throws Test262Error');assert.throws(Test262Error,function(){sample["2"]=obj},'`sample["2"] = obj` throws Test262Error')});


testWithBigIntTypedArrayConstructors(function(TA){let sample=new TA([42n]),obj={valueOf(){throw new Test262Error}};assert.throws(Test262Error,function(){sample[0]=obj},'`sample["0"] = obj` throws Test262Error'),assert.throws(Test262Error,function(){sample["1.1"]=obj},'`sample["1.1"] = obj` throws Test262Error'),assert.throws(Test262Error,function(){sample["-0"]=obj},'`sample["-0"] = obj` throws Test262Error'),assert.throws(Test262Error,function(){sample[-1]=obj},'`sample["-1"] = obj` throws Test262Error'),assert.throws(Test262Error,function(){sample[1]=obj},'`sample["1"] = obj` throws Test262Error'),assert.throws(Test262Error,function(){sample[2]=obj},'`sample["2"] = obj` throws Test262Error')});



test262/test/language/expressions/subtraction/S11.6.2_A2.1_T3.js


try{throw 1-y,new Test262Error("#1.1: 1 - y throw ReferenceError. Actual: "+(1-y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 - y throw ReferenceError. Actual: "+e)}


try{throw 1-y,new Test262Error("#1.1: 1 - y throw ReferenceError. Actual: "+(1-y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 - y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/findLast/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.findLast(function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch(_){secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,secondElement,0],"elements (shrink)");assert.compareArray(indices,[2,1,0],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.findLast(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.findLast(function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch{secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,secondElement,0],"elements (shrink)"),assert.compareArray(indices,[2,1,0],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.findLast(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/language/expressions/subtraction/S11.6.2_A1.js


if(eval("1	-	1")!==0)throw new Test262Error("#1: 1\\u0009-\\u00091 === 0");if(eval("1\v-\v1")!==0)throw new Test262Error("#2: 1\\u000B-\\u000B1 === 0");if(eval("1\f-\f1")!==0)throw new Test262Error("#3: 1\\u000C-\\u000C1 === 0");if(eval("1 - 1")!==0)throw new Test262Error("#4: 1\\u0020-\\u00201 === 0");if(eval("1\xA0-\xA01")!==0)throw new Test262Error("#5: 1\\u00A0-\\u00A01 === 0");if(eval("1\n-\n1")!==0)throw new Test262Error("#6: 1\\u000A-\\u000A1 === 0");if(eval("1\r-\r1")!==0)throw new Test262Error("#7: 1\\u000D-\\u000D1 === 0");if(eval("1\u2028-\u20281")!==0)throw new Test262Error("#8: 1\\u2028-\\u20281 === 0");if(eval("1\u2029-\u20291")!==0)throw new Test262Error("#9: 1\\u2029-\\u20291 === 0");if(eval("1	\v\f \xA0\n\r\u2028\u2029-	\v\f \xA0\n\r\u2028\u20291")!==0)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029-\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 0");


if(eval("1	-	1")!==0)throw new Test262Error("#1: 1\\u0009-\\u00091 === 0");if(eval("1\v-\v1")!==0)throw new Test262Error("#2: 1\\u000B-\\u000B1 === 0");if(eval("1\f-\f1")!==0)throw new Test262Error("#3: 1\\u000C-\\u000C1 === 0");if(eval("1 - 1")!==0)throw new Test262Error("#4: 1\\u0020-\\u00201 === 0");if(eval("1\xA0-\xA01")!==0)throw new Test262Error("#5: 1\\u00A0-\\u00A01 === 0");if(eval(`1
-
1`)!==0)throw new Test262Error("#6: 1\\u000A-\\u000A1 === 0");if(eval("1\r-\r1")!==0)throw new Test262Error("#7: 1\\u000D-\\u000D1 === 0");if(eval("1\u2028-\u20281")!==0)throw new Test262Error("#8: 1\\u2028-\\u20281 === 0");if(eval("1\u2029-\u20291")!==0)throw new Test262Error("#9: 1\\u2029-\\u20291 === 0");if(eval(`1	\v\f \xA0
\r\u2028\u2029-	\v\f \xA0
\r\u2028\u20291`)!==0)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029-\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 0");



test262/test/language/expressions/subtraction/bigint-and-number.js


assert.throws(TypeError,function(){1n-1},"1n - 1 throws TypeError"),assert.throws(TypeError,function(){1-1n},"1 - 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)-1},"Object(1n) - 1 throws TypeError"),assert.throws(TypeError,function(){1-Object(1n)},"1 - Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n-Object(1)},"1n - Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)-1n},"Object(1) - 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)-Object(1)},"Object(1n) - Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)-Object(1n)},"Object(1) - Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n-NaN},"1n - NaN throws TypeError"),assert.throws(TypeError,function(){NaN-1n},"NaN - 1n throws TypeError"),assert.throws(TypeError,function(){1n-Infinity},"1n - Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity-1n},"Infinity - 1n throws TypeError"),assert.throws(TypeError,function(){1n-1},"1n - true throws TypeError"),assert.throws(TypeError,function(){!0-1n},"true - 1n throws TypeError"),assert.throws(TypeError,function(){1n-"1"},'1n - "1" throws TypeError'),assert.throws(TypeError,function(){"1"-1n},'"1" - 1n throws TypeError'),assert.throws(TypeError,function(){1n-null},"1n - null throws TypeError"),assert.throws(TypeError,function(){null-1n},"null - 1n throws TypeError"),assert.throws(TypeError,function(){1n-void 0},"1n - undefined throws TypeError"),assert.throws(TypeError,function(){void 0-1n},"undefined - 1n throws TypeError");


assert.throws(TypeError,function(){1n-1},"1n - 1 throws TypeError"),assert.throws(TypeError,function(){1-1n},"1 - 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)-1},"Object(1n) - 1 throws TypeError"),assert.throws(TypeError,function(){1-Object(1n)},"1 - Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n-Object(1)},"1n - Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)-1n},"Object(1) - 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)-Object(1)},"Object(1n) - Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)-Object(1n)},"Object(1) - Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n-NaN},"1n - NaN throws TypeError"),assert.throws(TypeError,function(){NaN-1n},"NaN - 1n throws TypeError"),assert.throws(TypeError,function(){1n-1/0},"1n - Infinity throws TypeError"),assert.throws(TypeError,function(){1/0-1n},"Infinity - 1n throws TypeError"),assert.throws(TypeError,function(){1n-!0},"1n - true throws TypeError"),assert.throws(TypeError,function(){!0-1n},"true - 1n throws TypeError"),assert.throws(TypeError,function(){1n-"1"},'1n - "1" throws TypeError'),assert.throws(TypeError,function(){"1"-1n},'"1" - 1n throws TypeError'),assert.throws(TypeError,function(){1n-null},"1n - null throws TypeError"),assert.throws(TypeError,function(){null-1n},"null - 1n throws TypeError"),assert.throws(TypeError,function(){1n-void 0},"1n - undefined throws TypeError"),assert.throws(TypeError,function(){void 0-1n},"undefined - 1n throws TypeError");



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.12_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%A0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%A0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/decodeURIComponent/S15.1.3.2_A1.12_T3.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%A0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURIComponent("%F0%A0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/TypedArrayConstructors/internals/Set/tonumber-value-throws.js


testWithTypedArrayConstructors(function(TA){let sample=new TA([42]),obj={valueOf(){throw new Test262Error}};assert.throws(Test262Error,function(){sample["0"]=obj});assert.throws(Test262Error,function(){sample["1.1"]=obj});assert.throws(Test262Error,function(){sample["-0"]=obj});assert.throws(Test262Error,function(){sample["-1"]=obj});assert.throws(Test262Error,function(){sample["1"]=obj});assert.throws(Test262Error,function(){sample["2"]=obj})});


testWithTypedArrayConstructors(function(TA){let sample=new TA([42]),obj={valueOf(){throw new Test262Error}};assert.throws(Test262Error,function(){sample[0]=obj}),assert.throws(Test262Error,function(){sample["1.1"]=obj}),assert.throws(Test262Error,function(){sample["-0"]=obj}),assert.throws(Test262Error,function(){sample[-1]=obj}),assert.throws(Test262Error,function(){sample[1]=obj}),assert.throws(Test262Error,function(){sample[2]=obj})});



test262/test/language/expressions/array/spread-sngl-empty.js


var callCount=0;(function(){assert.sameValue(arguments.length,0),callCount+=1}).apply(null,[...[]]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,0),callCount+=1}).apply(null,[]),assert.sameValue(callCount,1);



test262/test/language/expressions/array/spread-mult-literal.js


var callCount=0;(function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1}).apply(null,[5,...[6,7,8],9]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1}).apply(null,[5,6,7,8,9]),assert.sameValue(callCount,1);



test262/test/built-ins/Temporal/ZonedDateTime/compare/infinity-throws-rangeerror.js


const other=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,[prop]:obj1},other));assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,[prop]:obj2}));assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const other=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,[prop]:obj1},other)),assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,[prop]:obj2})),assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/indexOf/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.indexOf,"function","implements TypedArray.prototype.indexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.indexOf(0n);try{ab.resize(BPE*3)}catch(_){}array.indexOf(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.indexOf(0n),new Test262Error("indexOf completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.indexOf,"function","implements TypedArray.prototype.indexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.indexOf(0n);try{ab.resize(BPE*3)}catch{}array.indexOf(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.indexOf(0n),new Test262Error("indexOf completed successfully")})});



test262/test/language/expressions/array/spread-obj-undefined.js


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}).apply(null,[{...void 0}]);assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}).apply(null,[{}]),assert.sameValue(callCount,1);



test262/test/language/expressions/array/spread-obj-null.js


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}).apply(null,[{...null}]);assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}).apply(null,[{}]),assert.sameValue(callCount,1);



test262/test/built-ins/TypedArray/prototype/indexOf/BigInt/fromIndex-infinity.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.indexOf(43n,Infinity),-1,"indexOf(43, Infinity)");assert.sameValue(sample.indexOf(43n,-1/0),1,"indexOf(43, -Infinity)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.indexOf(43n,1/0),-1,"indexOf(43, Infinity)"),assert.sameValue(sample.indexOf(43n,-1/0),1,"indexOf(43, -Infinity)")});



test262/test/language/expressions/array/spread-mult-obj-null.js


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}).apply(null,[{a:1,b:2,...null}]);assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}).apply(null,[{a:1,b:2}]),assert.sameValue(callCount,1);



test262/test/language/expressions/array/S11.1.4_A1.3.js


var array=[1,2,3,4,5];if(typeof array!="object")throw new Test262Error('#1: var array = [1,2,3,4,5]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [1,2,3,4,5]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [1,2,3,4,5]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [1,2,3,4,5]; array.length === 5. Actual: "+array.length);if(array[0]!==1)throw new Test262Error("#5: var array = [1,2,3,4,5]; array[0] === 1. Actual: "+array[0]);if(array[1]!==2)throw new Test262Error("#6: var array = [1,2,3,4,5]; array[1] === 2. Actual: "+array[1]);if(array[2]!==3)throw new Test262Error("#7: var array = [1,2,3,4,5]; array[2] === 3. Actual: "+array[2]);if(array[3]!==4)throw new Test262Error("#8: var array = [1,2,3,4,5]; array[3] === 4. Actual: "+array[3]);if(array[4]!==5)throw new Test262Error("#9: var array = [1,2,3,4,5]; array[4] === 5. Actual: "+array[4]);


var array=[1,2,3,4,5];if(typeof array!="object")throw new Test262Error('#1: var array = [1,2,3,4,5]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [1,2,3,4,5]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [1,2,3,4,5]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [1,2,3,4,5]; array.length === 5. Actual: "+array.length);if(array[0]!==1)throw new Test262Error("#5: var array = [1,2,3,4,5]; array[0] === 1. Actual: "+array[0]);if(array[1]!==2)throw new Test262Error("#6: var array = [1,2,3,4,5]; array[1] === 2. Actual: "+array[1]);if(array[2]!==3)throw new Test262Error("#7: var array = [1,2,3,4,5]; array[2] === 3. Actual: "+array[2]);if(array[3]!==4)throw new Test262Error("#8: var array = [1,2,3,4,5]; array[3] === 4. Actual: "+array[3]);if(array[4]!==5)throw new Test262Error("#9: var array = [1,2,3,4,5]; array[4] === 5. Actual: "+array[4]);



test262/test/language/expressions/array/spread-sngl-literal.js


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1}).apply(null,[...[3,4,5]]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1}).apply(null,[3,4,5]),assert.sameValue(callCount,1);



test262/test/language/expressions/array/S11.1.4_A1.7.js


var array=[1,2,,4,5];if(typeof array!="object")throw new Test262Error('#1: var array = [1,2,,4,5]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [1,2,,4,5]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [1,2,,4,5]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [1,2,,4,5]; array.length === 5. Actual: "+array.length);if(array[0]!==1)throw new Test262Error("#5: var array = [1,2,,4,5]; array[0] === 1. Actual: "+array[0]);if(array[1]!==2)throw new Test262Error("#6: var array = [1,2,,4,5]; array[1] === 2. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [1,2,,4,5]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==4)throw new Test262Error("#8: var array = [1,2,,4,5]; array[3] === 4. Actual: "+array[3]);if(array[4]!==5)throw new Test262Error("#9: var array = [1,2,,4,5]; array[4] === 5. Actual: "+array[4]);


var array=[1,2,,4,5];if(typeof array!="object")throw new Test262Error('#1: var array = [1,2,,4,5]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [1,2,,4,5]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [1,2,,4,5]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [1,2,,4,5]; array.length === 5. Actual: "+array.length);if(array[0]!==1)throw new Test262Error("#5: var array = [1,2,,4,5]; array[0] === 1. Actual: "+array[0]);if(array[1]!==2)throw new Test262Error("#6: var array = [1,2,,4,5]; array[1] === 2. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [1,2,,4,5]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==4)throw new Test262Error("#8: var array = [1,2,,4,5]; array[3] === 4. Actual: "+array[3]);if(array[4]!==5)throw new Test262Error("#9: var array = [1,2,,4,5]; array[4] === 5. Actual: "+array[4]);



test262/test/built-ins/TypedArray/prototype/indexOf/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.indexOf,"function","implements TypedArray.prototype.indexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.indexOf(0);try{ab.resize(BPE*3)}catch(_){}array.indexOf(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.indexOf(0),new Test262Error("indexOf completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.indexOf,"function","implements TypedArray.prototype.indexOf"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.indexOf(0);try{ab.resize(BPE*3)}catch{}array.indexOf(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.indexOf(0),new Test262Error("indexOf completed successfully")})});



test262/test/built-ins/String/prototype/toLocaleUpperCase/S15.5.4.19_A1_T8.js


if(Number.prototype.toLocaleUpperCase=String.prototype.toLocaleUpperCase,Infinity.toLocaleUpperCase()!=="INFINITY")throw new Test262Error('#1: Number.prototype.toLocaleUpperCase = String.prototype.toLocaleUpperCase; Infinity.toLocaleUpperCase()=== "INFINITY". Actual: '+Infinity.toLocaleUpperCase());


if(Number.prototype.toLocaleUpperCase=String.prototype.toLocaleUpperCase,(1/0).toLocaleUpperCase()!=="INFINITY")throw new Test262Error('#1: Number.prototype.toLocaleUpperCase = String.prototype.toLocaleUpperCase; Infinity.toLocaleUpperCase()=== "INFINITY". Actual: '+(1/0).toLocaleUpperCase());



test262/test/language/expressions/array/spread-mult-obj-undefined.js


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}).apply(null,[{a:1,b:2,...void 0}]);assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}).apply(null,[{a:1,b:2}]),assert.sameValue(callCount,1);



test262/test/built-ins/String/prototype/toLocaleUpperCase/S15.5.4.19_A7.js


var __FACTORY=String.prototype.toLocaleUpperCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.toLocaleUpperCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.1:  var __instance = new __FACTORY;  Object has no construct lead  a TypeError. Actual: "+e)}


var __FACTORY=String.prototype.toLocaleUpperCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.toLocaleUpperCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.1:  var __instance = new __FACTORY;  Object has no construct lead  a TypeError. Actual: "+e)}



test262/test/language/expressions/array/S11.1.4_A1.6.js


var array=[,,3,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [,,3,,,]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [,,3,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,3,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,3,,,]; array.length === 5. Actual: "+array.length);if(array[0]!==void 0)throw new Test262Error("#5: var array = [,,3,,,]; array[0] === undefined. Actual: "+array[0]);if(array[1]!==void 0)throw new Test262Error("#6: var array = [,,3,,,]; array[1] === undefined. Actual: "+array[1]);if(array[2]!==3)throw new Test262Error("#7: var array = [,,3,,,]; array[2] === 3. Actual: "+array[2]);if(array[3]!==void 0)throw new Test262Error("#8: var array = [,,3,,,]; array[3] === undefined. Actual: "+array[3]);if(array[4]!==void 0)throw new Test262Error("#9: var array = [,,3,,,]; array[4] === undefined. Actual: "+array[4]);


var array=[,,3,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [,,3,,,]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [,,3,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,3,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,3,,,]; array.length === 5. Actual: "+array.length);if(array[0]!==void 0)throw new Test262Error("#5: var array = [,,3,,,]; array[0] === undefined. Actual: "+array[0]);if(array[1]!==void 0)throw new Test262Error("#6: var array = [,,3,,,]; array[1] === undefined. Actual: "+array[1]);if(array[2]!==3)throw new Test262Error("#7: var array = [,,3,,,]; array[2] === 3. Actual: "+array[2]);if(array[3]!==void 0)throw new Test262Error("#8: var array = [,,3,,,]; array[3] === undefined. Actual: "+array[3]);if(array[4]!==void 0)throw new Test262Error("#9: var array = [,,3,,,]; array[4] === undefined. Actual: "+array[4]);



test262/test/built-ins/TypedArray/prototype/indexOf/fromIndex-infinity.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.indexOf(43,Infinity),-1,"indexOf(43, Infinity)");assert.sameValue(sample.indexOf(43,-1/0),1,"indexOf(43, -Infinity)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.indexOf(43,1/0),-1,"indexOf(43, Infinity)"),assert.sameValue(sample.indexOf(43,-1/0),1,"indexOf(43, -Infinity)")});



test262/test/language/expressions/array/S11.1.4_A1.2.js


var array=[,,,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [,,,,,]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [,,,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,,,,]; array.length === 5. Actual: "+array.length);


var array=[,,,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [,,,,,]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [,,,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,,,,]; array.length === 5. Actual: "+array.length);



test262/test/language/expressions/array/spread-err-mult-err-obj-unresolvable.js


assert.throws(ReferenceError,function(){({a:0,...unresolvableReference})});


assert.throws(ReferenceError,function(){({...unresolvableReference})});



test262/test/language/expressions/array/S11.1.4_A1.5.js


var array=[4,5,,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [4,5,,,,]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [4,5,,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [4,5,,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [4,5,,,,]; array.length === 5. Actual: "+array.length);if(array[0]!==4)throw new Test262Error("#5: var array = [4,5,,,,]; array[0] === 4. Actual: "+array[0]);if(array[1]!==5)throw new Test262Error("#6: var array = [4,5,,,,]; array[1] === 5. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [4,5,,,,]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==void 0)throw new Test262Error("#8: var array = [4,5,,,,]; array[3] === undefined. Actual: "+array[3]);if(array[4]!==void 0)throw new Test262Error("#9: var array = [4,5,,,,]; array[4] === undefined. Actual: "+array[4]);


var array=[4,5,,,,];if(typeof array!="object")throw new Test262Error('#1: var array = [4,5,,,,]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [4,5,,,,]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [4,5,,,,]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [4,5,,,,]; array.length === 5. Actual: "+array.length);if(array[0]!==4)throw new Test262Error("#5: var array = [4,5,,,,]; array[0] === 4. Actual: "+array[0]);if(array[1]!==5)throw new Test262Error("#6: var array = [4,5,,,,]; array[1] === 5. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [4,5,,,,]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==void 0)throw new Test262Error("#8: var array = [4,5,,,,]; array[3] === undefined. Actual: "+array[3]);if(array[4]!==void 0)throw new Test262Error("#9: var array = [4,5,,,,]; array[4] === undefined. Actual: "+array[4]);



test262/test/language/expressions/array/S11.1.4_A1.1.js


var array=[];if(typeof array!="object")throw new Test262Error('#1: var array = []; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = []; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = []; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==0)throw new Test262Error("#4: var array = []; array.length === 0. Actual: "+array.length);


var array=[];if(typeof array!="object")throw new Test262Error('#1: var array = []; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = []; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = []; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==0)throw new Test262Error("#4: var array = []; array.length === 0. Actual: "+array.length);



test262/test/language/expressions/array/S11.1.4_A1.4.js


var array=[,,,1,2];if(typeof array!="object")throw new Test262Error('#1: var array = [,,,1,2]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [,,,1,2]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,,1,2]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,,1,2]; array.length === 5. Actual: "+array.length);if(array[0]!==void 0)throw new Test262Error("#5: var array = [,,,1,2]; array[0] === undefined. Actual: "+array[0]);if(array[1]!==void 0)throw new Test262Error("#6: var array = [,,,1,2]; array[1] === undefined. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [,,,1,2]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==1)throw new Test262Error("#8: var array = [,,,1,2]; array[3] === 1. Actual: "+array[3]);if(array[4]!==2)throw new Test262Error("#9: var array = [,,,1,2]; array[4] === 2. Actual: "+array[4]);


var array=[,,,1,2];if(typeof array!="object")throw new Test262Error('#1: var array = [,,,1,2]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [,,,1,2]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [,,,1,2]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==5)throw new Test262Error("#4: var array = [,,,1,2]; array.length === 5. Actual: "+array.length);if(array[0]!==void 0)throw new Test262Error("#5: var array = [,,,1,2]; array[0] === undefined. Actual: "+array[0]);if(array[1]!==void 0)throw new Test262Error("#6: var array = [,,,1,2]; array[1] === undefined. Actual: "+array[1]);if(array[2]!==void 0)throw new Test262Error("#7: var array = [,,,1,2]; array[2] === undefined. Actual: "+array[2]);if(array[3]!==1)throw new Test262Error("#8: var array = [,,,1,2]; array[3] === 1. Actual: "+array[3]);if(array[4]!==2)throw new Test262Error("#9: var array = [,,,1,2]; array[4] === 2. Actual: "+array[4]);



test262/test/built-ins/Temporal/PlainMonthDay/from/infinity-throws-rangeerror.js


const base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainMonthDay.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainMonthDay.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainMonthDay.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainMonthDay.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/language/expressions/array/S11.1.4_A2.js


var array=[[1,2],[3],[]];if(typeof array!="object")throw new Test262Error('#1: var array = [[1,2], [3], []]; typeof array === "object". Actual: '+typeof array);if(array instanceof Array!==!0)throw new Test262Error("#2: var array = [[1,2], [3], []]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [[1,2], [3], []]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==3)throw new Test262Error("#4: var array = [[1,2], [3], []]; array.length === 3. Actual: "+array.length);var subarray=array[0];if(typeof subarray!="object")throw new Test262Error('#5: var array = [[1,2], [3], []]; var subarray = array[0]; typeof subarray === "object". Actual: '+typeof subarray);if(subarray instanceof Array!==!0)throw new Test262Error("#6: var array = [[1,2], [3], []]; var subarray = array[0]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#7: var array = [[1,2], [3], []]; var subarray = array[0]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==2)throw new Test262Error("#8: var array = [[1,2], [3], []]; var subarray = array[0]; subarray.length === 2. Actual: "+subarray.length);if(subarray[0]!==1)throw new Test262Error("#9: var array = [[1,2], [3], []]; var subarray = array[0]; subarray[0] === 1. Actual: "+subarray[0]);if(subarray[1]!==2)throw new Test262Error("#10: var array = [[1,2], [3], []]; var subarray = array[1]; subarray[1] === 2. Actual: "+subarray[1]);var subarray=array[1];if(typeof subarray!="object")throw new Test262Error('#11: var array = [[1,2], [3], []]; var subarray = array[1]; typeof subarray === "object". Actual: '+typeof subarray);if(subarray instanceof Array!==!0)throw new Test262Error("#12: var array = [[1,2], [3], []]; var subarray = array[1]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#13: var array = [[1,2], [3], []]; var subarray = array[1]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==1)throw new Test262Error("#14: var array = [[1,2], [3], []]; var subarray = array[1]; subarray.length === 1. Actual: "+subarray.length);if(subarray[0]!==3)throw new Test262Error("#15: var array = [[1,2], [3], []]; var subarray = array[1]; subarray[0] === 3. Actual: "+subarray[0]);var subarray=array[2];if(typeof subarray!="object")throw new Test262Error('#16: var array = [[1,2], [3], []]; var subarray = array[2]; typeof subarray === "object". Actual: '+typeof subarray);if(subarray instanceof Array!==!0)throw new Test262Error("#17: var array = [[1,2], [3], []]; var subarray = array[2]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#18: var array = [[1,2], [3], []]; var subarray = array[2]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==0)throw new Test262Error("#19: var array = [[1,2], [3], []]; var subarray = array[2]; subarray.length === 0. Actual: "+subarray.length);if(array[0][0]!==1)throw new Test262Error("#20: var array = [[1,2], [3], []]; array[0][0] === 1. Actual: "+array[0][0]);if(array[0][1]!==2)throw new Test262Error("#21: var array = [[1,2], [3], []]; array[0][1] === 2. Actual: "+array[0][1]);if(array[1][0]!==3)throw new Test262Error("#722: var array = [[1,2], [3], []]; array[1][0] === 3. Actual: "+array[1][0]);


var array=[[1,2],[3],[]];if(typeof array!="object")throw new Test262Error('#1: var array = [[1,2], [3], []]; typeof array === "object". Actual: '+typeof array);if(!(array instanceof Array))throw new Test262Error("#2: var array = [[1,2], [3], []]; array instanceof Array === true");if(array.toString!==Array.prototype.toString)throw new Test262Error("#3: var array = [[1,2], [3], []]; array.toString === Array.prototype.toString. Actual: "+array.toString);if(array.length!==3)throw new Test262Error("#4: var array = [[1,2], [3], []]; array.length === 3. Actual: "+array.length);var subarray=array[0];if(typeof subarray!="object")throw new Test262Error('#5: var array = [[1,2], [3], []]; var subarray = array[0]; typeof subarray === "object". Actual: '+typeof subarray);if(!(subarray instanceof Array))throw new Test262Error("#6: var array = [[1,2], [3], []]; var subarray = array[0]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#7: var array = [[1,2], [3], []]; var subarray = array[0]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==2)throw new Test262Error("#8: var array = [[1,2], [3], []]; var subarray = array[0]; subarray.length === 2. Actual: "+subarray.length);if(subarray[0]!==1)throw new Test262Error("#9: var array = [[1,2], [3], []]; var subarray = array[0]; subarray[0] === 1. Actual: "+subarray[0]);if(subarray[1]!==2)throw new Test262Error("#10: var array = [[1,2], [3], []]; var subarray = array[1]; subarray[1] === 2. Actual: "+subarray[1]);var subarray=array[1];if(typeof subarray!="object")throw new Test262Error('#11: var array = [[1,2], [3], []]; var subarray = array[1]; typeof subarray === "object". Actual: '+typeof subarray);if(!(subarray instanceof Array))throw new Test262Error("#12: var array = [[1,2], [3], []]; var subarray = array[1]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#13: var array = [[1,2], [3], []]; var subarray = array[1]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==1)throw new Test262Error("#14: var array = [[1,2], [3], []]; var subarray = array[1]; subarray.length === 1. Actual: "+subarray.length);if(subarray[0]!==3)throw new Test262Error("#15: var array = [[1,2], [3], []]; var subarray = array[1]; subarray[0] === 3. Actual: "+subarray[0]);var subarray=array[2];if(typeof subarray!="object")throw new Test262Error('#16: var array = [[1,2], [3], []]; var subarray = array[2]; typeof subarray === "object". Actual: '+typeof subarray);if(!(subarray instanceof Array))throw new Test262Error("#17: var array = [[1,2], [3], []]; var subarray = array[2]; subarray instanceof Array === true");if(subarray.toString!==Array.prototype.toString)throw new Test262Error("#18: var array = [[1,2], [3], []]; var subarray = array[2]; subarray.toString === Array.prototype.toString. Actual: "+subarray.toString);if(subarray.length!==0)throw new Test262Error("#19: var array = [[1,2], [3], []]; var subarray = array[2]; subarray.length === 0. Actual: "+subarray.length);if(array[0][0]!==1)throw new Test262Error("#20: var array = [[1,2], [3], []]; array[0][0] === 1. Actual: "+array[0][0]);if(array[0][1]!==2)throw new Test262Error("#21: var array = [[1,2], [3], []]; array[0][1] === 2. Actual: "+array[0][1]);if(array[1][0]!==3)throw new Test262Error("#722: var array = [[1,2], [3], []]; array[1][0] === 3. Actual: "+array[1][0]);



test262/test/built-ins/String/prototype/startsWith/return-true-if-searchstring-is-empty.js


var str="The future is cool!";assert(str.startsWith(""),'str.startsWith("") returns true');assert(str.startsWith("",str.length),'str.startsWith("", str.length) returns true');assert(str.startsWith(""),'str.startsWith("") returns true');assert(str.startsWith("",Infinity),'str.startsWith("", Infinity) returns true');


var str="The future is cool!";assert(str.startsWith(""),'str.startsWith("") returns true'),assert(str.startsWith("",str.length),'str.startsWith("", str.length) returns true'),assert(str.startsWith(""),'str.startsWith("") returns true'),assert(str.startsWith("",1/0),'str.startsWith("", Infinity) returns true');



test262/test/language/expressions/array/spread-mult-empty.js


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1}).apply(null,[1,2,3,...[]]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1}).apply(null,[1,2,3]),assert.sameValue(callCount,1);



test262/test/built-ins/String/prototype/startsWith/out-of-bounds-position.js


var str="The future is cool!";assert.sameValue(str.startsWith("!",str.length),!1,'str.startsWith("!", str.length) returns false');assert.sameValue(str.startsWith("!",100),!1,'str.startsWith("!", 100) returns false');assert.sameValue(str.startsWith("!",Infinity),!1,'str.startsWith("!", Infinity) returns false');assert(str.startsWith("The future",-1),"position argument < 0 will search from the start of the string (-1)");assert(str.startsWith("The future",-1/0),"position argument < 0 will search from the start of the string (-Infinity)");


var str="The future is cool!";assert.sameValue(str.startsWith("!",str.length),!1,'str.startsWith("!", str.length) returns false'),assert.sameValue(str.startsWith("!",100),!1,'str.startsWith("!", 100) returns false'),assert.sameValue(str.startsWith("!",1/0),!1,'str.startsWith("!", Infinity) returns false'),assert(str.startsWith("The future",-1),"position argument < 0 will search from the start of the string (-1)"),assert(str.startsWith("The future",-1/0),"position argument < 0 will search from the start of the string (-Infinity)");



test262/test/built-ins/TypedArray/prototype/forEach/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.forEach,"function","implements TypedArray.prototype.forEach"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.forEach(()=>{});try{ab.resize(BPE*3)}catch(_){}array.forEach(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.forEach(()=>{}),new Test262Error("forEach completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.forEach,"function","implements TypedArray.prototype.forEach"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.forEach(()=>{});try{ab.resize(BPE*3)}catch{}array.forEach(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.forEach(()=>{}),new Test262Error("forEach completed successfully")})});



test262/test/language/expressions/prefix-increment/bigint.js


var x=0n;assert.sameValue(++x,1n,"var x = 0n; ++x === 1n");assert.sameValue(x,1n,"var x = 0n; ++x; x === 1n");var x=-1n;assert.sameValue(++x,0n,"var x = -1n; ++x === 0n");assert.sameValue(x,0n,"var x = -1n; ++x; x === 0n");var x=123456n;assert.sameValue(++x,123457n,"var x = 123456n; ++x === 123457n");assert.sameValue(x,123457n,"var x = 123456n; ++x; x === 123457n");var x=-123457n;assert.sameValue(++x,-123456n,"var x = -123457n; ++x === -123456n");assert.sameValue(x,-123456n,"var x = -123457n; ++x; x === -123456n");var x=0x1fffffffffffff00n;assert.sameValue(++x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; ++x === 0x1fffffffffffff01n");assert.sameValue(x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; ++x; x === 0x1fffffffffffff01n");var x=-2305843009213693697n;assert.sameValue(++x,-2305843009213693696n,"var x = -0x1fffffffffffff01n; ++x === -0x1fffffffffffff00n");assert.sameValue(x,-2305843009213693696n,"var x = -0x1fffffffffffff01n; ++x; x === -0x1fffffffffffff00n");var x={y:0n};assert.sameValue(++x.y,1n,"var x = {y:0n}; ++x.y === 1n");assert.sameValue(x.y,1n,"var x = {y:0n}; ++x.y; x.y === 1n");var x={y:{z:0n}};assert.sameValue(++x.y.z,1n,"var x = {y:{z:0n}}; ++x.y.z === 1n");assert.sameValue(x.y.z,1n,"var x = {y:{z:0n}}; ++x.y.z; x.y.z === 1n");var x=[0n];assert.sameValue(++x[0],1n,"var x = [0n]; ++x[0] === 1n");assert.sameValue(x[0],1n,"var x = [0n]; ++x[0]; x[0] === 1n");var x=[null,[null,null,0n]];assert.sameValue(++x[1][2],1n,"var x = [null, [null, null, 0n]]; ++x[1][2] === 1n");assert.sameValue(x[1][2],1n,"var x = [null, [null, null, 0n]]; ++x[1][2]; x[1][2] === 1n");var x={y:[0n]};assert.sameValue(++x.y[0],1n,"var x = {y:[0n]}; ++x.y[0] === 1n");assert.sameValue(x.y[0],1n,"var x = {y:[0n]}; ++x.y[0]; x.y[0] === 1n");var x=[{z:0n}];assert.sameValue(++x[0].z,1n,"var x = [{z:0n}]; ++x[0].z === 1n");assert.sameValue(x[0].z,1n,"var x = [{z:0n}]; ++x[0].z; x[0].z === 1n");


var x=0n;assert.sameValue(++x,1n,"var x = 0n; ++x === 1n"),assert.sameValue(x,1n,"var x = 0n; ++x; x === 1n");var x=-1n;assert.sameValue(++x,0n,"var x = -1n; ++x === 0n"),assert.sameValue(x,0n,"var x = -1n; ++x; x === 0n");var x=123456n;assert.sameValue(++x,123457n,"var x = 123456n; ++x === 123457n"),assert.sameValue(x,123457n,"var x = 123456n; ++x; x === 123457n");var x=-123457n;assert.sameValue(++x,-123456n,"var x = -123457n; ++x === -123456n"),assert.sameValue(x,-123456n,"var x = -123457n; ++x; x === -123456n");var x=0x1fffffffffffff00n;assert.sameValue(++x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; ++x === 0x1fffffffffffff01n"),assert.sameValue(x,0x1fffffffffffff01n,"var x = 0x1fffffffffffff00n; ++x; x === 0x1fffffffffffff01n");var x=-0x1fffffffffffff01n;assert.sameValue(++x,-0x1fffffffffffff00n,"var x = -0x1fffffffffffff01n; ++x === -0x1fffffffffffff00n"),assert.sameValue(x,-0x1fffffffffffff00n,"var x = -0x1fffffffffffff01n; ++x; x === -0x1fffffffffffff00n");var x={y:0n};assert.sameValue(++x.y,1n,"var x = {y:0n}; ++x.y === 1n"),assert.sameValue(x.y,1n,"var x = {y:0n}; ++x.y; x.y === 1n");var x={y:{z:0n}};assert.sameValue(++x.y.z,1n,"var x = {y:{z:0n}}; ++x.y.z === 1n"),assert.sameValue(x.y.z,1n,"var x = {y:{z:0n}}; ++x.y.z; x.y.z === 1n");var x=[0n];assert.sameValue(++x[0],1n,"var x = [0n]; ++x[0] === 1n"),assert.sameValue(x[0],1n,"var x = [0n]; ++x[0]; x[0] === 1n");var x=[null,[null,null,0n]];assert.sameValue(++x[1][2],1n,"var x = [null, [null, null, 0n]]; ++x[1][2] === 1n"),assert.sameValue(x[1][2],1n,"var x = [null, [null, null, 0n]]; ++x[1][2]; x[1][2] === 1n");var x={y:[0n]};assert.sameValue(++x.y[0],1n,"var x = {y:[0n]}; ++x.y[0] === 1n"),assert.sameValue(x.y[0],1n,"var x = {y:[0n]}; ++x.y[0]; x.y[0] === 1n");var x=[{z:0n}];assert.sameValue(++x[0].z,1n,"var x = [{z:0n}]; ++x[0].z === 1n"),assert.sameValue(x[0].z,1n,"var x = [{z:0n}]; ++x[0].z; x[0].z === 1n");



test262/test/language/expressions/prefix-increment/S11.4.4_A2.1_T2.js


try{throw++x,new Test262Error("#1.1: ++x throw ReferenceError. Actual: "+ ++x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: ++x throw ReferenceError. Actual: "+e)}


try{throw++x,new Test262Error("#1.1: ++x throw ReferenceError. Actual: "+ ++x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: ++x throw ReferenceError. Actual: "+e)}



test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-larger-size.js


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(5)}catch(_){}assert.sameValue(result,void 0,"normal completion value");


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(5)}catch{}assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/TypedArray/prototype/forEach/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.forEach,"function","implements TypedArray.prototype.forEach"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.forEach(()=>{});try{ab.resize(BPE*3)}catch(_){}array.forEach(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.forEach(()=>{}),new Test262Error("forEach completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.forEach,"function","implements TypedArray.prototype.forEach"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.forEach(()=>{});try{ab.resize(BPE*3)}catch{}array.forEach(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.forEach(()=>{}),new Test262Error("forEach completed successfully")})});



test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-same-size.js


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(4)}catch(_){}assert.sameValue(result,void 0,"normal completion value");


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(4)}catch{}assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/TypedArray/prototype/forEach/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.forEach(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array)});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.forEach(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array)});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.forEach(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element),indices.push(index),arrays.push(array)}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.forEach(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}elements.push(element),indices.push(index),arrays.push(array)}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/built-ins/Array/prototype/every/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.every.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.sameValue(result,!0,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.every.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,!0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.every.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.sameValue(result,!0,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.every.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,!0,"result (grow)")});



test262/test/built-ins/Temporal/Instant/prototype/subtract/infinity-throws-rangeerror.js


const fields=["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.Instant.fromEpochMilliseconds(1e4);fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.Instant.fromEpochMilliseconds(1e4);fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-smaller-size.js


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(3)}catch(_){}assert.sameValue(result,void 0,"normal completion value");


var sab=new SharedArrayBuffer(4,{maxByteLength:5}),result;assert.sameValue(typeof sab.grow,"function");try{result=ab.grow(3)}catch{}assert.sameValue(result,void 0,"normal completion value");



test262/test/language/expressions/does-not-equals/S11.9.2_A2.1_T1.js


var x=1;if(x!=1!==!1)throw new Test262Error("#2: var x = 1; (x != 1) === false");var y=1;if(1!=y!==!1)throw new Test262Error("#3: var y = 1; (1 != y) === false");var x=1,y=1;if(x!=y!==!1)throw new Test262Error("#4: var x = 1; var y = 1; (x != y) === false");var objectx={},objecty={};objectx.prop=1;objecty.prop=1;if(objectx.prop!=objecty.prop!==!1)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop != objecty.prop) === false");


var x=1;if(x!=1)throw new Test262Error("#2: var x = 1; (x != 1) === false");var y=1;if(y!=1)throw new Test262Error("#3: var y = 1; (1 != y) === false");var x=1,y=1;if(x!=y)throw new Test262Error("#4: var x = 1; var y = 1; (x != y) === false");var objectx=new Object,objecty=new Object;if(objectx.prop=1,objecty.prop=1,objectx.prop!=objecty.prop)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop != objecty.prop) === false");



test262/test/language/expressions/does-not-equals/S11.9.2_A1.js


if(eval("true	!=	1")!==!1)throw new Test262Error("#1: (true\\u0009!=\\u00091) === false");if(eval("true\v!=\v1")!==!1)throw new Test262Error("#2: (true\\u000B!=\\u000B1) === false");if(eval("true\f!=\f1")!==!1)throw new Test262Error("#3: (true\\u000C!=\\u000C1) === false");if(eval("true != 1")!==!1)throw new Test262Error("#4: (true\\u0020!=\\u00201) === false");if(eval("true\xA0!=\xA01")!==!1)throw new Test262Error("#5: (true\\u00A0!=\\u00A01) === false");if(eval("true\n!=\n1")!==!1)throw new Test262Error("#6: (true\\u000A!=\\u000A1) === false");if(eval("true\r!=\r1")!==!1)throw new Test262Error("#7: (true\\u000D!=\\u000D1) === false");if(eval("true\u2028!=\u20281")!==!1)throw new Test262Error("#8: (true\\u2028!=\\u20281) === false");if(eval("true\u2029!=\u20291")!==!1)throw new Test262Error("#9: (true\\u2029!=\\u20291) === false");if(eval("true	\v\f \xA0\n\r\u2028\u2029!=	\v\f \xA0\n\r\u2028\u20291")!==!1)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029!=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === false");


if(eval("true	!=	1")!==!1)throw new Test262Error("#1: (true\\u0009!=\\u00091) === false");if(eval("true\v!=\v1")!==!1)throw new Test262Error("#2: (true\\u000B!=\\u000B1) === false");if(eval("true\f!=\f1")!==!1)throw new Test262Error("#3: (true\\u000C!=\\u000C1) === false");if(eval("true != 1")!==!1)throw new Test262Error("#4: (true\\u0020!=\\u00201) === false");if(eval("true\xA0!=\xA01")!==!1)throw new Test262Error("#5: (true\\u00A0!=\\u00A01) === false");if(eval(`true
!=
1`)!==!1)throw new Test262Error("#6: (true\\u000A!=\\u000A1) === false");if(eval("true\r!=\r1")!==!1)throw new Test262Error("#7: (true\\u000D!=\\u000D1) === false");if(eval("true\u2028!=\u20281")!==!1)throw new Test262Error("#8: (true\\u2028!=\\u20281) === false");if(eval("true\u2029!=\u20291")!==!1)throw new Test262Error("#9: (true\\u2029!=\\u20291) === false");if(eval(`true	\v\f \xA0
\r\u2028\u2029!=	\v\f \xA0
\r\u2028\u20291`)!==!1)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029!=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === false");



test262/test/built-ins/Temporal/PlainMonthDay/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.PlainMonthDay(5,2);[Infinity,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({day:inf},{overflow}),`day property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"day");assert.throws(RangeError,()=>instance.with({day:obj},{overflow}));assert.compareArray(calls,["get day.valueOf","call day.valueOf"],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainMonthDay(5,2);[1/0,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({day:inf},{overflow}),`day property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"day");assert.throws(RangeError,()=>instance.with({day:obj},{overflow})),assert.compareArray(calls,["get day.valueOf","call day.valueOf"],"it fails after fetching the primitive value")})});



test262/test/built-ins/DataView/excessive-bytelength-throws-sab.js


var buffer=new SharedArrayBuffer(3);assert.throws(RangeError,function(){new DataView(buffer,0,4)},"offset: 0, length 4");assert.throws(RangeError,function(){new DataView(buffer,1,3)},"offset: 1, length: 3");assert.throws(RangeError,function(){new DataView(buffer,2,2)},"offset: 2, length: 2");assert.throws(RangeError,function(){new DataView(buffer,3,1)},"offset: 3, length: 1");assert.throws(RangeError,function(){new DataView(buffer,4,0)},"offset: 4, length: 0");assert.throws(RangeError,function(){new DataView(buffer,4,-1)},"offset: 4, length: -1");assert.throws(RangeError,function(){new DataView(buffer,4,-1/0)},"offset: 4, length: -Infinity");assert.throws(RangeError,function(){new DataView(buffer,0,Infinity)},"offset: 0, length: Infinity");


var buffer=new SharedArrayBuffer(3);assert.throws(RangeError,function(){new DataView(buffer,0,4)},"offset: 0, length 4"),assert.throws(RangeError,function(){new DataView(buffer,1,3)},"offset: 1, length: 3"),assert.throws(RangeError,function(){new DataView(buffer,2,2)},"offset: 2, length: 2"),assert.throws(RangeError,function(){new DataView(buffer,3,1)},"offset: 3, length: 1"),assert.throws(RangeError,function(){new DataView(buffer,4,0)},"offset: 4, length: 0"),assert.throws(RangeError,function(){new DataView(buffer,4,-1)},"offset: 4, length: -1"),assert.throws(RangeError,function(){new DataView(buffer,4,-1/0)},"offset: 4, length: -Infinity"),assert.throws(RangeError,function(){new DataView(buffer,0,1/0)},"offset: 0, length: Infinity");



test262/test/language/expressions/does-not-equals/S11.9.2_A2.4_T1.js


var x=0;if((x=1)!=x!==!1)throw new Test262Error("#1: var x = 0; ((x = 1) != x) === false");var x=0;if(x!=(x=1)!==!0)throw new Test262Error("#2: var x = 0; (x != (x = 1)) === true");


var x=0;if((x=1)!=x)throw new Test262Error("#1: var x = 0; ((x = 1) != x) === false");var x=0;if(x==(x=1))throw new Test262Error("#2: var x = 0; (x != (x = 1)) === true");



test262/test/built-ins/Temporal/PlainDateTime/prototype/round/roundingincrement-out-of-range.js


const datetime=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:0}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:.9}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001}));assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:Infinity}));


const datetime=new Temporal.PlainDateTime(2e3,5,2,12,34,56,0,0,5);assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:-1})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:0})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:.9})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001})),assert.throws(RangeError,()=>datetime.round({smallestUnit:"nanoseconds",roundingIncrement:1/0}));



test262/test/language/expressions/does-not-equals/S11.9.2_A2.4_T4.js


if((y=1)!=y!==!1)throw new Test262Error("#1: ((y = 1) != y) === false");


if((y=1)!=y)throw new Test262Error("#1: ((y = 1) != y) === false");



test262/test/built-ins/TypedArray/prototype/entries/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.entries,"function","implements TypedArray.prototype.entries"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.entries();try{ab.resize(BPE*3)}catch(_){}array.entries();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.entries(),new Test262Error("entries completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.entries,"function","implements TypedArray.prototype.entries"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.entries();try{ab.resize(BPE*3)}catch{}array.entries();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.entries(),new Test262Error("entries completed successfully")})});



test262/test/built-ins/DataView/excessive-byteoffset-throws-sab.js


var ab=new SharedArrayBuffer(1);assert.throws(RangeError,function(){new DataView(ab,2)},"2");assert.throws(RangeError,function(){new DataView(ab,Infinity)},"Infinity");


var ab=new SharedArrayBuffer(1);assert.throws(RangeError,function(){new DataView(ab,2)},"2"),assert.throws(RangeError,function(){new DataView(ab,1/0)},"Infinity");



test262/test/built-ins/TypedArray/prototype/entries/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.entries,"function","implements TypedArray.prototype.entries"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.entries();try{ab.resize(BPE*3)}catch(_){}array.entries();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.entries(),new Test262Error("entries completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.entries,"function","implements TypedArray.prototype.entries"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.entries();try{ab.resize(BPE*3)}catch{}array.entries();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.entries(),new Test262Error("entries completed successfully")})});



test262/test/built-ins/DataView/prototype/setUint32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setUint32(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setUint32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint32(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setUint32(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setUint32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint32(0,30),new Test262Error("the operation completed successfully")});



test262/test/language/expressions/does-not-equals/S11.9.2_A2.4_T3.js


try{throw x!=(x=1),new Test262Error("#1.1: x != (x = 1) throw ReferenceError. Actual: "+(x!=(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x != (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x!=(x=1),new Test262Error("#1.1: x != (x = 1) throw ReferenceError. Actual: "+(x!=(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x != (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Temporal/PlainMonthDay/prototype/toPlainDate/infinity-throws-rangeerror.js


const instance=new Temporal.PlainMonthDay(5,2);[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({year:inf}),`year property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"year");assert.throws(RangeError,()=>instance.toPlainDate({year:obj}));assert.compareArray(calls,["get year.valueOf","call year.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainMonthDay(5,2);[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({year:inf}),`year property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"year");assert.throws(RangeError,()=>instance.toPlainDate({year:obj})),assert.compareArray(calls,["get year.valueOf","call year.valueOf"],"it fails after fetching the primitive value")});



test262/test/built-ins/SharedArrayBuffer/length-is-too-large-throws.js


assert.throws(RangeError,function(){new SharedArrayBuffer(9007199254740992)},"`length` parameter is too large"),assert.throws(RangeError,function(){new SharedArrayBuffer(Infinity)},"`length` parameter is positive Infinity");


assert.throws(RangeError,function(){new SharedArrayBuffer(9007199254740992)},"`length` parameter is too large"),assert.throws(RangeError,function(){new SharedArrayBuffer(1/0)},"`length` parameter is positive Infinity");



test262/test/built-ins/DataView/prototype/setUint32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setUint32(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setUint32(13,39)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.setUint32(12,39)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.setUint32(11,39)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.setUint32(10,39)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.setUint32(9,39)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getUint32(0),0,"[0] no value was set");assert.sameValue(sample.getUint32(4),0,"[1] no value was set");assert.sameValue(sample.getUint32(8),0,"[2] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setUint32(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setUint32(13,39)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.setUint32(12,39)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.setUint32(11,39)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.setUint32(10,39)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.setUint32(9,39)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.setUint32(1,39)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.setUint32(0,39)},"0 + 4 > 3 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getUint32(0),0,"[0] no value was set"),assert.sameValue(sample.getUint32(4),0,"[1] no value was set"),assert.sameValue(sample.getUint32(8),0,"[2] no value was set");



test262/test/language/expressions/does-not-equals/S11.9.2_A6.1.js


if(void 0!=eval("var x")!==!1)throw new Test262Error('#3: (undefined != eval("var x")) === false');


if(eval("var x")!=null)throw new Test262Error('#3: (undefined != eval("var x")) === false');



test262/test/language/expressions/does-not-equals/S11.9.2_A2.1_T2.js


try{throw x!=1,new Test262Error("#1.1: x != 1 throw ReferenceError. Actual: "+(x!=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x != 1 throw ReferenceError. Actual: "+e)}


try{throw x!=1,new Test262Error("#1.1: x != 1 throw ReferenceError. Actual: "+(x!=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x != 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/isNaN/return-false-not-nan-numbers.js


assert.sameValue(isNaN(0),!1,"0"),assert.sameValue(isNaN(-0),!1,"-0"),assert.sameValue(isNaN(Math.pow(2,53)),!1,"Math.pow(2, 53)"),assert.sameValue(isNaN(-Math.pow(2,53)),!1,"-Math.pow(2, 53)"),assert.sameValue(isNaN(1),!1,"1"),assert.sameValue(isNaN(-1),!1,"-1"),assert.sameValue(isNaN(1e-6),!1,"0.000001"),assert.sameValue(isNaN(-1e-6),!1,"-0.000001"),assert.sameValue(isNaN(1e42),!1,"1e42"),assert.sameValue(isNaN(-1e42),!1,"-1e42"),assert.sameValue(isNaN(Infinity),!1,"Infinity"),assert.sameValue(isNaN(-1/0),!1,"-Infinity");


assert.sameValue(isNaN(0),!1,"0"),assert.sameValue(isNaN(-0),!1,"-0"),assert.sameValue(isNaN(Math.pow(2,53)),!1,"Math.pow(2, 53)"),assert.sameValue(isNaN(-Math.pow(2,53)),!1,"-Math.pow(2, 53)"),assert.sameValue(isNaN(1),!1,"1"),assert.sameValue(isNaN(-1),!1,"-1"),assert.sameValue(isNaN(1e-6),!1,"0.000001"),assert.sameValue(isNaN(-1e-6),!1,"-0.000001"),assert.sameValue(isNaN(1e42),!1,"1e42"),assert.sameValue(isNaN(-1e42),!1,"-1e42"),assert.sameValue(isNaN(1/0),!1,"Infinity"),assert.sameValue(isNaN(-1/0),!1,"-Infinity");



test262/test/language/expressions/does-not-equals/S11.9.2_A2.1_T3.js


try{throw 1!=y,new Test262Error("#1: 1 != y throw ReferenceError")}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 != y throw ReferenceError. Actual: "+e)}


try{throw y!=1,new Test262Error("#1: 1 != y throw ReferenceError")}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 != y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/optional-chaining/iteration-statement-for-of-type-error.js


assert.throws(TypeError,function(){for(const key of{}?.a);});assert.throws(TypeError,function(){for(const key of{}?.a);});const obj=void 0;assert.throws(TypeError,function(){for(const key of obj?.a);});assert.throws(TypeError,function(){for(const key of obj?.a);});


assert.throws(TypeError,function(){for(const key of{}.a);}),assert.throws(TypeError,function(){for(const key of{}.a);});const obj=void 0;assert.throws(TypeError,function(){for(const key of obj?.a);}),assert.throws(TypeError,function(){for(const key of obj?.a);});



test262/test/built-ins/DataView/prototype/setUint32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setUint32(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setUint32(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setUint32(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setUint32(-1,0)});



test262/test/built-ins/TypedArray/prototype/every/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.every,"function","implements TypedArray.prototype.every"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.every(()=>{});try{ab.resize(BPE*3)}catch(_){}array.every(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.every(()=>{}),new Test262Error("every completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.every,"function","implements TypedArray.prototype.every"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.every(()=>{});try{ab.resize(BPE*3)}catch{}array.every(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.every(()=>{}),new Test262Error("every completed successfully")})});



test262/test/language/expressions/optional-chaining/punctuator-decimal-lookahead.js


const value=.3;assert.sameValue(.3,value);


const value=.3;assert.sameValue(.3,.3);



test262/test/built-ins/DataView/prototype/getBigInt64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getBigInt64(0),0n,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getBigInt64(0),0n,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getBigInt64(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getBigInt64(0),0n,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getBigInt64(0),0n,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getBigInt64(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getBigInt64/return-values.js


var buffer=new ArrayBuffer(16),sample=new DataView(buffer,0);sample.setUint8(0,39);sample.setUint8(1,2);sample.setUint8(2,6);sample.setUint8(3,2);sample.setUint8(4,128);sample.setUint8(5,0);sample.setUint8(6,128);sample.setUint8(7,1);sample.setUint8(8,127);sample.setUint8(9,0);sample.setUint8(10,1);sample.setUint8(11,2);sample.setUint8(12,128);sample.setUint8(13,127);sample.setUint8(14,255);sample.setUint8(15,128);assert.sameValue(sample.getBigInt64(0,!1),0x2702060280008001n,"0, false");assert.sameValue(sample.getBigInt64(1,!1),0x20602800080017fn,"1, false");assert.sameValue(sample.getBigInt64(2,!1),0x602800080017f00n,"2, false");assert.sameValue(sample.getBigInt64(3,!1),0x2800080017f0001n,"3, false");assert.sameValue(sample.getBigInt64(4,!1),-9223231292940746494n,"4, false");assert.sameValue(sample.getBigInt64(5,!1),0x80017f00010280n,"5, false");assert.sameValue(sample.getBigInt64(6,!1),-9222950923884396417n,"6, false");assert.sameValue(sample.getBigInt64(7,!1),0x17f000102807fffn,"7, false");assert.sameValue(sample.getBigInt64(8,!1),0x7f000102807fff80n,"8, false");assert.sameValue(sample.getBigInt64(0,!0),0x180008002060227n,"0, true");assert.sameValue(sample.getBigInt64(1,!0),0x7f01800080020602n,"1, true");assert.sameValue(sample.getBigInt64(2,!0),0x7f018000800206n,"2, true");assert.sameValue(sample.getBigInt64(3,!0),0x1007f0180008002n,"3, true");assert.sameValue(sample.getBigInt64(4,!0),0x201007f01800080n,"4, true");assert.sameValue(sample.getBigInt64(5,!0),-9222807985258921984n,"5, true");assert.sameValue(sample.getBigInt64(6,!0),0x7f800201007f0180n,"6, true");assert.sameValue(sample.getBigInt64(7,!0),-36169525900574975n,"7, true");assert.sameValue(sample.getBigInt64(8,!0),-9151455730027396993n,"8, true");


var buffer=new ArrayBuffer(16),sample=new DataView(buffer,0);sample.setUint8(0,39),sample.setUint8(1,2),sample.setUint8(2,6),sample.setUint8(3,2),sample.setUint8(4,128),sample.setUint8(5,0),sample.setUint8(6,128),sample.setUint8(7,1),sample.setUint8(8,127),sample.setUint8(9,0),sample.setUint8(10,1),sample.setUint8(11,2),sample.setUint8(12,128),sample.setUint8(13,127),sample.setUint8(14,255),sample.setUint8(15,128),assert.sameValue(sample.getBigInt64(0,!1),0x2702060280008001n,"0, false"),assert.sameValue(sample.getBigInt64(1,!1),0x20602800080017fn,"1, false"),assert.sameValue(sample.getBigInt64(2,!1),0x602800080017f00n,"2, false"),assert.sameValue(sample.getBigInt64(3,!1),0x2800080017f0001n,"3, false"),assert.sameValue(sample.getBigInt64(4,!1),-0x7fff7ffe80fffefen,"4, false"),assert.sameValue(sample.getBigInt64(5,!1),0x80017f00010280n,"5, false"),assert.sameValue(sample.getBigInt64(6,!1),-0x7ffe80fffefd7f81n,"6, false"),assert.sameValue(sample.getBigInt64(7,!1),0x17f000102807fffn,"7, false"),assert.sameValue(sample.getBigInt64(8,!1),0x7f000102807fff80n,"8, false"),assert.sameValue(sample.getBigInt64(0,!0),0x180008002060227n,"0, true"),assert.sameValue(sample.getBigInt64(1,!0),0x7f01800080020602n,"1, true"),assert.sameValue(sample.getBigInt64(2,!0),0x7f018000800206n,"2, true"),assert.sameValue(sample.getBigInt64(3,!0),0x1007f0180008002n,"3, true"),assert.sameValue(sample.getBigInt64(4,!0),0x201007f01800080n,"4, true"),assert.sameValue(sample.getBigInt64(5,!0),-0x7ffdfeff80fe8000n,"5, true"),assert.sameValue(sample.getBigInt64(6,!0),0x7f800201007f0180n,"6, true"),assert.sameValue(sample.getBigInt64(7,!0),-0x807ffdfeff80ffn,"7, true"),assert.sameValue(sample.getBigInt64(8,!0),-0x7f00807ffdfeff81n,"8, true");



test262/test/built-ins/String/prototype/indexOf/S15.5.4.7_A7.js


var __FACTORY=String.prototype.indexOf;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.indexOf; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.2: var __FACTORY = String.prototype.indexOf; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}


var __FACTORY=String.prototype.indexOf;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.indexOf; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.2: var __FACTORY = String.prototype.indexOf; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}



test262/test/built-ins/DataView/prototype/getBigInt64/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,()=>sample.getBigInt64(Infinity),"DataView access at index Infinity should throw");assert.throws(RangeError,()=>sample.getBigInt64(13),"13 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(12),"12 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(11),"11 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(10),"10 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(9),"9 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(8),"8 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(7),"7 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(6),"6 + 8 > 12");assert.throws(RangeError,()=>sample.getBigInt64(5),"5 + 8 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 3 (offset)");sample=new DataView(buffer,0,8);assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 8 (length)");sample=new DataView(buffer,0,7);assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 7 (length)");sample=new DataView(buffer,4,8);assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 8 (offset+length)");sample=new DataView(buffer,4,7);assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 7 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,()=>sample.getBigInt64(1/0),"DataView access at index Infinity should throw"),assert.throws(RangeError,()=>sample.getBigInt64(13),"13 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(12),"12 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(11),"11 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(10),"10 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(9),"9 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(8),"8 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(7),"7 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(6),"6 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigInt64(5),"5 + 8 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 3 (offset)"),sample=new DataView(buffer,0,8),assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 8 (length)"),sample=new DataView(buffer,0,7),assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 7 (length)"),sample=new DataView(buffer,4,8),assert.throws(RangeError,()=>sample.getBigInt64(1),"1 + 8 > 8 (offset+length)"),sample=new DataView(buffer,4,7),assert.throws(RangeError,()=>sample.getBigInt64(0),"0 + 8 > 7 (offset+length)");



test262/test/built-ins/isNaN/tonumber-operations.js


assert.sameValue(isNaN("0"),!1,"'0'"),assert.sameValue(isNaN(""),!1,"the empty string"),assert.sameValue(isNaN("Infinity"),!1,"'Infinity'"),assert.sameValue(isNaN("this is not a number"),!0,"string"),assert.sameValue(isNaN(!0),!1,"true"),assert.sameValue(isNaN(!1),!1,"false"),assert.sameValue(isNaN([1]),!1,"Object [1]"),assert.sameValue(isNaN([Infinity]),!1,"Object [Infinity]"),assert.sameValue(isNaN([NaN]),!0,"Object [NaN]"),assert.sameValue(isNaN(null),!1,"null"),assert.sameValue(isNaN(void 0),!0,"undefined"),assert.sameValue(isNaN(),!0,"no arg");


assert.sameValue(isNaN("0"),!1,"'0'"),assert.sameValue(isNaN(""),!1,"the empty string"),assert.sameValue(isNaN("Infinity"),!1,"'Infinity'"),assert.sameValue(isNaN("this is not a number"),!0,"string"),assert.sameValue(isNaN(!0),!1,"true"),assert.sameValue(isNaN(!1),!1,"false"),assert.sameValue(isNaN([1]),!1,"Object [1]"),assert.sameValue(isNaN([1/0]),!1,"Object [Infinity]"),assert.sameValue(isNaN([NaN]),!0,"Object [NaN]"),assert.sameValue(isNaN(null),!1,"null"),assert.sameValue(isNaN(void 0),!0,"undefined"),assert.sameValue(isNaN(),!0,"no arg");



test262/test/built-ins/TypedArray/prototype/every/BigInt/returns-true-if-every-cb-returns-true.js


testWithBigIntTypedArrayConstructors(function(TA){var called=0,values=[!0,1,"test262",Symbol("1"),{},[],-1,Infinity,-1/0,.1,-.1],sample=new TA(values.length),result=sample.every(function(){return called++,values.unshift()});assert.sameValue(called,sample.length,"callbackfn called for each index");assert.sameValue(result,!0,"return is true")});


testWithBigIntTypedArrayConstructors(function(TA){var called=0,values=[!0,1,"test262",Symbol("1"),{},[],-1,1/0,-1/0,.1,-.1],sample=new TA(values.length),result=sample.every(function(){return called++,values.unshift()});assert.sameValue(called,sample.length,"callbackfn called for each index"),assert.sameValue(result,!0,"return is true")});



test262/test/built-ins/Temporal/Instant/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.Instant(1000000000000000000n),later=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.Instant(1000000000000000000n),later=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/built-ins/Atomics/pause/non-integral-iterationnumber-throws.js


const values=[!0,!1,null,42.42,-42.42,NaN,Infinity,Symbol("foo"),"bar","42",/baz/,42n,{},[],function(){},{valueOf(){return 42}}];for(const v of values)assert.throws(TypeError,()=>{Atomics.pause(v)},`${v?v.toString():v} is an illegal iterationNumber`);


const values=[!0,!1,null,42.42,-42.42,NaN,1/0,Symbol("foo"),"bar","42",/baz/,42n,{},[],function(){},{valueOf(){return 42}}];for(const v of values)assert.throws(TypeError,()=>{Atomics.pause(v)},`${v&&v.toString()} is an illegal iterationNumber`);



test262/test/built-ins/Object/S15.2.2.1_A5_T4.js


var n_obj=new Object(2*([].length+{q:1}["q"]));assert.sameValue(n_obj.constructor,Number,"The value of n_obj.constructor is expected to equal the value of Number");assert.sameValue(typeof n_obj,"object",'The value of `typeof n_obj` is expected to be "object"');assert(n_obj==2,"The result of evaluating (n_obj == 2) is expected to be true");assert.notSameValue(n_obj,2,"The value of n_obj is not 2");


var n_obj=new Object(2*([].length+1));assert.sameValue(n_obj.constructor,Number,"The value of n_obj.constructor is expected to equal the value of Number"),assert.sameValue(typeof n_obj,"object",'The value of `typeof n_obj` is expected to be "object"'),assert(n_obj==2,"The result of evaluating (n_obj == 2) is expected to be true"),assert.notSameValue(n_obj,2,"The value of n_obj is not 2");



test262/test/built-ins/TypedArray/prototype/every/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.every,"function","implements TypedArray.prototype.every"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.every(()=>{});try{ab.resize(BPE*3)}catch(_){}array.every(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.every(()=>{}),new Test262Error("every completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.every,"function","implements TypedArray.prototype.every"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.every(()=>{});try{ab.resize(BPE*3)}catch{}array.every(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.every(()=>{}),new Test262Error("every completed successfully")})});



test262/test/built-ins/DataView/prototype/getBigInt64/to-boolean-littleendian.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(7,255);assert.sameValue(sample.getBigInt64(0),0xffn,"no argument");assert.sameValue(sample.getBigInt64(0,!1),0xffn);assert.sameValue(sample.getBigInt64(0,!0),-72057594037927936n);assert.sameValue(sample.getBigInt64(0,0),0xffn,"ToBoolean: 0 => false");assert.sameValue(sample.getBigInt64(0,-0),0xffn,"ToBoolean: -0 => false");assert.sameValue(sample.getBigInt64(0,1),-72057594037927936n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigInt64(0,-1),-72057594037927936n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigInt64(0,.1),-72057594037927936n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigInt64(0,Infinity),-72057594037927936n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigInt64(0,NaN),0xffn,"ToBoolean: NaN => false");assert.sameValue(sample.getBigInt64(0,void 0),0xffn,"ToBoolean: undefined => false");assert.sameValue(sample.getBigInt64(0,null),0xffn,"ToBoolean: null => false");assert.sameValue(sample.getBigInt64(0,""),0xffn,"ToBoolean: String .length == 0 => false");assert.sameValue(sample.getBigInt64(0,"string"),-72057594037927936n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigInt64(0,"false"),-72057594037927936n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigInt64(0," "),-72057594037927936n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigInt64(0,Symbol("1")),-72057594037927936n,"ToBoolean: Symbol => true");assert.sameValue(sample.getBigInt64(0,0n),0xffn,"ToBoolean: 0n => false");assert.sameValue(sample.getBigInt64(0,1n),-72057594037927936n,"ToBoolean: BigInt != 0n => true");assert.sameValue(sample.getBigInt64(0,[]),-72057594037927936n,"ToBoolean: any object => true");assert.sameValue(sample.getBigInt64(0,{}),-72057594037927936n,"ToBoolean: any object => true");assert.sameValue(sample.getBigInt64(0,Object(!1)),-72057594037927936n,"ToBoolean: any object => true; no ToPrimitive");


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(7,255),assert.sameValue(sample.getBigInt64(0),0xffn,"no argument"),assert.sameValue(sample.getBigInt64(0,!1),0xffn),assert.sameValue(sample.getBigInt64(0,!0),-0x100000000000000n),assert.sameValue(sample.getBigInt64(0,0),0xffn,"ToBoolean: 0 => false"),assert.sameValue(sample.getBigInt64(0,-0),0xffn,"ToBoolean: -0 => false"),assert.sameValue(sample.getBigInt64(0,1),-0x100000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigInt64(0,-1),-0x100000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigInt64(0,.1),-0x100000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigInt64(0,1/0),-0x100000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigInt64(0,NaN),0xffn,"ToBoolean: NaN => false"),assert.sameValue(sample.getBigInt64(0,void 0),0xffn,"ToBoolean: undefined => false"),assert.sameValue(sample.getBigInt64(0,null),0xffn,"ToBoolean: null => false"),assert.sameValue(sample.getBigInt64(0,""),0xffn,"ToBoolean: String .length == 0 => false"),assert.sameValue(sample.getBigInt64(0,"string"),-0x100000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigInt64(0,"false"),-0x100000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigInt64(0," "),-0x100000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigInt64(0,Symbol("1")),-0x100000000000000n,"ToBoolean: Symbol => true"),assert.sameValue(sample.getBigInt64(0,0n),0xffn,"ToBoolean: 0n => false"),assert.sameValue(sample.getBigInt64(0,1n),-0x100000000000000n,"ToBoolean: BigInt != 0n => true"),assert.sameValue(sample.getBigInt64(0,[]),-0x100000000000000n,"ToBoolean: any object => true"),assert.sameValue(sample.getBigInt64(0,{}),-0x100000000000000n,"ToBoolean: any object => true"),assert.sameValue(sample.getBigInt64(0,Object(!1)),-0x100000000000000n,"ToBoolean: any object => true; no ToPrimitive");



test262/test/language/expressions/optional-chaining/optional-call-preserves-this.js


const a={b(){return this._b},_b:{c:42}};assert.sameValue(a?.b().c,42);assert.sameValue((a?.b)().c,42);assert.sameValue(a.b?.().c,42);assert.sameValue(a.b?.().c,42);assert.sameValue(a?.b?.().c,42);assert.sameValue((a?.b)?.().c,42);


const a={b(){return this._b},_b:{c:42}};assert.sameValue(a?.b().c,42),assert.sameValue((a?.b)().c,42),assert.sameValue(a.b?.().c,42),assert.sameValue(a.b?.().c,42),assert.sameValue(a?.b?.().c,42),assert.sameValue(a?.b?.().c,42);



test262/test/built-ins/Temporal/PlainMonthDay/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainMonthDay(5,2),base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainMonthDay(5,2),base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/DataView/prototype/getBigInt64/return-values-custom-offset.js


var buffer=new ArrayBuffer(16),sample=new DataView(buffer,0);sample.setUint8(0,39);sample.setUint8(1,2);sample.setUint8(2,6);sample.setUint8(3,2);sample.setUint8(4,128);sample.setUint8(5,0);sample.setUint8(6,128);sample.setUint8(7,1);sample.setUint8(8,127);sample.setUint8(9,0);sample.setUint8(10,1);sample.setUint8(11,2);sample.setUint8(12,128);sample.setUint8(13,127);sample.setUint8(14,255);sample.setUint8(15,128);sample=new DataView(buffer,4);assert.sameValue(sample.getBigInt64(0,!1),-9223231292940746494n,"0, false");assert.sameValue(sample.getBigInt64(1,!1),0x80017f00010280n,"1, false");assert.sameValue(sample.getBigInt64(2,!1),-9222950923884396417n,"2, false");assert.sameValue(sample.getBigInt64(3,!1),0x17f000102807fffn,"3, false");assert.sameValue(sample.getBigInt64(4,!1),0x7f000102807fff80n,"4, false");assert.sameValue(sample.getBigInt64(0,!0),0x201007f01800080n,"0, true");assert.sameValue(sample.getBigInt64(1,!0),-9222807985258921984n,"1, true");assert.sameValue(sample.getBigInt64(2,!0),0x7f800201007f0180n,"2, true");assert.sameValue(sample.getBigInt64(3,!0),-36169525900574975n,"3, true");assert.sameValue(sample.getBigInt64(4,!0),-9151455730027396993n,"4, true");


var buffer=new ArrayBuffer(16),sample=new DataView(buffer,0);sample.setUint8(0,39),sample.setUint8(1,2),sample.setUint8(2,6),sample.setUint8(3,2),sample.setUint8(4,128),sample.setUint8(5,0),sample.setUint8(6,128),sample.setUint8(7,1),sample.setUint8(8,127),sample.setUint8(9,0),sample.setUint8(10,1),sample.setUint8(11,2),sample.setUint8(12,128),sample.setUint8(13,127),sample.setUint8(14,255),sample.setUint8(15,128),sample=new DataView(buffer,4),assert.sameValue(sample.getBigInt64(0,!1),-0x7fff7ffe80fffefen,"0, false"),assert.sameValue(sample.getBigInt64(1,!1),0x80017f00010280n,"1, false"),assert.sameValue(sample.getBigInt64(2,!1),-0x7ffe80fffefd7f81n,"2, false"),assert.sameValue(sample.getBigInt64(3,!1),0x17f000102807fffn,"3, false"),assert.sameValue(sample.getBigInt64(4,!1),0x7f000102807fff80n,"4, false"),assert.sameValue(sample.getBigInt64(0,!0),0x201007f01800080n,"0, true"),assert.sameValue(sample.getBigInt64(1,!0),-0x7ffdfeff80fe8000n,"1, true"),assert.sameValue(sample.getBigInt64(2,!0),0x7f800201007f0180n,"2, true"),assert.sameValue(sample.getBigInt64(3,!0),-0x807ffdfeff80ffn,"3, true"),assert.sameValue(sample.getBigInt64(4,!0),-0x7f00807ffdfeff81n,"4, true");



test262/test/built-ins/DataView/prototype/getBigInt64/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,()=>sample.getBigInt64(Infinity),"DataView access at index Infinity should throw");assert.throws(RangeError,()=>sample.getBigInt64(-1),"DataView access at index -1 should throw");


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,()=>sample.getBigInt64(1/0),"DataView access at index Infinity should throw"),assert.throws(RangeError,()=>sample.getBigInt64(-1),"DataView access at index -1 should throw");



test262/test/built-ins/TypedArray/prototype/every/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.every(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,!0,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.every(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,!0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.every(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,!0,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.every(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,!0,"result (grow)")});



test262/test/built-ins/DataView/prototype/getFloat64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getFloat64(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getFloat64(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat64(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getFloat64(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getFloat64(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat64(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getFloat64/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getFloat64(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getFloat64(13)},"13 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(12)},"12 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(11)},"11 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(10)},"10 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(9)},"9 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(8)},"8 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(7)},"7 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(6)},"6 + 8 > 12");assert.throws(RangeError,function(){sample.getFloat64(5)},"5 + 8 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 3 (offset)");sample=new DataView(buffer,0,8);assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 8 (length)");sample=new DataView(buffer,0,7);assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 7 (length)");sample=new DataView(buffer,4,8);assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 8 (offset+length)");sample=new DataView(buffer,4,7);assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 7 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getFloat64(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getFloat64(13)},"13 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(12)},"12 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(11)},"11 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(10)},"10 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(9)},"9 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(8)},"8 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(7)},"7 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(6)},"6 + 8 > 12"),assert.throws(RangeError,function(){sample.getFloat64(5)},"5 + 8 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 3 (offset)"),sample=new DataView(buffer,0,8),assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 8 (length)"),sample=new DataView(buffer,0,7),assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 7 (length)"),sample=new DataView(buffer,4,8),assert.throws(RangeError,function(){sample.getFloat64(1)},"1 + 8 > 8 (offset+length)"),sample=new DataView(buffer,4,7),assert.throws(RangeError,function(){sample.getFloat64(0)},"0 + 8 > 7 (offset+length)");



test262/test/built-ins/Temporal/PlainDateTime/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,[prop]:obj1},other));assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,[prop]:obj2}));assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const other=new Temporal.PlainDateTime(2e3,5,2,15),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,[prop]:obj1},other)),assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,[prop]:obj2})),assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/every/returns-true-if-every-cb-returns-true.js


testWithTypedArrayConstructors(function(TA){var called=0,values=[!0,1,"test262",Symbol("1"),{},[],-1,Infinity,-1/0,.1,-.1],sample=new TA(values.length),result=sample.every(function(){return called++,values.unshift()});assert.sameValue(called,sample.length,"callbackfn called for each index");assert.sameValue(result,!0,"return is true")});


testWithTypedArrayConstructors(function(TA){var called=0,values=[!0,1,"test262",Symbol("1"),{},[],-1,1/0,-1/0,.1,-.1],sample=new TA(values.length),result=sample.every(function(){return called++,values.unshift()});assert.sameValue(called,sample.length,"callbackfn called for each index"),assert.sameValue(result,!0,"return is true")});



test262/test/built-ins/TypedArray/prototype/with/index-smaller-than-minus-length.js


testWithTypedArrayConstructors(TA=>{var arr=new TA([0,1,2]);assert.throws(RangeError,function(){arr.with(-4,7)});assert.throws(RangeError,function(){arr.with(-10,7)});assert.throws(RangeError,function(){arr.with(-9007199254740994,7)});assert.throws(RangeError,function(){arr.with(-1/0,7)})});


testWithTypedArrayConstructors(TA=>{var arr=new TA([0,1,2]);assert.throws(RangeError,function(){arr.with(-4,7)}),assert.throws(RangeError,function(){arr.with(-10,7)}),assert.throws(RangeError,function(){arr.with(-(2**53)-2,7)}),assert.throws(RangeError,function(){arr.with(-1/0,7)})});



test262/test/built-ins/DataView/prototype/getFloat64/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(10),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getFloat64(-1)});assert.throws(RangeError,function(){sample.getFloat64(Infinity)},"Infinity");


var buffer=new ArrayBuffer(10),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getFloat64(-1)}),assert.throws(RangeError,function(){sample.getFloat64(1/0)},"Infinity");



test262/test/built-ins/DataView/prototype/getFloat64/return-infinity.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(0,127);sample.setUint8(1,240);sample.setUint8(2,0);sample.setUint8(3,0);sample.setUint8(4,0);sample.setUint8(5,0);sample.setUint8(6,0);sample.setUint8(7,0);assert.sameValue(sample.getFloat64(0),Infinity);sample.setUint8(0,255);sample.setUint8(1,240);sample.setUint8(2,0);sample.setUint8(3,0);sample.setUint8(4,0);sample.setUint8(5,0);sample.setUint8(6,0);sample.setUint8(7,0);assert.sameValue(sample.getFloat64(0),-1/0);


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(0,127),sample.setUint8(1,240),sample.setUint8(2,0),sample.setUint8(3,0),sample.setUint8(4,0),sample.setUint8(5,0),sample.setUint8(6,0),sample.setUint8(7,0),assert.sameValue(sample.getFloat64(0),1/0),sample.setUint8(0,255),sample.setUint8(1,240),sample.setUint8(2,0),sample.setUint8(3,0),sample.setUint8(4,0),sample.setUint8(5,0),sample.setUint8(6,0),sample.setUint8(7,0),assert.sameValue(sample.getFloat64(0),-1/0);



test262/test/built-ins/BigInt/prototype/toString/string-is-code-units-of-decimal-digits-only.js


assert.sameValue(BigInt(0).toString(),"0","BigInt(0).toString() === '0'"),assert.sameValue(BigInt(0n).toString(),"0","BigInt(0n).toString() === '0'"),assert.sameValue(0n.toString(),"0","0n.toString() === '0'");


assert.sameValue(BigInt(0).toString(),"0","BigInt(0).toString() === '0'"),assert.sameValue(0n.toString(),"0","BigInt(0n).toString() === '0'"),assert.sameValue(0n.toString(),"0","0n.toString() === '0'");



test262/test/built-ins/DataView/prototype/setFloat64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setFloat64(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setFloat64(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat64(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setFloat64(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setFloat64(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat64(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setFloat64/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setFloat64(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setFloat64(13,39)},"13 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(12,39)},"12 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(11,39)},"11 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(10,39)},"10 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(9,39)},"9 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(8,39)},"8 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(7,39)},"7 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(6,39)},"6 + 8 > 12");assert.throws(RangeError,function(){sample.setFloat64(5,39)},"5 + 8 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 3 (offset)");sample=new DataView(buffer,0,8);assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 8 (length)");sample=new DataView(buffer,0,7);assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 7 (length)");sample=new DataView(buffer,4,8);assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 8 (offset+length)");sample=new DataView(buffer,4,7);assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 7 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getFloat64(0),0,"[0] no value was set");assert.sameValue(sample.getFloat64(4),0,"[1] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setFloat64(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setFloat64(13,39)},"13 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(12,39)},"12 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(11,39)},"11 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(10,39)},"10 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(9,39)},"9 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(8,39)},"8 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(7,39)},"7 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(6,39)},"6 + 8 > 12"),assert.throws(RangeError,function(){sample.setFloat64(5,39)},"5 + 8 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 3 (offset)"),sample=new DataView(buffer,0,8),assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 8 (length)"),sample=new DataView(buffer,0,7),assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 7 (length)"),sample=new DataView(buffer,4,8),assert.throws(RangeError,function(){sample.setFloat64(1,39)},"1 + 8 > 8 (offset+length)"),sample=new DataView(buffer,4,7),assert.throws(RangeError,function(){sample.setFloat64(0,39)},"0 + 8 > 7 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getFloat64(0),0,"[0] no value was set"),assert.sameValue(sample.getFloat64(4),0,"[1] no value was set");



test262/test/built-ins/String/15.5.5.5.2-3-4.js


var s=new String("hello world");assert.sameValue(s[Infinity],void 0,"s[Infinity]");


var s=new String("hello world");assert.sameValue(s[1/0],void 0,"s[Infinity]");



test262/test/built-ins/TypedArray/prototype/join/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.join,"function","implements TypedArray.prototype.join"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.join(",");try{ab.resize(BPE*3)}catch(_){}array.join(",");var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.join(","),new Test262Error("join completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.join,"function","implements TypedArray.prototype.join"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.join(",");try{ab.resize(BPE*3)}catch{}array.join(",");var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.join(","),new Test262Error("join completed successfully")})});



test262/test/built-ins/DataView/prototype/setFloat64/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setFloat64(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setFloat64(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setFloat64(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setFloat64(-1,0)});



test262/test/built-ins/TypedArray/prototype/join/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.join,"function","implements TypedArray.prototype.join"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.join(0);try{ab.resize(BPE*3)}catch(_){}array.join(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.join(0),new Test262Error("join completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.join,"function","implements TypedArray.prototype.join"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.join(0);try{ab.resize(BPE*3)}catch{}array.join(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.join(0),new Test262Error("join completed successfully")})});



test262/test/built-ins/Array/prototype/with/index-smaller-than-minus-length.js


[0,1,2].with(-3,7),assert.throws(RangeError,function(){[0,1,2].with(-4,7)}),assert.throws(RangeError,function(){[0,1,2].with(-10,7)}),assert.throws(RangeError,function(){[0,1,2].with(-9007199254740994,7)}),assert.throws(RangeError,function(){[0,1,2].with(-1/0,7)});


[0,1,2].with(-3,7),assert.throws(RangeError,function(){[0,1,2].with(-4,7)}),assert.throws(RangeError,function(){[0,1,2].with(-10,7)}),assert.throws(RangeError,function(){[0,1,2].with(-(2**53)-2,7)}),assert.throws(RangeError,function(){[0,1,2].with(-1/0,7)});



test262/test/built-ins/Object/S15.2.1.1_A3_T3.js


var obj=Object((null,2,3),1,2);assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number");assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"');assert(obj==3,"The result of evaluating (obj == 3) is expected to be true");assert.notSameValue(obj,3,"The value of obj is not 3");


var obj=Object(3,1,2);assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number"),assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"'),assert(obj==3,"The result of evaluating (obj == 3) is expected to be true"),assert.notSameValue(obj,3,"The value of obj is not 3");



test262/test/built-ins/String/15.5.5.5.2-1-2.js


var s="hello world";assert.sameValue(s["foo"],void 0,'s["foo"]');


var s="hello world";assert.sameValue(s.foo,void 0,'s["foo"]');



test262/test/built-ins/DataView/prototype/getUint32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getUint32(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getUint32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint32(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getUint32(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getUint32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint32(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/TypedArray/prototype/join/result-from-tostring-on-each-value.js


var arr=[-2,Infinity,NaN,-1/0,.6,9007199254740992];testWithTypedArrayConstructors(function(TA){var sample=new TA(arr),expected=arr.map(function(_,i){return sample[i].toString()}).join(),result=sample.join();assert.sameValue(result,expected)});


var arr=[-2,1/0,NaN,-1/0,.6,9007199254740992];testWithTypedArrayConstructors(function(TA){var sample=new TA(arr),expected=arr.map(function(_,i){return sample[i].toString()}).join(),result=sample.join();assert.sameValue(result,expected)});



test262/test/built-ins/DataView/prototype/getUint32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getUint32(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getUint32(13)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.getUint32(12)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.getUint32(11)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.getUint32(10)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.getUint32(9)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getUint32(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getUint32(13)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.getUint32(12)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.getUint32(11)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.getUint32(10)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.getUint32(9)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.getUint32(1)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.getUint32(0)},"0 + 4 > 3 (offset+length)");



test262/test/built-ins/String/fromCodePoint/number-is-out-of-range.js


assert.throws(RangeError,function(){String.fromCodePoint(-1)}),assert.throws(RangeError,function(){String.fromCodePoint(1,-1)}),assert.throws(RangeError,function(){String.fromCodePoint(1114112)}),assert.throws(RangeError,function(){String.fromCodePoint(Infinity)});


assert.throws(RangeError,function(){String.fromCodePoint(-1)}),assert.throws(RangeError,function(){String.fromCodePoint(1,-1)}),assert.throws(RangeError,function(){String.fromCodePoint(1114112)}),assert.throws(RangeError,function(){String.fromCodePoint(1/0)});



test262/test/built-ins/Temporal/Instant/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.Instant(1000000000000000000n),later=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.Instant(1000000000000000000n),later=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/built-ins/DataView/prototype/getUint32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getUint32(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getUint32(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getUint32(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getUint32(-1)});



test262/test/language/statements/switch/scope-lex-const.js


switch(0){default:const x=1}x;


switch(0){default:}x;



test262/test/built-ins/Object/entries/primitive-numbers.js


assert.sameValue(Object.entries(0).length,0,"0 has zero entries"),assert.sameValue(Object.entries(-0).length,0,"-0 has zero entries"),assert.sameValue(Object.entries(Infinity).length,0,"Infinity has zero entries"),assert.sameValue(Object.entries(-1/0).length,0,"-Infinity has zero entries"),assert.sameValue(Object.entries(NaN).length,0,"NaN has zero entries"),assert.sameValue(Object.entries(Math.PI).length,0,"Math.PI has zero entries");


assert.sameValue(Object.entries(0).length,0,"0 has zero entries"),assert.sameValue(Object.entries(-0).length,0,"-0 has zero entries"),assert.sameValue(Object.entries(1/0).length,0,"Infinity has zero entries"),assert.sameValue(Object.entries(-1/0).length,0,"-Infinity has zero entries"),assert.sameValue(Object.entries(NaN).length,0,"NaN has zero entries"),assert.sameValue(Object.entries(Math.PI).length,0,"Math.PI has zero entries");



test262/test/language/statements/try/S12.14_A7_T3.js


try{try{throw"ex2"}catch(er2){if(er2!=="ex2")throw new Test262Error('#1.1: Exception === "ex2". Actual:  Exception ==='+er2);throw"ex1"}finally{throw"ex3"}}catch(er1){if(er1!=="ex3")throw new Test262Error('#1.2: Exception === "ex3". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#1.3: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex1")throw new Test262Error('#1.4: Exception !=="ex1". Actual: catch previous embedded exception')}var c2=0;try{throw"ex1"}catch(er1){try{throw"ex2"}catch(er1){if(er1==="ex1")throw new Test262Error('#2.1: Exception !=="ex1". Actual: catch previous catched exception');if(er1!=="ex2")throw new Test262Error('#2.2: Exception === "ex2". Actual:  Exception ==='+er1)}finally{c2=1}if(er1!=="ex1")throw new Test262Error('#2.3: Exception === "ex1". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#2.4: Exception !== "ex2". Actual: catch previous embedded exception')}if(c2!==1)throw new Test262Error('#2.5: "finally" block must be evaluated');var c3=0;try{throw"ex1"}catch(er1){if(er1!=="ex1")throw new Test262Error('#3.1: Exception === "ex1". Actual:  Exception ==='+er1)}finally{try{throw"ex2"}catch(er1){if(er1==="ex1")throw new Test262Error('#3.2: Exception !=="ex1". Actual: catch previous catched exception');if(er1!=="ex2")throw new Test262Error('#3.3: Exception === "ex2". Actual:  Exception ==='+er1)}finally{c3=1}}if(c3!==1)throw new Test262Error('#3.4: "finally" block must be evaluated');var c4=0;try{try{throw"ex1"}catch(er1){try{throw"ex2"}catch(er1){if(er1==="ex1")throw new Test262Error('#4.1: Exception !=="ex2". Actual: catch previous catched exception');if(er1!=="ex2")throw new Test262Error('#4.2: Exception === "ex2". Actual:  Exception ==='+er1)}finally{throw c4=2,"ex3"}if(er1!=="ex1")throw new Test262Error('#4.3: Exception === "ex2". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#4.4: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex3")throw new Test262Error('#4.5: Exception !=="ex3". Actual: Catch previous embedded exception')}finally{c4*=2}}catch(er1){}if(c4!==4)throw new Test262Error('#4.6: "finally" block must be evaluated');var c5=0;try{try{throw"ex2"}catch(er1){if(er1!=="ex2")throw new Test262Error('#5.1: Exception === "ex2". Actual:  Exception ==='+er1)}finally{throw"ex3"}throw"ex1"}catch(er1){if(er1!=="ex3")throw new Test262Error('#5.2: Exception === "ex3". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#5.3: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex1")throw new Test262Error('#5.4: Exception !=="ex1". Actual: catch previous embedded exception')}finally{c5=1}if(c5!==1)throw new Test262Error('#5.5: "finally" block must be evaluated');var c6=0;try{try{throw"ex1"}catch(er1){if(er1!=="ex1")throw new Test262Error('#6.1: Exception === "ex1". Actual:  Exception ==='+er1)}finally{c6=2}}finally{c6*=2}if(c6!==4)throw new Test262Error('#6.2: "finally" block must be evaluated');var c7=0;try{try{throw"ex1"}finally{try{throw c7=1,"ex2"}catch(er1){if(er1!=="ex2")throw new Test262Error('#7.1: Exception === "ex2". Actual:  Exception ==='+er1);if(er1==="ex1")throw new Test262Error('#7.2: Exception !=="ex2". Actual: catch previous catched exception');c7++}finally{c7*=2}}}catch(er1){if(er1!=="ex1")throw new Test262Error('#7.3: Exception === "ex1". Actual:  Exception ==='+er1)}if(c7!==4)throw new Test262Error('#7.4: "finally" block must be evaluated');


try{try{throw"ex2"}catch(er2){throw er2!=="ex2"?new Test262Error('#1.1: Exception === "ex2". Actual:  Exception ==='+er2):"ex1"}finally{throw"ex3"}}catch(er1){if(er1!=="ex3")throw new Test262Error('#1.2: Exception === "ex3". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#1.3: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex1")throw new Test262Error('#1.4: Exception !=="ex1". Actual: catch previous embedded exception')}var c2=0;try{throw"ex1"}catch(er1){try{throw"ex2"}catch(er12){if(er12==="ex1")throw new Test262Error('#2.1: Exception !=="ex1". Actual: catch previous catched exception');if(er12!=="ex2")throw new Test262Error('#2.2: Exception === "ex2". Actual:  Exception ==='+er12)}finally{c2=1}if(er1!=="ex1")throw new Test262Error('#2.3: Exception === "ex1". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#2.4: Exception !== "ex2". Actual: catch previous embedded exception')}if(c2!==1)throw new Test262Error('#2.5: "finally" block must be evaluated');var c3=0;try{throw"ex1"}catch(er1){if(er1!=="ex1")throw new Test262Error('#3.1: Exception === "ex1". Actual:  Exception ==='+er1)}finally{try{throw"ex2"}catch(er1){if(er1==="ex1")throw new Test262Error('#3.2: Exception !=="ex1". Actual: catch previous catched exception');if(er1!=="ex2")throw new Test262Error('#3.3: Exception === "ex2". Actual:  Exception ==='+er1)}finally{c3=1}}if(c3!==1)throw new Test262Error('#3.4: "finally" block must be evaluated');var c4=0;try{try{throw"ex1"}catch(er1){try{throw"ex2"}catch(er12){if(er12==="ex1")throw new Test262Error('#4.1: Exception !=="ex2". Actual: catch previous catched exception');if(er12!=="ex2")throw new Test262Error('#4.2: Exception === "ex2". Actual:  Exception ==='+er12)}finally{throw c4=2,"ex3"}if(er1!=="ex1")throw new Test262Error('#4.3: Exception === "ex2". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#4.4: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex3")throw new Test262Error('#4.5: Exception !=="ex3". Actual: Catch previous embedded exception')}finally{c4*=2}}catch{}if(c4!==4)throw new Test262Error('#4.6: "finally" block must be evaluated');var c5=0;try{try{throw"ex2"}catch(er1){if(er1!=="ex2")throw new Test262Error('#5.1: Exception === "ex2". Actual:  Exception ==='+er1)}finally{throw"ex3"}throw"ex1"}catch(er1){if(er1!=="ex3")throw new Test262Error('#5.2: Exception === "ex3". Actual:  Exception ==='+er1);if(er1==="ex2")throw new Test262Error('#5.3: Exception !=="ex2". Actual: catch previous catched exception');if(er1==="ex1")throw new Test262Error('#5.4: Exception !=="ex1". Actual: catch previous embedded exception')}finally{c5=1}if(c5!==1)throw new Test262Error('#5.5: "finally" block must be evaluated');var c6=0;try{try{throw"ex1"}catch(er1){if(er1!=="ex1")throw new Test262Error('#6.1: Exception === "ex1". Actual:  Exception ==='+er1)}finally{c6=2}}finally{c6*=2}if(c6!==4)throw new Test262Error('#6.2: "finally" block must be evaluated');var c7=0;try{try{throw"ex1"}finally{try{throw c7=1,"ex2"}catch(er1){if(er1!=="ex2")throw new Test262Error('#7.1: Exception === "ex2". Actual:  Exception ==='+er1);if(er1==="ex1")throw new Test262Error('#7.2: Exception !=="ex2". Actual: catch previous catched exception');c7++}finally{c7*=2}}}catch(er1){if(er1!=="ex1")throw new Test262Error('#7.3: Exception === "ex1". Actual:  Exception ==='+er1)}if(c7!==4)throw new Test262Error('#7.4: "finally" block must be evaluated');



test262/test/built-ins/String/15.5.5.5.2-3-7.js


var s="hello world";assert.sameValue(s[Infinity],void 0,"s[Infinity]");


var s="hello world";assert.sameValue(s[1/0],void 0,"s[Infinity]");



test262/test/language/expressions/in/S11.8.7_A2.1_T1.js


if("MAX_VALUE"in Number!==!0)throw new Test262Error('#1: "MAX_VALUE" in Number === true');var x="MAX_VALUE";if(x in Number!==!0)throw new Test262Error('#2: var x = "MAX_VALUE"; x in Number === true');var y=Number;if("MAX_VALUE"in y!==!0)throw new Test262Error('#3: var y = Number; "MAX_VALUE" in y === true');var x="MAX_VALUE",y=Number;if(x in y!==!0)throw new Test262Error('#4: var x = "MAX_VALUE"; var y = Number; x in y === true');


if(!("MAX_VALUE"in Number))throw new Test262Error('#1: "MAX_VALUE" in Number === true');var x="MAX_VALUE";if(!(x in Number))throw new Test262Error('#2: var x = "MAX_VALUE"; x in Number === true');var y=Number;if(!("MAX_VALUE"in y))throw new Test262Error('#3: var y = Number; "MAX_VALUE" in y === true');var x="MAX_VALUE",y=Number;if(!(x in y))throw new Test262Error('#4: var x = "MAX_VALUE"; var y = Number; x in y === true');



test262/test/built-ins/DataView/prototype/setBigInt64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setBigInt64(0,10n),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setBigInt64(0,20n),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setBigInt64(0,30n),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setBigInt64(0,10n),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setBigInt64(0,20n),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setBigInt64(0,30n),new Test262Error("the operation completed successfully")});



test262/test/language/expressions/in/S11.8.7_A2.4_T1.js


var NUMBER=0;if((NUMBER=Number,"MAX_VALUE")in NUMBER!==!0)throw new Test262Error('#1: var NUMBER = 0; (NUMBER = Number, "MAX_VALUE") in NUMBER === true');var max_value="MAX_VALUE";if(max_value in(max_value="none",Number)!==!0)throw new Test262Error('#2: var max_value = "MAX_VALUE"; max_value in (max_value = "none", Number) === true');


var NUMBER=0;if(NUMBER=Number,!("MAX_VALUE"in NUMBER))throw new Test262Error('#1: var NUMBER = 0; (NUMBER = Number, "MAX_VALUE") in NUMBER === true');var max_value="MAX_VALUE";if(!(max_value in(max_value="none",Number)))throw new Test262Error('#2: var max_value = "MAX_VALUE"; max_value in (max_value = "none", Number) === true');



test262/test/built-ins/String/15.5.5.5.2-1-1.js


var s=new String("hello world");s.foo=1;assert.sameValue(s["foo"],1,'s["foo"]');


var s=new String("hello world");s.foo=1,assert.sameValue(s.foo,1,'s["foo"]');



test262/test/language/statements/try/S12.14_A8.js


var c1=1;try{if(c1===1)throw"ex1";throw new Test262Error('#1.2: throw "ex1" inside the "if" statement lead to throwing exception')}catch(er1){if(er1!=="ex1")throw new Test262Error('#1.3: Exception ==="ex1". Actual:  Exception ==='+er1)}var c2=1;if(c2===1)try{throw"ex1"}catch(er1){if(er1!="ex1")throw new Test262Error('#2.2: Exception ==="ex1". Actual:  Exception ==='+er1)}


var c1=1;try{throw c1===1?"ex1":new Test262Error('#1.2: throw "ex1" inside the "if" statement lead to throwing exception')}catch(er1){if(er1!=="ex1")throw new Test262Error('#1.3: Exception ==="ex1". Actual:  Exception ==='+er1)}var c2=1;if(c2===1)try{throw"ex1"}catch(er1){if(er1!="ex1")throw new Test262Error('#2.2: Exception ==="ex1". Actual:  Exception ==='+er1)}



test262/test/built-ins/String/S15.5.1.1_A2_T1.js


var __str=String();if(typeof __str!="string")throw new Test262Error('#1: __str = String(); typeof __str === "string". Actual: typeof __str ==='+typeof __str);if(__str!=="")throw new Test262Error('#2: __str = String(); __str === "". Actual: __str ==='+__str);


var __str="";if(typeof __str!="string")throw new Test262Error('#1: __str = String(); typeof __str === "string". Actual: typeof __str ==='+typeof __str);if(__str!=="")throw new Test262Error('#2: __str = String(); __str === "". Actual: __str ==='+__str);



test262/test/language/expressions/in/S11.8.7_A2.4_T4.js


if((NUMBER=Number,"MAX_VALUE")in NUMBER!==!0)throw new Test262Error('#1: (NUMBER = Number, "MAX_VALUE") in NUMBER !== true');


if(NUMBER=Number,!("MAX_VALUE"in NUMBER))throw new Test262Error('#1: (NUMBER = Number, "MAX_VALUE") in NUMBER !== true');



test262/test/built-ins/DataView/prototype/setBigInt64/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setBigInt64(Infinity,39n)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setBigInt64(13,39n)},"13 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(12,39n)},"12 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(11,39n)},"11 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(10,39n)},"10 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(9,39n)},"9 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(8,39n)},"8 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(7,39n)},"7 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(6,39n)},"6 + 8 > 12");assert.throws(RangeError,function(){sample.setBigInt64(5,39n)},"5 + 8 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 3 (offset)");sample=new DataView(buffer,0,8);assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 8 (length)");sample=new DataView(buffer,0,7);assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 7 (length)");sample=new DataView(buffer,4,8);assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 8 (offset+length)");sample=new DataView(buffer,4,7);assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 7 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getBigInt64(0),0n,"[0] no value was set");assert.sameValue(sample.getBigInt64(4),0n,"[1] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setBigInt64(1/0,39n)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setBigInt64(13,39n)},"13 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(12,39n)},"12 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(11,39n)},"11 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(10,39n)},"10 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(9,39n)},"9 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(8,39n)},"8 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(7,39n)},"7 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(6,39n)},"6 + 8 > 12"),assert.throws(RangeError,function(){sample.setBigInt64(5,39n)},"5 + 8 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 3 (offset)"),sample=new DataView(buffer,0,8),assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 8 (length)"),sample=new DataView(buffer,0,7),assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 7 (length)"),sample=new DataView(buffer,4,8),assert.throws(RangeError,function(){sample.setBigInt64(1,39n)},"1 + 8 > 8 (offset+length)"),sample=new DataView(buffer,4,7),assert.throws(RangeError,function(){sample.setBigInt64(0,39n)},"0 + 8 > 7 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getBigInt64(0),0n,"[0] no value was set"),assert.sameValue(sample.getBigInt64(4),0n,"[1] no value was set");



test262/test/built-ins/TypedArray/prototype/findIndex/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findIndex,"function","implements TypedArray.prototype.findIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findIndex(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findIndex(()=>{}),new Test262Error("findIndex completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findIndex,"function","implements TypedArray.prototype.findIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findIndex(()=>{});try{ab.resize(BPE*3)}catch{}array.findIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findIndex(()=>{}),new Test262Error("findIndex completed successfully")})});



test262/test/language/expressions/in/S11.8.7_A1.js


if(eval("'MAX_VALUE'	in	Number")!==!0)throw new Test262Error('#1: "MAX_VALUE"\\u0009in\\u0009Number === true');if(eval("'MAX_VALUE'\vin\vNumber")!==!0)throw new Test262Error('#2: "MAX_VALUE"\\u000Bin\\u000BNumber === true');if(eval("'MAX_VALUE'\fin\fNumber")!==!0)throw new Test262Error('#3: "MAX_VALUE"\\u000Cin\\u000CNumber === true');if(eval("'MAX_VALUE' in Number")!==!0)throw new Test262Error('#4: "MAX_VALUE"\\u0020in\\u0020Number === true');if(eval("'MAX_VALUE'\xA0in\xA0Number")!==!0)throw new Test262Error('#5: "MAX_VALUE"\\u00A0in\\u00A0Number === true');if(eval("'MAX_VALUE'\nin\nNumber")!==!0)throw new Test262Error('#6: "MAX_VALUE"\\u000Ain\\u000ANumber === true');if(eval("'MAX_VALUE'\rin\rNumber")!==!0)throw new Test262Error('#7: "MAX_VALUE"\\u000Din\\u000DNumber === true');if(eval("'MAX_VALUE'\u2028in\u2028Number")!==!0)throw new Test262Error('#8: "MAX_VALUE"\\u2028in\\u2028Number === true');if(eval("'MAX_VALUE'\u2029in\u2029Number")!==!0)throw new Test262Error('#9: "MAX_VALUE"\\u2029in\\u2029Number === true');if(eval("'MAX_VALUE'	\v\f \xA0\n\r\u2028\u2029in	\v\f \xA0\n\r\u2028\u2029Number")!==!0)throw new Test262Error('#10: "MAX_VALUE"\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029in\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number === true');


if(eval("'MAX_VALUE'	in	Number")!==!0)throw new Test262Error('#1: "MAX_VALUE"\\u0009in\\u0009Number === true');if(eval("'MAX_VALUE'\vin\vNumber")!==!0)throw new Test262Error('#2: "MAX_VALUE"\\u000Bin\\u000BNumber === true');if(eval("'MAX_VALUE'\fin\fNumber")!==!0)throw new Test262Error('#3: "MAX_VALUE"\\u000Cin\\u000CNumber === true');if(eval("'MAX_VALUE' in Number")!==!0)throw new Test262Error('#4: "MAX_VALUE"\\u0020in\\u0020Number === true');if(eval("'MAX_VALUE'\xA0in\xA0Number")!==!0)throw new Test262Error('#5: "MAX_VALUE"\\u00A0in\\u00A0Number === true');if(eval(`'MAX_VALUE'
in
Number`)!==!0)throw new Test262Error('#6: "MAX_VALUE"\\u000Ain\\u000ANumber === true');if(eval("'MAX_VALUE'\rin\rNumber")!==!0)throw new Test262Error('#7: "MAX_VALUE"\\u000Din\\u000DNumber === true');if(eval("'MAX_VALUE'\u2028in\u2028Number")!==!0)throw new Test262Error('#8: "MAX_VALUE"\\u2028in\\u2028Number === true');if(eval("'MAX_VALUE'\u2029in\u2029Number")!==!0)throw new Test262Error('#9: "MAX_VALUE"\\u2029in\\u2029Number === true');if(eval(`'MAX_VALUE'	\v\f \xA0
\r\u2028\u2029in	\v\f \xA0
\r\u2028\u2029Number`)!==!0)throw new Test262Error('#10: "MAX_VALUE"\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029in\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number === true');



test262/test/language/expressions/in/S11.8.7_A2.4_T3.js


try{throw max_value in(max_value="MAX_VALUE",Number),new Test262Error('#1.1: max_value in (max_value = "MAX_VALUE", Number) throw ReferenceError. Actual: '+(max_value in(max_value="MAX_VALUE",Number)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error('#1.2: max_value in (max_value = "MAX_VALUE", Number) throw ReferenceError. Actual: '+e)}


try{throw max_value in(max_value="MAX_VALUE",Number),new Test262Error('#1.1: max_value in (max_value = "MAX_VALUE", Number) throw ReferenceError. Actual: '+(max_value in(max_value="MAX_VALUE",Number)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error('#1.2: max_value in (max_value = "MAX_VALUE", Number) throw ReferenceError. Actual: '+e)}



test262/test/built-ins/TypedArray/prototype/findIndex/BigInt/return-negative-one-if-predicate-returns-false-value.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([1n,2n,3n]),called=0,result=sample.findIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1,"result is -1 when predicate returns are false");result=sample.findIndex(function(){return""});assert.sameValue(result,-1,"ToBoolean(string)");result=sample.findIndex(function(){return});assert.sameValue(result,-1,"ToBoolean(undefined)");result=sample.findIndex(function(){return null});assert.sameValue(result,-1,"ToBoolean(null)");result=sample.findIndex(function(){return 0});assert.sameValue(result,-1,"ToBoolean(0)");result=sample.findIndex(function(){return-0});assert.sameValue(result,-1,"ToBoolean(-0)");result=sample.findIndex(function(){return NaN});assert.sameValue(result,-1,"ToBoolean(NaN)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([1n,2n,3n]),called=0,result=sample.findIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1,"result is -1 when predicate returns are false"),result=sample.findIndex(function(){return""}),assert.sameValue(result,-1,"ToBoolean(string)"),result=sample.findIndex(function(){}),assert.sameValue(result,-1,"ToBoolean(undefined)"),result=sample.findIndex(function(){return null}),assert.sameValue(result,-1,"ToBoolean(null)"),result=sample.findIndex(function(){return 0}),assert.sameValue(result,-1,"ToBoolean(0)"),result=sample.findIndex(function(){return-0}),assert.sameValue(result,-1,"ToBoolean(-0)"),result=sample.findIndex(function(){return NaN}),assert.sameValue(result,-1,"ToBoolean(NaN)")});



test262/test/built-ins/Temporal/PlainYearMonth/from/infinity-throws-rangeerror.js


const base={year:2e3,month:5};[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={year:2e3,month:5};[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/String/15.5.5.5.2-3-2.js


var s="hello world";assert.sameValue(s["foo"],void 0,'s["foo"]');


var s="hello world";assert.sameValue(s.foo,void 0,'s["foo"]');



test262/test/language/expressions/in/S11.8.7_A3.js


try{throw"toString"in!0,new Test262Error('#1: "toString" in true throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1: "toString" in true throw TypeError')}try{throw"MAX_VALUE"in 1,new Test262Error('#2: "MAX_VALUE" in 1 throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2: "MAX_VALUE" in 1 throw TypeError')}try{throw"length"in"string",new Test262Error('#3: "length" in "string" throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#3: "length" in "string" throw TypeError')}try{throw"toString"in void 0,new Test262Error('#4: "toString" in undefined throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#4: "toString" in undefined throw TypeError')}try{throw"toString"in null,new Test262Error('#5: "toString" in null throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#5: "toString" in null throw TypeError')}


try{throw"toString"in!0,new Test262Error('#1: "toString" in true throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1: "toString" in true throw TypeError')}try{throw"MAX_VALUE"in 1,new Test262Error('#2: "MAX_VALUE" in 1 throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2: "MAX_VALUE" in 1 throw TypeError')}try{throw"length"in"string",new Test262Error('#3: "length" in "string" throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#3: "length" in "string" throw TypeError')}try{throw"toString"in void 0,new Test262Error('#4: "toString" in undefined throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#4: "toString" in undefined throw TypeError')}try{throw"toString"in null,new Test262Error('#5: "toString" in null throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#5: "toString" in null throw TypeError')}



test262/test/built-ins/DataView/prototype/setBigInt64/index-check-before-value-conversion.js


var dataView=new DataView(new ArrayBuffer(8),0),poisoned={valueOf(){throw new Test262Error("valueOf called")}};assert.throws(RangeError,function(){dataView.setBigInt64(-1.5,poisoned)},"setBigInt64(-1.5, poisoned)");assert.throws(RangeError,function(){dataView.setBigInt64(-1,poisoned)},"setBigInt64(-1, poisoned)");assert.throws(RangeError,function(){dataView.setBigInt64(-1/0,poisoned)},"setBigInt64(-Infinity, poisoned)");assert.throws(RangeError,function(){dataView.setBigInt64(Infinity,poisoned)},"setBigInt64(Infinity, poisoned)");


var dataView=new DataView(new ArrayBuffer(8),0),poisoned={valueOf(){throw new Test262Error("valueOf called")}};assert.throws(RangeError,function(){dataView.setBigInt64(-1.5,poisoned)},"setBigInt64(-1.5, poisoned)"),assert.throws(RangeError,function(){dataView.setBigInt64(-1,poisoned)},"setBigInt64(-1, poisoned)"),assert.throws(RangeError,function(){dataView.setBigInt64(-1/0,poisoned)},"setBigInt64(-Infinity, poisoned)"),assert.throws(RangeError,function(){dataView.setBigInt64(1/0,poisoned)},"setBigInt64(Infinity, poisoned)");



test262/test/built-ins/DataView/prototype/setBigInt64/set-values-little-endian-order.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0),result;result=sample.setBigInt64(0,-1870724872n,!0);assert.sameValue(result,void 0,"returns undefined #1");assert.sameValue(sample.getBigInt64(0),-576320491556438017n);result=sample.setBigInt64(0,-134185072n,!0);assert.sameValue(result,void 0,"returns undefined #2");assert.sameValue(sample.getBigInt64(0),-8034702140758818817n);result=sample.setBigInt64(0,0x6f80ff08n,!0);assert.sameValue(result,void 0,"returns undefined #3");assert.sameValue(sample.getBigInt64(0),0x8ff806f00000000n);result=sample.setBigInt64(0,0x8ff806fn,!0);assert.sameValue(result,void 0,"returns undefined #4");assert.sameValue(sample.getBigInt64(0),0x6f80ff0800000000n);result=sample.setBigInt64(0,0xf8007f90n,!0);assert.sameValue(result,void 0,"returns undefined #5");assert.sameValue(sample.getBigInt64(0),-8034702145053786112n);result=sample.setBigInt64(0,0x907f00f8n,!0);assert.sameValue(result,void 0,"returns undefined #6");assert.sameValue(sample.getBigInt64(0),-576320495851405312n);


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0),result;result=sample.setBigInt64(0,-0x6f80ff08n,!0),assert.sameValue(result,void 0,"returns undefined #1"),assert.sameValue(sample.getBigInt64(0),-0x7ff806f00000001n),result=sample.setBigInt64(0,-0x7ff8070n,!0),assert.sameValue(result,void 0,"returns undefined #2"),assert.sameValue(sample.getBigInt64(0),-0x6f80ff0700000001n),result=sample.setBigInt64(0,0x6f80ff08n,!0),assert.sameValue(result,void 0,"returns undefined #3"),assert.sameValue(sample.getBigInt64(0),0x8ff806f00000000n),result=sample.setBigInt64(0,0x8ff806fn,!0),assert.sameValue(result,void 0,"returns undefined #4"),assert.sameValue(sample.getBigInt64(0),0x6f80ff0800000000n),result=sample.setBigInt64(0,0xf8007f90n,!0),assert.sameValue(result,void 0,"returns undefined #5"),assert.sameValue(sample.getBigInt64(0),-0x6f80ff0800000000n),result=sample.setBigInt64(0,0x907f00f8n,!0),assert.sameValue(result,void 0,"returns undefined #6"),assert.sameValue(sample.getBigInt64(0),-0x7ff807000000000n);



test262/test/built-ins/TypedArray/prototype/findIndex/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findIndex,"function","implements TypedArray.prototype.findIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findIndex(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findIndex(()=>{}),new Test262Error("findIndex completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findIndex,"function","implements TypedArray.prototype.findIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findIndex(()=>{});try{ab.resize(BPE*3)}catch{}array.findIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findIndex(()=>{}),new Test262Error("findIndex completed successfully")})});



test262/test/language/expressions/in/S11.8.7_A2.1_T2.js


try{throw MAX_VALUE in Number,new Test262Error("#1.1: MAX_VALUE in Number throw ReferenceError. Actual: "+(MAX_VALUE in Number))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: MAX_VALUE in Number throw ReferenceError. Actual: "+e)}


try{throw MAX_VALUE in Number,new Test262Error("#1.1: MAX_VALUE in Number throw ReferenceError. Actual: "+(MAX_VALUE in Number))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: MAX_VALUE in Number throw ReferenceError. Actual: "+e)}



test262/test/built-ins/TypedArray/prototype/findIndex/return-negative-one-if-predicate-returns-false-value.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([1,2,3]),called=0,result=sample.findIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1,"result is -1 when predicate returns are false");result=sample.findIndex(function(){return""});assert.sameValue(result,-1,"ToBoolean(string)");result=sample.findIndex(function(){return});assert.sameValue(result,-1,"ToBoolean(undefined)");result=sample.findIndex(function(){return null});assert.sameValue(result,-1,"ToBoolean(null)");result=sample.findIndex(function(){return 0});assert.sameValue(result,-1,"ToBoolean(0)");result=sample.findIndex(function(){return-0});assert.sameValue(result,-1,"ToBoolean(-0)");result=sample.findIndex(function(){return NaN});assert.sameValue(result,-1,"ToBoolean(NaN)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([1,2,3]),called=0,result=sample.findIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1,"result is -1 when predicate returns are false"),result=sample.findIndex(function(){return""}),assert.sameValue(result,-1,"ToBoolean(string)"),result=sample.findIndex(function(){}),assert.sameValue(result,-1,"ToBoolean(undefined)"),result=sample.findIndex(function(){return null}),assert.sameValue(result,-1,"ToBoolean(null)"),result=sample.findIndex(function(){return 0}),assert.sameValue(result,-1,"ToBoolean(0)"),result=sample.findIndex(function(){return-0}),assert.sameValue(result,-1,"ToBoolean(-0)"),result=sample.findIndex(function(){return NaN}),assert.sameValue(result,-1,"ToBoolean(NaN)")});



test262/test/built-ins/DataView/prototype/setBigInt64/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setBigInt64(Infinity,0)},"DataView access at index Infinity should throw");assert.throws(RangeError,function(){sample.setBigInt64(-1,0)},"DataView access at index -1 should throw");


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setBigInt64(1/0,0)},"DataView access at index Infinity should throw"),assert.throws(RangeError,function(){sample.setBigInt64(-1,0)},"DataView access at index -1 should throw");



test262/test/language/expressions/in/S11.8.7_A2.1_T3.js


try{throw"MAX_VALUE"in NUMBER,new Test262Error('#1.1: "MAX_VALUE" in NUMBER throw ReferenceError. Actual: '+("MAX_VALUE"in NUMBER))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error('#1.2: "MAX_VALUE" in NUMBER throw ReferenceError. Actual: '+e)}


try{throw"MAX_VALUE"in NUMBER,new Test262Error('#1.1: "MAX_VALUE" in NUMBER throw ReferenceError. Actual: '+("MAX_VALUE"in NUMBER))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error('#1.2: "MAX_VALUE" in NUMBER throw ReferenceError. Actual: '+e)}



test262/test/language/statements/try/12.14-4.js


var o={foo:42};try{throw o}catch(e){var foo}assert.sameValue(foo,void 0);


var o={foo:42};try{throw o}catch{var foo}assert.sameValue(foo,void 0);



test262/test/built-ins/parseInt/S15.1.2.2_A3.1_T6.js


assert.sameValue(parseInt("11",new String("2")),parseInt("11",2),'parseInt("11", new String("2")) must return the same value returned by parseInt("11", 2)'),assert.sameValue(parseInt("11",new String("Infinity")),parseInt("11",Infinity),'parseInt("11", new String("Infinity")) must return the same value returned by parseInt("11", Infinity)');


assert.sameValue(parseInt("11",new String("2")),parseInt("11",2),'parseInt("11", new String("2")) must return the same value returned by parseInt("11", 2)'),assert.sameValue(parseInt("11",new String("Infinity")),parseInt("11",1/0),'parseInt("11", new String("Infinity")) must return the same value returned by parseInt("11", Infinity)');



test262/test/language/expressions/grouping/S11.1.6_A3_T7.js


if(typeof x!="undefined")throw new Test262Error('#1: typeof (x) === "undefined". Actual: '+typeof x);


if(typeof x<"u")throw new Test262Error('#1: typeof (x) === "undefined". Actual: '+typeof x);



test262/test/built-ins/TypedArray/prototype/findIndex/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.findIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,-1,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.findIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,-1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.findIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,-1,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.findIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,-1,"result (grow)")});



test262/test/built-ins/Array/prototype/findIndex/return-negative-one-if-predicate-returns-false-value.js


var arr=["Shoes","Car","Bike"],called=0,result=arr.findIndex(function(val){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1);result=arr.findIndex(function(val){return""});assert.sameValue(result,-1,"coerced string");result=arr.findIndex(function(val){return});assert.sameValue(result,-1,"coerced undefined");result=arr.findIndex(function(val){return null});assert.sameValue(result,-1,"coerced null");result=arr.findIndex(function(val){return 0});assert.sameValue(result,-1,"coerced 0");result=arr.findIndex(function(val){return NaN});assert.sameValue(result,-1,"coerced NaN");


var arr=["Shoes","Car","Bike"],called=0,result=arr.findIndex(function(val){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1),result=arr.findIndex(function(val){return""}),assert.sameValue(result,-1,"coerced string"),result=arr.findIndex(function(val){}),assert.sameValue(result,-1,"coerced undefined"),result=arr.findIndex(function(val){return null}),assert.sameValue(result,-1,"coerced null"),result=arr.findIndex(function(val){return 0}),assert.sameValue(result,-1,"coerced 0"),result=arr.findIndex(function(val){return NaN}),assert.sameValue(result,-1,"coerced NaN");



test262/test/built-ins/DataView/prototype/getUint16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getUint16(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getUint16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint16(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getUint16(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getUint16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint16(0),new Test262Error("the operation completed successfully")});



test262/test/language/expressions/grouping/S11.1.6_A3_T6.js


if(delete x!==!0)throw new Test262Error("#1: delete (x) === true");


if(!delete x)throw new Test262Error("#1: delete (x) === true");



test262/test/language/expressions/grouping/S11.1.6_A1.js


if(eval("(	1	)")!==1)throw new Test262Error("#1: (\\u00091\\u0009) === 1");if(eval("(\v1\v)")!==1)throw new Test262Error("#2: (\\u000B1\\u000B) === 1");if(eval("(\f1\f)")!==1)throw new Test262Error("#3: (\\u000C1\\u000C) === 1");if(eval("( 1 )")!==1)throw new Test262Error("#4: (\\u00201\\u0020 === 1");if(eval("(\xA01\xA0)")!==1)throw new Test262Error("#5: (\\u00A01\\u00A0) === 1");if(eval("(\n1\n)")!==1)throw new Test262Error("#6: (\\u000A1\\u000A) === 1");if(eval("(\r1\r)")!==1)throw new Test262Error("#7: (\\u000D1\\u000D) === 1");if(eval("(\u20281\u2028)")!==1)throw new Test262Error("#8: (\\u20281\\u2028) === 1");if(eval("(\u20291\u2029)")!==1)throw new Test262Error("#9: (\\u20291\\u2029) === 1");if(eval("(	\v\f \xA0\n\r\u2028\u20291	\v\f \xA0\n\r\u2028\u2029)")!==1)throw new Test262Error("#10: (\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029) === 1");


if(eval("(	1	)")!==1)throw new Test262Error("#1: (\\u00091\\u0009) === 1");if(eval("(\v1\v)")!==1)throw new Test262Error("#2: (\\u000B1\\u000B) === 1");if(eval("(\f1\f)")!==1)throw new Test262Error("#3: (\\u000C1\\u000C) === 1");if(eval("( 1 )")!==1)throw new Test262Error("#4: (\\u00201\\u0020 === 1");if(eval("(\xA01\xA0)")!==1)throw new Test262Error("#5: (\\u00A01\\u00A0) === 1");if(eval(`(
1
)`)!==1)throw new Test262Error("#6: (\\u000A1\\u000A) === 1");if(eval("(\r1\r)")!==1)throw new Test262Error("#7: (\\u000D1\\u000D) === 1");if(eval("(\u20281\u2028)")!==1)throw new Test262Error("#8: (\\u20281\\u2028) === 1");if(eval("(\u20291\u2029)")!==1)throw new Test262Error("#9: (\\u20291\\u2029) === 1");if(eval(`(	\v\f \xA0
\r\u2028\u20291	\v\f \xA0
\r\u2028\u2029)`)!==1)throw new Test262Error("#10: (\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029) === 1");



test262/test/built-ins/DataView/prototype/getUint16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getUint16(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getUint16(13)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.getUint16(12)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.getUint16(11)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getUint16(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getUint16(13)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.getUint16(12)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.getUint16(11)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.getUint16(1)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.getUint16(0)},"0 + 2 > 1 (offset+length)");



test262/test/language/expressions/grouping/S11.1.6_A2_T2.js


if(delete x!==!0)throw new Test262Error("#1: delete (x) === true");


if(!delete x)throw new Test262Error("#1: delete (x) === true");



test262/test/built-ins/Array/prototype/findIndex/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.findIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,-1,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.findIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,-1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.findIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,-1,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.findIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,-1,"result (grow)")});



test262/test/built-ins/Temporal/PlainDateTime/from/infinity-throws-rangeerror.js


const base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/parseInt/S15.1.2.2_A6.1_T6.js


assert.sameValue(parseInt("0123456789",2),1,'parseInt("0123456789", 2) must return 1'),assert.sameValue(parseInt("01234567890",3),5,'parseInt("01234567890", 3) must return 5'),assert.sameValue(parseInt("01234567890",4),27,'parseInt("01234567890", 4) must return 27'),assert.sameValue(parseInt("01234567890",5),194,'parseInt("01234567890", 5) must return 194'),assert.sameValue(parseInt("01234567890",6),1865,'parseInt("01234567890", 6) must return 1865'),assert.sameValue(parseInt("01234567890",7),22875,'parseInt("01234567890", 7) must return 22875'),assert.sameValue(parseInt("01234567890",8),342391,'parseInt("01234567890", 8) must return 342391'),assert.sameValue(parseInt("01234567890",9),6053444,'parseInt("01234567890", 9) must return 6053444'),assert.sameValue(parseInt("01234567890",10),Number(1234567890),'parseInt("01234567890", 10) must return the same value returned by Number(1234567890)');


assert.sameValue(parseInt("0123456789",2),1,'parseInt("0123456789", 2) must return 1'),assert.sameValue(parseInt("01234567890",3),5,'parseInt("01234567890", 3) must return 5'),assert.sameValue(parseInt("01234567890",4),27,'parseInt("01234567890", 4) must return 27'),assert.sameValue(parseInt("01234567890",5),194,'parseInt("01234567890", 5) must return 194'),assert.sameValue(parseInt("01234567890",6),1865,'parseInt("01234567890", 6) must return 1865'),assert.sameValue(parseInt("01234567890",7),22875,'parseInt("01234567890", 7) must return 22875'),assert.sameValue(parseInt("01234567890",8),342391,'parseInt("01234567890", 8) must return 342391'),assert.sameValue(parseInt("01234567890",9),6053444,'parseInt("01234567890", 9) must return 6053444'),assert.sameValue(parseInt("01234567890",10),1234567890,'parseInt("01234567890", 10) must return the same value returned by Number(1234567890)');



test262/test/built-ins/parseInt/S15.1.2.2_A3.1_T5.js


assert.sameValue(parseInt("11",new Number(2)),parseInt("11",2),'parseInt("11", new Number(2)) must return the same value returned by parseInt("11", 2)'),assert.sameValue(parseInt("11",new Number(Infinity)),parseInt("11",Infinity),'parseInt("11", new Number(Infinity)) must return the same value returned by parseInt("11", Infinity)');


assert.sameValue(parseInt("11",new Number(2)),parseInt("11",2),'parseInt("11", new Number(2)) must return the same value returned by parseInt("11", 2)'),assert.sameValue(parseInt("11",new Number(1/0)),parseInt("11",1/0),'parseInt("11", new Number(Infinity)) must return the same value returned by parseInt("11", Infinity)');



test262/test/built-ins/DataView/prototype/getUint16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getUint16(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getUint16(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getUint16(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getUint16(-1)});



test262/test/language/expressions/prefix-decrement/bigint.js


var x=1n;assert.sameValue(--x,0n,"var x = 1n; --x === 0n");assert.sameValue(x,0n,"var x = 1n; --x; x === 0n");var x=0n;assert.sameValue(--x,-1n,"var x = 0n; --x === -1n");assert.sameValue(x,-1n,"var x = 0n; --x; x === -1n");var x=123457n;assert.sameValue(--x,123456n,"var x = 123457n; --x === 123456n");assert.sameValue(x,123456n,"var x = 123457n; --x; x === 123456n");var x=-123456n;assert.sameValue(--x,-123457n,"var x = -123456n; --x === -123457n");assert.sameValue(x,-123457n,"var x = -123456n; --x; x === -123457n");var x=0x1fffffffffffff01n;assert.sameValue(--x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; --x === 0x1fffffffffffff00n");assert.sameValue(x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; --x; x === 0x1fffffffffffff00n");var x=-2305843009213693696n;assert.sameValue(--x,-2305843009213693697n,"var x = -0x1fffffffffffff00n; --x === -0x1fffffffffffff01n");assert.sameValue(x,-2305843009213693697n,"var x = -0x1fffffffffffff00n; --x; x === -0x1fffffffffffff01n");var x={y:1n};assert.sameValue(--x.y,0n,"var x = {y:1n}; --x.y === 0n");assert.sameValue(x.y,0n,"var x = {y:1n}; --x.y; x.y === 0n");var x={y:{z:1n}};assert.sameValue(--x.y.z,0n,"var x = {y:{z:1n}}; --x.y.z === 0n");assert.sameValue(x.y.z,0n,"var x = {y:{z:1n}}; --x.y.z; x.y.z === 0n");var x=[1n];assert.sameValue(--x[0],0n,"var x = [1n]; --x[0] === 0n");assert.sameValue(x[0],0n,"var x = [1n]; --x[0]; x[0] === 0n");var x=[null,[null,null,1n]];assert.sameValue(--x[1][2],0n,"var x = [null, [null, null, 1n]]; --x[1][2] === 0n");assert.sameValue(x[1][2],0n,"var x = [null, [null, null, 1n]]; --x[1][2]; x[1][2] === 0n");var x={y:[1n]};assert.sameValue(--x.y[0],0n,"var x = {y:[1n]}; --x.y[0] === 0n");assert.sameValue(x.y[0],0n,"var x = {y:[1n]}; --x.y[0]; x.y[0] === 0n");var x=[{z:1n}];assert.sameValue(--x[0].z,0n,"var x = [{z:1n}]; --x[0].z === 0n");assert.sameValue(x[0].z,0n,"var x = [{z:1n}]; --x[0].z; x[0].z === 0n");


var x=1n;assert.sameValue(--x,0n,"var x = 1n; --x === 0n"),assert.sameValue(x,0n,"var x = 1n; --x; x === 0n");var x=0n;assert.sameValue(--x,-1n,"var x = 0n; --x === -1n"),assert.sameValue(x,-1n,"var x = 0n; --x; x === -1n");var x=123457n;assert.sameValue(--x,123456n,"var x = 123457n; --x === 123456n"),assert.sameValue(x,123456n,"var x = 123457n; --x; x === 123456n");var x=-123456n;assert.sameValue(--x,-123457n,"var x = -123456n; --x === -123457n"),assert.sameValue(x,-123457n,"var x = -123456n; --x; x === -123457n");var x=0x1fffffffffffff01n;assert.sameValue(--x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; --x === 0x1fffffffffffff00n"),assert.sameValue(x,0x1fffffffffffff00n,"var x = 0x1fffffffffffff01n; --x; x === 0x1fffffffffffff00n");var x=-0x1fffffffffffff00n;assert.sameValue(--x,-0x1fffffffffffff01n,"var x = -0x1fffffffffffff00n; --x === -0x1fffffffffffff01n"),assert.sameValue(x,-0x1fffffffffffff01n,"var x = -0x1fffffffffffff00n; --x; x === -0x1fffffffffffff01n");var x={y:1n};assert.sameValue(--x.y,0n,"var x = {y:1n}; --x.y === 0n"),assert.sameValue(x.y,0n,"var x = {y:1n}; --x.y; x.y === 0n");var x={y:{z:1n}};assert.sameValue(--x.y.z,0n,"var x = {y:{z:1n}}; --x.y.z === 0n"),assert.sameValue(x.y.z,0n,"var x = {y:{z:1n}}; --x.y.z; x.y.z === 0n");var x=[1n];assert.sameValue(--x[0],0n,"var x = [1n]; --x[0] === 0n"),assert.sameValue(x[0],0n,"var x = [1n]; --x[0]; x[0] === 0n");var x=[null,[null,null,1n]];assert.sameValue(--x[1][2],0n,"var x = [null, [null, null, 1n]]; --x[1][2] === 0n"),assert.sameValue(x[1][2],0n,"var x = [null, [null, null, 1n]]; --x[1][2]; x[1][2] === 0n");var x={y:[1n]};assert.sameValue(--x.y[0],0n,"var x = {y:[1n]}; --x.y[0] === 0n"),assert.sameValue(x.y[0],0n,"var x = {y:[1n]}; --x.y[0]; x.y[0] === 0n");var x=[{z:1n}];assert.sameValue(--x[0].z,0n,"var x = [{z:1n}]; --x[0].z === 0n"),assert.sameValue(x[0].z,0n,"var x = [{z:1n}]; --x[0].z; x[0].z === 0n");



test262/test/built-ins/TypedArray/prototype/sort/sorted-values-nan.js


testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([2,NaN,NaN,0,1]).sort();assert.sameValue(sample[0],0,"#1 [0]");assert.sameValue(sample[1],1,"#1 [1]");assert.sameValue(sample[2],2,"#1 [2]");assert.sameValue(sample[3],NaN,"#1 [3]");assert.sameValue(sample[4],NaN,"#1 [4]");sample=new TA([3,NaN,NaN,Infinity,0,-1/0,2]).sort();assert.sameValue(sample[0],-1/0,"#2 [0]");assert.sameValue(sample[1],0,"#2 [1]");assert.sameValue(sample[2],2,"#2 [2]");assert.sameValue(sample[3],3,"#2 [3]");assert.sameValue(sample[4],Infinity,"#2 [4]");assert.sameValue(sample[5],NaN,"#2 [5]");assert.sameValue(sample[6],NaN,"#2 [6]")},floatArrayConstructors);


testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([2,NaN,NaN,0,1]).sort(),assert.sameValue(sample[0],0,"#1 [0]"),assert.sameValue(sample[1],1,"#1 [1]"),assert.sameValue(sample[2],2,"#1 [2]"),assert.sameValue(sample[3],NaN,"#1 [3]"),assert.sameValue(sample[4],NaN,"#1 [4]"),sample=new TA([3,NaN,NaN,1/0,0,-1/0,2]).sort(),assert.sameValue(sample[0],-1/0,"#2 [0]"),assert.sameValue(sample[1],0,"#2 [1]"),assert.sameValue(sample[2],2,"#2 [2]"),assert.sameValue(sample[3],3,"#2 [3]"),assert.sameValue(sample[4],1/0,"#2 [4]"),assert.sameValue(sample[5],NaN,"#2 [5]"),assert.sameValue(sample[6],NaN,"#2 [6]")},floatArrayConstructors);



test262/test/language/statements/try/S12.14_A10_T4.js


for(var c1=0,fin=0;c1<2;){try{c1+=1;break}catch(er1){}finally{fin=1;continue}fin=-1;c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==2)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');for(var c2=0,fin2=0;c2<2;){try{throw"ex1"}catch(er1){c2+=1;break}finally{fin2=1;continue}c2+=2;fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==2)throw new Test262Error('#2.2: "try catch{break} finally{continue} must work correctly');


for(var c1=0,fin=0;c1<2;){try{c1+=1;break}catch{}finally{fin=1;continue}fin=-1,c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==2)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');for(var c2=0,fin2=0;c2<2;){try{throw"ex1"}catch{c2+=1;break}finally{fin2=1;continue}c2+=2,fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==2)throw new Test262Error('#2.2: "try catch{break} finally{continue} must work correctly');



test262/test/built-ins/DataView/prototype/byteOffset/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function");var ab=new ArrayBuffer(4,{maxByteLength:5}),dataView=new DataView(ab,1,2);assert.sameValue(dataView.byteOffset,1);try{ab.resize(5)}catch(_){}assert.sameValue(dataView.byteOffset,1,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(dataView.byteOffset,1,"following shrink (within bounds)");var expectedError;try{ab.resize(2),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw dataView.byteOffset,new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function");var ab=new ArrayBuffer(4,{maxByteLength:5}),dataView=new DataView(ab,1,2);assert.sameValue(dataView.byteOffset,1);try{ab.resize(5)}catch{}assert.sameValue(dataView.byteOffset,1,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(dataView.byteOffset,1,"following shrink (within bounds)");var expectedError;try{ab.resize(2),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw dataView.byteOffset,new Test262Error("the operation completed successfully")});



test262/test/built-ins/TypedArray/prototype/sort/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.sort,"function","implements TypedArray.prototype.sort"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.sort();try{ab.resize(BPE*3)}catch(_){}array.sort();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.sort(),new Test262Error("sort completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.sort,"function","implements TypedArray.prototype.sort"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.sort();try{ab.resize(BPE*3)}catch{}array.sort();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.sort(),new Test262Error("sort completed successfully")})});



test262/test/language/statements/try/S12.14_A12_T4.js


var x,mycars=[];mycars[0]="Saab";mycars[1]="Volvo";mycars[2]="BMW";var c1=0,fin=0;for(x in mycars){try{c1+=1;break}catch(er1){}finally{fin=1;continue}fin=-1;c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==3)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');var c2=0,fin2=0;for(x in mycars){try{throw"ex1"}catch(er1){c2+=1;break}finally{fin2=1;continue}c2+=2;fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==3)throw new Test262Error('#2.2: "try catch{break} finally{continue}" must work correctly');


var x,mycars=new Array;mycars[0]="Saab",mycars[1]="Volvo",mycars[2]="BMW";var c1=0,fin=0;for(x in mycars){try{c1+=1;break}catch{}finally{fin=1;continue}fin=-1,c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==3)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');var c2=0,fin2=0;for(x in mycars){try{throw"ex1"}catch{c2+=1;break}finally{fin2=1;continue}c2+=2,fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==3)throw new Test262Error('#2.2: "try catch{break} finally{continue}" must work correctly');



test262/test/language/statements/try/S12.14_A4.js


try{throw"catchme"}catch(e){if(delete e)throw new Test262Error("#1.2: Exception has DontDelete property");if(e!=="catchme")throw new Test262Error('#1.3: Exception === "catchme". Actual:  Exception ==='+e)}try{throw"catchme"}catch(e){}try{throw e,new Test262Error('#2.2: Deleting catching exception after ending "catch" block')}catch(err){}


try{throw"catchme"}catch(e2){if(delete e2)throw new Test262Error("#1.2: Exception has DontDelete property");if(e2!=="catchme")throw new Test262Error('#1.3: Exception === "catchme". Actual:  Exception ==='+e2)}try{throw"catchme"}catch{}try{throw e,new Test262Error('#2.2: Deleting catching exception after ending "catch" block')}catch{}



test262/test/language/statements/try/12.14-3.js


try{throw new Error}catch(e){var foo="declaration in catch"}assert.sameValue(foo,"declaration in catch");


try{throw new Error}catch{var foo="declaration in catch"}assert.sameValue(foo,"declaration in catch");



test262/test/built-ins/String/raw/special-characters.js


assert.sameValue(String.raw`\u0065\`\r\r\n\n${"test"}check`,"\\u0065\\`\\r\\r\\n\\ntestcheck","Unicode escape sequences"),assert.sameValue(String.raw`\
\
\
`,"\\\n\\\n\\\n","Literal characters");


assert.sameValue(String.raw`\u0065\`\r\r\n\n${"test"}check`,"\\u0065\\`\\r\\r\\n\\ntestcheck","Unicode escape sequences"),assert.sameValue(String.raw`\
\
\
`,`\\
\\
\\
`,"Literal characters");



test262/test/built-ins/TypedArray/prototype/sort/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.sort,"function","implements TypedArray.prototype.sort"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.sort();try{ab.resize(BPE*3)}catch(_){}array.sort();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.sort(),new Test262Error("sort completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.sort,"function","implements TypedArray.prototype.sort"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.sort();try{ab.resize(BPE*3)}catch{}array.sort();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.sort(),new Test262Error("sort completed successfully")})});



test262/test/built-ins/Temporal/PlainYearMonth/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5);[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const instance=new Temporal.PlainYearMonth(2e3,5);[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/language/expressions/prefix-decrement/S11.4.5_A2.1_T2.js


try{throw--x,new Test262Error("#1.1: --x throw ReferenceError. Actual: "+--x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: --x throw ReferenceError. Actual: "+e)}


try{throw--x,new Test262Error("#1.1: --x throw ReferenceError. Actual: "+--x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: --x throw ReferenceError. Actual: "+e)}



test262/test/built-ins/parseInt/S15.1.2.2_A9.3.js


assert.sameValue(parseInt.length,2,"The value of parseInt.length is 2"),verifyNotWritable(parseInt,"length",null,Infinity);


assert.sameValue(parseInt.length,2,"The value of parseInt.length is 2"),verifyNotWritable(parseInt,"length",null,1/0);



test262/test/built-ins/DataView/prototype/setInt8/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setInt8(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setInt8(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt8(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setInt8(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setInt8(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt8(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setInt8/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(4);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setInt8(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setInt8(5,39)},"5 + 1 > 4");assert.throws(RangeError,function(){sample.setInt8(4,39)},"4 + 1 > 4");sample=new DataView(buffer,3);assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (offset)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (length)");sample=new DataView(buffer,2,1);assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getInt8(0),0,"[0] no value was set");assert.sameValue(sample.getInt8(1),0,"[1] no value was set");assert.sameValue(sample.getInt8(2),0,"[2] no value was set");assert.sameValue(sample.getInt8(3),0,"[3] no value was set");


var sample,buffer=new ArrayBuffer(4);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setInt8(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setInt8(5,39)},"5 + 1 > 4"),assert.throws(RangeError,function(){sample.setInt8(4,39)},"4 + 1 > 4"),sample=new DataView(buffer,3),assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (offset)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (length)"),sample=new DataView(buffer,2,1),assert.throws(RangeError,function(){sample.setInt8(1,39)},"1 + 1 > 1 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getInt8(0),0,"[0] no value was set"),assert.sameValue(sample.getInt8(1),0,"[1] no value was set"),assert.sameValue(sample.getInt8(2),0,"[2] no value was set"),assert.sameValue(sample.getInt8(3),0,"[3] no value was set");



test262/test/language/statements/try/S12.14_A1.js


try{var x=0}catch(e){throw new Test262Error("#1: If Result(1).type is not throw, return Result(1). Actual: 4 Return(Result(3))")}var c1=0;try{var x1=1}finally{c1=1}if(x1!==1)throw new Test262Error('#2.1: "try" block must be evaluated. Actual: try Block has not been evaluated');if(c1!==1)throw new Test262Error('#2.2: "finally" block must be evaluated. Actual: finally Block has not been evaluated');var c2=0;try{var x2=1}catch(e){throw new Test262Error("#3.1: If Result(1).type is not throw, return Result(1). Actual: 4 Return(Result(3))")}finally{c2=1}if(x2!==1)throw new Test262Error('#3.2: "try" block must be evaluated. Actual: try Block has not been evaluated');if(c2!==1)throw new Test262Error('#3.3: "finally" block must be evaluated. Actual: finally Block has not been evaluated');


try{var x=0}catch{throw new Test262Error("#1: If Result(1).type is not throw, return Result(1). Actual: 4 Return(Result(3))")}var c1=0;try{var x1=1}finally{c1=1}if(x1!==1)throw new Test262Error('#2.1: "try" block must be evaluated. Actual: try Block has not been evaluated');if(c1!==1)throw new Test262Error('#2.2: "finally" block must be evaluated. Actual: finally Block has not been evaluated');var c2=0;try{var x2=1}catch{throw new Test262Error("#3.1: If Result(1).type is not throw, return Result(1). Actual: 4 Return(Result(3))")}finally{c2=1}if(x2!==1)throw new Test262Error('#3.2: "try" block must be evaluated. Actual: try Block has not been evaluated');if(c2!==1)throw new Test262Error('#3.3: "finally" block must be evaluated. Actual: finally Block has not been evaluated');



test262/test/built-ins/TypedArray/prototype/sort/sorted-values.js


testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([4,3,2,1]).sort();assert(compareArray(sample,[1,2,3,4]),"descending values");sample=new TA([3,4,1,2]).sort();assert(compareArray(sample,[1,2,3,4]),"mixed numbers");sample=new TA([3,4,3,1,0,1,2]).sort();assert(compareArray(sample,[0,1,1,2,3,3,4]),"repeating numbers")}),testWithTypedArrayConstructors(function(TA){var sample=new TA([1,0,-0,2]).sort();assert(compareArray(sample,[-0,0,1,2]),"0s")},floatArrayConstructors),testWithTypedArrayConstructors(function(TA){var sample=new TA([1,0,-0,2]).sort();assert(compareArray(sample,[0,0,1,2]),"0s")},intArrayConstructors),testWithTypedArrayConstructors(function(TA){var sample=new TA([-4,3,4,-3,2,-2,1,0]).sort();assert(compareArray(sample,[-4,-3,-2,0,1,2,3,4]),"negative values")},floatArrayConstructors.concat([Int8Array,Int16Array,Int32Array])),testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([.5,0,1.5,1]).sort();assert(compareArray(sample,[0,.5,1,1.5]),"non integers");sample=new TA([.5,0,1.5,-.5,-1,-1.5,1]).sort();assert(compareArray(sample,[-1.5,-1,-.5,0,.5,1,1.5]),"non integers + negatives");sample=new TA([3,4,Infinity,-1/0,1,2]).sort();assert(compareArray(sample,[-1/0,1,2,3,4,Infinity]),"infinities")},floatArrayConstructors);


testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([4,3,2,1]).sort(),assert(compareArray(sample,[1,2,3,4]),"descending values"),sample=new TA([3,4,1,2]).sort(),assert(compareArray(sample,[1,2,3,4]),"mixed numbers"),sample=new TA([3,4,3,1,0,1,2]).sort(),assert(compareArray(sample,[0,1,1,2,3,3,4]),"repeating numbers")}),testWithTypedArrayConstructors(function(TA){var sample=new TA([1,0,-0,2]).sort();assert(compareArray(sample,[-0,0,1,2]),"0s")},floatArrayConstructors),testWithTypedArrayConstructors(function(TA){var sample=new TA([1,0,-0,2]).sort();assert(compareArray(sample,[0,0,1,2]),"0s")},intArrayConstructors),testWithTypedArrayConstructors(function(TA){var sample=new TA([-4,3,4,-3,2,-2,1,0]).sort();assert(compareArray(sample,[-4,-3,-2,0,1,2,3,4]),"negative values")},floatArrayConstructors.concat([Int8Array,Int16Array,Int32Array])),testWithTypedArrayConstructors(function(TA){var sample;sample=new TA([.5,0,1.5,1]).sort(),assert(compareArray(sample,[0,.5,1,1.5]),"non integers"),sample=new TA([.5,0,1.5,-.5,-1,-1.5,1]).sort(),assert(compareArray(sample,[-1.5,-1,-.5,0,.5,1,1.5]),"non integers + negatives"),sample=new TA([3,4,1/0,-1/0,1,2]).sort(),assert(compareArray(sample,[-1/0,1,2,3,4,1/0]),"infinities")},floatArrayConstructors);



test262/test/built-ins/parseInt/S15.1.2.2_A2_T7.js


assert.sameValue(parseInt("\n1"),parseInt("1"),'parseInt("\\u000A1") must return the same value returned by parseInt("1")'),assert.sameValue(parseInt("\n\n-1"),parseInt("-1"),'parseInt("\\u000A\\u000A-1") must return the same value returned by parseInt("-1")'),assert.sameValue(parseInt("\n"),NaN,'parseInt("\\u000A") must return NaN');


assert.sameValue(parseInt(`
1`),parseInt("1"),'parseInt("\\u000A1") must return the same value returned by parseInt("1")'),assert.sameValue(parseInt(`

-1`),parseInt("-1"),'parseInt("\\u000A\\u000A-1") must return the same value returned by parseInt("-1")'),assert.sameValue(parseInt(`
`),NaN,'parseInt("\\u000A") must return NaN');



test262/test/language/statements/try/12.14-8.js


var o={foo:42};try{throw o}catch(e){var foo=1}assert.sameValue(o.foo,42);


var o={foo:42};try{throw o}catch{var foo=1}assert.sameValue(o.foo,42);



test262/test/built-ins/Temporal/PlainYearMonth/prototype/toPlainDate/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5);[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({day:inf}),`day property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"day");assert.throws(RangeError,()=>instance.toPlainDate({day:obj}));assert.compareArray(calls,["get day.valueOf","call day.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainYearMonth(2e3,5);[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({day:inf}),`day property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"day");assert.throws(RangeError,()=>instance.toPlainDate({day:obj})),assert.compareArray(calls,["get day.valueOf","call day.valueOf"],"it fails after fetching the primitive value")});



test262/test/built-ins/DataView/prototype/setInt8/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setInt8(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setInt8(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setInt8(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setInt8(-1,0)});



test262/test/language/expressions/arrow-function/arrow/concisebody-lookahead-assignmentexpression-1.js


x=>x=>x;





test262/test/language/statements/try/S12.14_A11_T4.js


for(var c1=0,fin=0,i=0;i<5;i++){try{c1+=1;break}catch(er1){}finally{fin=1;continue}fin=-1;c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==5)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');for(var c2=0,fin2=0,i=0;i<5;i++){try{throw"ex1"}catch(er1){c2+=1;break}finally{fin2=1;continue}c2+=2;fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==5)throw new Test262Error('#2.2: "try catch{break} finally{continue}" must work correctly');


for(var c1=0,fin=0,i=0;i<5;i++){try{c1+=1;break}catch{}finally{fin=1;continue}fin=-1,c1+=2}if(fin!==1)throw new Test262Error('#1.1: "finally" block must be evaluated');if(c1!==5)throw new Test262Error('#1.2: "try{break} catch finally{continue}" must work correctly');for(var c2=0,fin2=0,i=0;i<5;i++){try{throw"ex1"}catch{c2+=1;break}finally{fin2=1;continue}c2+=2,fin2=-1}if(fin2!==1)throw new Test262Error('#2.1: "finally" block must be evaluated');if(c2!==5)throw new Test262Error('#2.2: "try catch{break} finally{continue}" must work correctly');



test262/test/built-ins/DataView/prototype/setUint16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setUint16(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setUint16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint16(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setUint16(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setUint16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint16(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setUint16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setUint16(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setUint16(13,39)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.setUint16(12,39)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.setUint16(11,39)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getUint16(0),0,"[0] no value was set");assert.sameValue(sample.getUint16(2),0,"[1] no value was set");assert.sameValue(sample.getUint16(4),0,"[2] no value was set");assert.sameValue(sample.getUint16(6),0,"[3] no value was set");assert.sameValue(sample.getUint16(8),0,"[4] no value was set");assert.sameValue(sample.getUint16(10),0,"[5] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setUint16(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setUint16(13,39)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.setUint16(12,39)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.setUint16(11,39)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.setUint16(1,39)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.setUint16(0,39)},"0 + 2 > 1 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getUint16(0),0,"[0] no value was set"),assert.sameValue(sample.getUint16(2),0,"[1] no value was set"),assert.sameValue(sample.getUint16(4),0,"[2] no value was set"),assert.sameValue(sample.getUint16(6),0,"[3] no value was set"),assert.sameValue(sample.getUint16(8),0,"[4] no value was set"),assert.sameValue(sample.getUint16(10),0,"[5] no value was set");



test262/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.fill,"function","implements TypedArray.prototype.fill"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.fill(0n);try{ab.resize(BPE*3)}catch(_){}array.fill(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.fill(0n),new Test262Error("fill completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.fill,"function","implements TypedArray.prototype.fill"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.fill(0n);try{ab.resize(BPE*3)}catch{}array.fill(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.fill(0n),new Test262Error("fill completed successfully")})});



test262/test/built-ins/eval/length-non-writable.js


var x=eval.length;verifyNotWritable(eval,"length",null,Infinity);if(eval.length!==x)throw new Test262Error("#1: x = eval.length; eval.length = Infinity; eval.length === x. Actual: "+eval.length);


var x=eval.length;if(verifyNotWritable(eval,"length",null,1/0),eval.length!==x)throw new Test262Error("#1: x = eval.length; eval.length = Infinity; eval.length === x. Actual: "+eval.length);



test262/test/built-ins/Temporal/Instant/prototype/add/infinity-throws-rangeerror.js


const fields=["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.Instant.fromEpochMilliseconds(1e4);fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.Instant.fromEpochMilliseconds(1e4);fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/built-ins/RegExp/S15.10.2.13_A1_T15.js


var __executed=/[\d][\n][^\d]/.exec("line1\nline2"),__expected=["1\nl"];__expected.index=4;__expected.input="line1\nline2";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[\d][\n][^\d]/.exec(`line1
line2`),__expected=[`1
l`];__expected.index=4,__expected.input=`line1
line2`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/eval/no-construct.js


try{new eval}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new eval() throw TypeError. Actual: "+e)}


try{new eval}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new eval() throw TypeError. Actual: "+e)}



test262/test/built-ins/Temporal/PlainYearMonth/prototype/subtract/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainYearMonth.from({year:2e3,month:5});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainYearMonth.from({year:2e3,month:5});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/DataView/prototype/setUint16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setUint16(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setUint16(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setUint16(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setUint16(-1,0)});



test262/test/built-ins/RegExp/S15.10.2.6_A2_T3.js


var __executed=/^p[a-z]/.exec("pairs\nmakes	double\npesos"),__expected=["pa"];__expected.index=0;__expected.input="pairs\nmakes	double\npesos";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/^p[a-z]/.exec(`pairs
makes	double
pesos`),__expected=["pa"];__expected.index=0,__expected.input=`pairs
makes	double
pesos`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.fill,"function","implements TypedArray.prototype.fill"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.fill(0);try{ab.resize(BPE*3)}catch(_){}array.fill(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.fill(0),new Test262Error("fill completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.fill,"function","implements TypedArray.prototype.fill"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.fill(0);try{ab.resize(BPE*3)}catch{}array.fill(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.fill(0),new Test262Error("fill completed successfully")})});



test262/test/built-ins/Set/is-a-constructor.js


assert.sameValue(isConstructor(Set),!0,"isConstructor(Set) must return true"),new Set;


assert.sameValue(isConstructor(Set),!0,"isConstructor(Set) must return true");



test262/test/built-ins/DataView/prototype/getFloat32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getFloat32(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getFloat32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat32(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getFloat32(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getFloat32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat32(0),new Test262Error("the operation completed successfully")});



test262/test/language/expressions/arrow-function/prototype-rules.js


assert.sameValue(typeof(()=>{}),"function"),assert.sameValue(Object.getPrototypeOf(()=>{}),Function.prototype),assert.sameValue("prototype"in(()=>{}),!1);


assert.sameValue("function","function"),assert.sameValue(Object.getPrototypeOf(()=>{}),Function.prototype),assert.sameValue("prototype"in(()=>{}),!1);



test262/test/built-ins/DataView/prototype/getFloat32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getFloat32(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getFloat32(13)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.getFloat32(12)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.getFloat32(11)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.getFloat32(10)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.getFloat32(9)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getFloat32(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getFloat32(13)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.getFloat32(12)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.getFloat32(11)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.getFloat32(10)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.getFloat32(9)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.getFloat32(1)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.getFloat32(0)},"0 + 4 > 3 (offset+length)");



test262/test/built-ins/RegExp/S15.10.2.6_A4_T6.js


var __executed=/\B\w/.exec("devils arise	for\nrevil"),__expected=["e"];__expected.index=1;__expected.input="devils arise	for\nrevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\B\w/.exec(`devils arise	for
revil`),__expected=["e"];__expected.index=1,__expected.input=`devils arise	for
revil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/DataView/prototype/getFloat32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(6),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getFloat32(-1)});assert.throws(RangeError,function(){sample.getFloat32(Infinity)},"Infinity");


var buffer=new ArrayBuffer(6),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getFloat32(-1)}),assert.throws(RangeError,function(){sample.getFloat32(1/0)},"Infinity");



test262/test/built-ins/DataView/prototype/getFloat32/return-infinity.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(0,127);sample.setUint8(1,128);sample.setUint8(2,0);sample.setUint8(3,0);sample.setUint8(4,255);sample.setUint8(5,128);sample.setUint8(6,0);sample.setUint8(7,0);assert.sameValue(sample.getFloat32(0),Infinity);assert.sameValue(sample.getFloat32(4),-1/0);


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(0,127),sample.setUint8(1,128),sample.setUint8(2,0),sample.setUint8(3,0),sample.setUint8(4,255),sample.setUint8(5,128),sample.setUint8(6,0),sample.setUint8(7,0),assert.sameValue(sample.getFloat32(0),1/0),assert.sameValue(sample.getFloat32(4),-1/0);



test262/test/built-ins/DataView/prototype/getInt32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getInt32(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getInt32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt32(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getInt32(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getInt32(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt32(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getInt32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getInt32(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getInt32(13)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(12)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(11)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(10)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(9)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getInt32(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getInt32(13)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(12)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(11)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(10)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(9)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset+length)");



test262/test/built-ins/TypedArray/prototype/reduce/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reduce,"function","implements TypedArray.prototype.reduce"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reduce(()=>{});try{ab.resize(BPE*3)}catch(_){}array.reduce(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduce(()=>{}),new Test262Error("reduce completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reduce,"function","implements TypedArray.prototype.reduce"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reduce(()=>{});try{ab.resize(BPE*3)}catch{}array.reduce(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduce(()=>{}),new Test262Error("reduce completed successfully")})});



test262/test/built-ins/DataView/prototype/getInt32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getInt32(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getInt32(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getInt32(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getInt32(-1)});



test262/test/built-ins/DataView/prototype/getInt32/index-is-out-of-range-sab.js


var sample,buffer=new SharedArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getInt32(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getInt32(13)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(12)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(11)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(10)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.getInt32(9)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset+length)");


var sample,buffer=new SharedArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getInt32(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getInt32(13)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(12)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(11)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(10)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.getInt32(9)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.getInt32(1)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.getInt32(0)},"0 + 4 > 3 (offset+length)");



test262/test/built-ins/TypedArray/prototype/reduce/BigInt/result-of-any-type.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,44n]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[Infinity,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduce(function(){return item[0]});assert.sameValue(result,item[0],item[1]+" - using default accumulator");result=sample.reduce(function(){return item[0]},0);assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,44n]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[1/0,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduce(function(){return item[0]}),assert.sameValue(result,item[0],item[1]+" - using default accumulator"),result=sample.reduce(function(){return item[0]},0),assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});



test262/test/built-ins/Temporal/PlainYearMonth/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainYearMonth(2e3,5),later=new Temporal.PlainYearMonth(2e3,10);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainYearMonth(2e3,5),later=new Temporal.PlainYearMonth(2e3,10);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/built-ins/DataView/prototype/setFloat32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setFloat32(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setFloat32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat32(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setFloat32(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setFloat32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat32(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setFloat32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setFloat32(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setFloat32(13,39)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.setFloat32(12,39)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.setFloat32(11,39)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.setFloat32(10,39)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.setFloat32(9,39)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getFloat32(0),0,"[0] no value was set");assert.sameValue(sample.getFloat32(4),0,"[1] no value was set");assert.sameValue(sample.getFloat32(8),0,"[2] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setFloat32(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setFloat32(13,39)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.setFloat32(12,39)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.setFloat32(11,39)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.setFloat32(10,39)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.setFloat32(9,39)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.setFloat32(1,39)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.setFloat32(0,39)},"0 + 4 > 3 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getFloat32(0),0,"[0] no value was set"),assert.sameValue(sample.getFloat32(4),0,"[1] no value was set"),assert.sameValue(sample.getFloat32(8),0,"[2] no value was set");



test262/test/built-ins/TypedArray/prototype/reduce/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reduce,"function","implements TypedArray.prototype.reduce"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reduce(()=>{});try{ab.resize(BPE*3)}catch(_){}array.reduce(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduce(()=>{}),new Test262Error("reduce completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reduce,"function","implements TypedArray.prototype.reduce"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reduce(()=>{});try{ab.resize(BPE*3)}catch{}array.reduce(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduce(()=>{}),new Test262Error("reduce completed successfully")})});



test262/test/built-ins/RegExp/prototype/test/S15.10.6.3_A2_T6.js


var __instance=new Number(1);__instance.test=RegExp.prototype.test;try{throw new Test262Error('#1.1: __instance = new Number(1.0); __instance.test = RegExp.prototype.test; __instance["test"]("message to investigate"). Actual: '+__instance["test"]("message to investigate"))}catch(e){assert.sameValue(e instanceof TypeError,!0,"The result of evaluating (e instanceof TypeError) is expected to be true")}


var __instance=new Number(1);__instance.test=RegExp.prototype.test;try{throw new Test262Error('#1.1: __instance = new Number(1.0); __instance.test = RegExp.prototype.test; __instance["test"]("message to investigate"). Actual: '+__instance.test("message to investigate"))}catch(e){assert.sameValue(e instanceof TypeError,!0,"The result of evaluating (e instanceof TypeError) is expected to be true")}



test262/test/built-ins/Temporal/PlainYearMonth/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/RegExp/S15.10.2.6_A4_T2.js


var __executed=/[f-z]e\B/.exec("devils arise	for\nrevil"),__expected=["re"];__expected.index=17;__expected.input="devils arise	for\nrevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[f-z]e\B/.exec(`devils arise	for
revil`),__expected=["re"];__expected.index=17,__expected.input=`devils arise	for
revil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/TypedArray/prototype/reduce/result-of-any-type.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,44]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[Infinity,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduce(function(){return item[0]});assert.sameValue(result,item[0],item[1]+" - using default accumulator");result=sample.reduce(function(){return item[0]},0);assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,44]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[1/0,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduce(function(){return item[0]}),assert.sameValue(result,item[0],item[1]+" - using default accumulator"),result=sample.reduce(function(){return item[0]},0),assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});



test262/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-2-30.js


var obj={"100000000000000000000":1},desc=Object.getOwnPropertyDescriptor(obj,1e20);assert(typeof desc!="undefined",'typeof desc !== "undefined" !== true');assert.sameValue(desc.value,1,"desc.value");


var obj={"100000000000000000000":1},desc=Object.getOwnPropertyDescriptor(obj,1e20);assert(typeof desc<"u",'typeof desc !== "undefined" !== true'),assert.sameValue(desc.value,1,"desc.value");



test262/test/built-ins/TypedArray/prototype/reduce/callbackfn-resize.js


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),finalNext,expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[];nexts=[];indices=[];arrays=[];result=sample.reduce(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(2*BPE),finalNext=void 0,expectedPrevs=[262,0],expectedNexts=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalNext=0,expectedPrevs=[262,0,1],expectedNexts=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,[262,0,1],"prevs (shrink)");assert.compareArray(nexts,[0,0,finalNext],"nexts (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,2,"result (shrink)");prevs=[];nexts=[];indices=[];arrays=[];result=sample.reduce(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch(_){}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevs,"prevs (grow)");assert.compareArray(nexts,expectedNexts,"nexts (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),finalNext,expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[],nexts=[],indices=[],arrays=[],result=sample.reduce(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(2*BPE),finalNext=void 0,expectedPrevs=[262,0],expectedNexts=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalNext=0,expectedPrevs=[262,0,1],expectedNexts=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,[262,0,1],"prevs (shrink)"),assert.compareArray(nexts,[0,0,finalNext],"nexts (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,2,"result (shrink)"),prevs=[],nexts=[],indices=[],arrays=[],result=sample.reduce(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch{}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevs,"prevs (grow)"),assert.compareArray(nexts,expectedNexts,"nexts (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});



test262/test/built-ins/DataView/prototype/setFloat32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setFloat32(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setFloat32(-1,0)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setFloat32(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setFloat32(-1,0)});



test262/test/built-ins/RegExp/S15.10.2.6_A2_T10.js


var __executed=/^\d+/m.exec("abc\n123xyz"),__expected=["123"];__expected.index=4;__expected.input="abc\n123xyz";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/^\d+/m.exec(`abc
123xyz`),__expected=["123"];__expected.index=4,__expected.input=`abc
123xyz`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.6_A1_T4.js


var __executed=/[^e]$/gm.exec("pairs\nmakes	double"),__expected=["s"];__expected.index=4;__expected.input="pairs\nmakes	double";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[^e]$/mg.exec(`pairs
makes	double`),__expected=["s"];__expected.index=4,__expected.input=`pairs
makes	double`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/DataView/prototype/setInt32/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setInt32(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setInt32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt32(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setInt32(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setInt32(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt32(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setInt32/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setInt32(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setInt32(13,39)},"13 + 4 > 12");assert.throws(RangeError,function(){sample.setInt32(12,39)},"12 + 4 > 12");assert.throws(RangeError,function(){sample.setInt32(11,39)},"11 + 4 > 12");assert.throws(RangeError,function(){sample.setInt32(10,39)},"10 + 4 > 12");assert.throws(RangeError,function(){sample.setInt32(9,39)},"9 + 4 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (offset)");sample=new DataView(buffer,0,4);assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (length)");sample=new DataView(buffer,0,3);assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (length)");sample=new DataView(buffer,4,4);assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (offset+length)");sample=new DataView(buffer,4,3);assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getInt32(0),0,"[0] no value was set");assert.sameValue(sample.getInt32(4),0,"[1] no value was set");assert.sameValue(sample.getInt32(8),0,"[2] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setInt32(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setInt32(13,39)},"13 + 4 > 12"),assert.throws(RangeError,function(){sample.setInt32(12,39)},"12 + 4 > 12"),assert.throws(RangeError,function(){sample.setInt32(11,39)},"11 + 4 > 12"),assert.throws(RangeError,function(){sample.setInt32(10,39)},"10 + 4 > 12"),assert.throws(RangeError,function(){sample.setInt32(9,39)},"9 + 4 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (offset)"),sample=new DataView(buffer,0,4),assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (length)"),sample=new DataView(buffer,0,3),assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (length)"),sample=new DataView(buffer,4,4),assert.throws(RangeError,function(){sample.setInt32(1,39)},"1 + 4 > 4 (offset+length)"),sample=new DataView(buffer,4,3),assert.throws(RangeError,function(){sample.setInt32(0,39)},"0 + 4 > 3 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getInt32(0),0,"[0] no value was set"),assert.sameValue(sample.getInt32(4),0,"[1] no value was set"),assert.sameValue(sample.getInt32(8),0,"[2] no value was set");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T8.js


var __executed=/\bro/.exec("pilot\nsoviet robot	openoffice"),__expected=["ro"];__expected.index=13;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\bro/.exec(`pilot
soviet robot	openoffice`),__expected=["ro"];__expected.index=13,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-2-13.js


var obj={Infinity:1},desc=Object.getOwnPropertyDescriptor(obj,Infinity);assert.sameValue(desc.value,1,"desc.value");


var obj={Infinity:1},desc=Object.getOwnPropertyDescriptor(obj,1/0);assert.sameValue(desc.value,1,"desc.value");



test262/test/built-ins/Temporal/Instant/prototype/round/roundingincrement-out-of-range.js


const instant=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0}));assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:-1}));assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:0}));assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:.9}));assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001}));assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:Infinity}));


const instant=new Temporal.Instant(1000000000000000005n);assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0})),assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:-1})),assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:0})),assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:.9})),assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001})),assert.throws(RangeError,()=>instant.round({smallestUnit:"nanoseconds",roundingIncrement:1/0}));



test262/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-1.js


var o={};o["foo"]=101;var desc=Object.getOwnPropertyDescriptor(o,"foo");assert.sameValue(desc.value,101,"desc.value");assert.sameValue(desc.enumerable,!0,"desc.enumerable");assert.sameValue(desc.writable,!0,"desc.writable");assert.sameValue(desc.configurable,!0,"desc.configurable");assert.sameValue(desc.hasOwnProperty("get"),!1,'desc.hasOwnProperty("get")');assert.sameValue(desc.hasOwnProperty("set"),!1,'desc.hasOwnProperty("set")');


var o={};o.foo=101;var desc=Object.getOwnPropertyDescriptor(o,"foo");assert.sameValue(desc.value,101,"desc.value"),assert.sameValue(desc.enumerable,!0,"desc.enumerable"),assert.sameValue(desc.writable,!0,"desc.writable"),assert.sameValue(desc.configurable,!0,"desc.configurable"),assert.sameValue(desc.hasOwnProperty("get"),!1,'desc.hasOwnProperty("get")'),assert.sameValue(desc.hasOwnProperty("set"),!1,'desc.hasOwnProperty("set")');



test262/test/built-ins/RegExp/S15.10.2.13_A1_T10.js


var __executed=/[a-c\d]+/.exec("\n\nabc324234\n"),__expected=["abc324234"];__expected.index=2;__expected.input="\n\nabc324234\n";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[a-c\d]+/.exec(`

abc324234
`),__expected=["abc324234"];__expected.index=2,__expected.input=`

abc324234
`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.6_A2_T5.js


var __executed=/^[^p]/m.exec("pairs\nmakes	double\npesos"),__expected=["m"];__expected.index=6;__expected.input="pairs\nmakes	double\npesos";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/^[^p]/m.exec(`pairs
makes	double
pesos`),__expected=["m"];__expected.index=6,__expected.input=`pairs
makes	double
pesos`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.6_A4_T3.js


var __executed=/\Bo\B/i.exec("devils arise	fOr\nrevil"),__expected=["O"];__expected.index=14;__expected.input="devils arise	fOr\nrevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\Bo\B/i.exec(`devils arise	fOr
revil`),__expected=["O"];__expected.index=14,__expected.input=`devils arise	fOr
revil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/TypedArray/prototype/slice/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.slice,"function","implements TypedArray.prototype.slice"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.slice(0);try{ab.resize(BPE*3)}catch(_){}array.slice(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.slice(0),new Test262Error("slice completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.slice,"function","implements TypedArray.prototype.slice"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.slice(0);try{ab.resize(BPE*3)}catch{}array.slice(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.slice(0),new Test262Error("slice completed successfully")})});



test262/test/built-ins/Atomics/waitAsync/bigint/out-of-range-index-throws.js


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const i64a=new BigInt64Array(new SharedArrayBuffer(BigInt64Array.BYTES_PER_ELEMENT*4)),poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(RangeError,function(){Atomics.waitAsync(i64a,Infinity,poisoned,poisoned)},"`Atomics.waitAsync(i64a, Infinity, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i64a,-1,poisoned,poisoned)},"`Atomics.waitAsync(i64a, -1, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i64a,4,poisoned,poisoned)},"`Atomics.waitAsync(i64a, 4, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i64a,200,poisoned,poisoned)},"`Atomics.waitAsync(i64a, 200, poisoned, poisoned)` throws a RangeError exception");


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const i64a=new BigInt64Array(new SharedArrayBuffer(BigInt64Array.BYTES_PER_ELEMENT*4)),poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(RangeError,function(){Atomics.waitAsync(i64a,1/0,poisoned,poisoned)},"`Atomics.waitAsync(i64a, Infinity, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i64a,-1,poisoned,poisoned)},"`Atomics.waitAsync(i64a, -1, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i64a,4,poisoned,poisoned)},"`Atomics.waitAsync(i64a, 4, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i64a,200,poisoned,poisoned)},"`Atomics.waitAsync(i64a, 200, poisoned, poisoned)` throws a RangeError exception");



test262/test/built-ins/DataView/prototype/setInt32/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setInt32(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setInt32(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setInt32(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setInt32(-1,0)});



test262/test/built-ins/TypedArray/prototype/slice/BigInt/infinity.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n,43n]);assert(compareArray(sample.slice(-1/0),[40n,41n,42n,43n]),"start == -Infinity");assert(compareArray(sample.slice(Infinity),[]),"start == Infinity");assert(compareArray(sample.slice(0,-1/0),[]),"end == -Infinity");assert(compareArray(sample.slice(0,Infinity),[40n,41n,42n,43n]),"end == Infinity")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n,43n]);assert(compareArray(sample.slice(-1/0),[40n,41n,42n,43n]),"start == -Infinity"),assert(compareArray(sample.slice(1/0),[]),"start == Infinity"),assert(compareArray(sample.slice(0,-1/0),[]),"end == -Infinity"),assert(compareArray(sample.slice(0,1/0),[40n,41n,42n,43n]),"end == Infinity")});



test262/test/built-ins/DataView/prototype/byteLength/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function");var ab=new ArrayBuffer(4,{maxByteLength:5}),dataView=new DataView(ab,1,2);assert.sameValue(dataView.byteLength,2);try{ab.resize(5)}catch(_){}assert.sameValue(dataView.byteLength,2,"following grow");try{ab.resize(3)}catch(_){}assert.sameValue(dataView.byteLength,2,"following shrink (within bounds)");var expectedError;try{ab.resize(2),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw dataView.byteLength,new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function");var ab=new ArrayBuffer(4,{maxByteLength:5}),dataView=new DataView(ab,1,2);assert.sameValue(dataView.byteLength,2);try{ab.resize(5)}catch{}assert.sameValue(dataView.byteLength,2,"following grow");try{ab.resize(3)}catch{}assert.sameValue(dataView.byteLength,2,"following shrink (within bounds)");var expectedError;try{ab.resize(2),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw dataView.byteLength,new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setBigUint64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setBigUint64(0,10n),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setBigUint64(0,20n),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setBigUint64(0,30n),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setBigUint64(0,10n),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setBigUint64(0,20n),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setBigUint64(0,30n),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getUint8/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getUint8(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getUint8(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint8(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getUint8(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getUint8(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getUint8(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getUint8/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getUint8(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getUint8(13)},"13 + 1 > 12");assert.throws(RangeError,function(){sample.getUint8(12)},"12 + 1 > 12");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (offset)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (offset+length)");sample=new DataView(buffer,4,0);assert.throws(RangeError,function(){sample.getUint8(0)},"0 + 1 > 0 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getUint8(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getUint8(13)},"13 + 1 > 12"),assert.throws(RangeError,function(){sample.getUint8(12)},"12 + 1 > 12"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (offset)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.getUint8(1)},"1 + 1 > 1 (offset+length)"),sample=new DataView(buffer,4,0),assert.throws(RangeError,function(){sample.getUint8(0)},"0 + 1 > 0 (offset+length)");



test262/test/built-ins/Temporal/PlainYearMonth/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainYearMonth(2e3,5),later=new Temporal.PlainYearMonth(2e3,10);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainYearMonth(2e3,5),later=new Temporal.PlainYearMonth(2e3,10);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/built-ins/TypedArray/prototype/slice/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.slice,"function","implements TypedArray.prototype.slice"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.slice(0);try{ab.resize(BPE*3)}catch(_){}array.slice(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.slice(0),new Test262Error("slice completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.slice,"function","implements TypedArray.prototype.slice"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.slice(0);try{ab.resize(BPE*3)}catch{}array.slice(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.slice(0),new Test262Error("slice completed successfully")})});



test262/test/built-ins/DataView/prototype/getUint8/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getUint8(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getUint8(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getUint8(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getUint8(-1)});



test262/test/built-ins/Temporal/PlainYearMonth/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Atomics/waitAsync/out-of-range-index-throws.js


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const i32a=new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*4)),poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(RangeError,function(){Atomics.waitAsync(i32a,Infinity,poisoned,poisoned)},"`Atomics.waitAsync(i32a, Infinity, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i32a,-1,poisoned,poisoned)},"`Atomics.waitAsync(i32a, -1, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i32a,4,poisoned,poisoned)},"`Atomics.waitAsync(i32a, 4, poisoned, poisoned)` throws a RangeError exception");assert.throws(RangeError,function(){Atomics.waitAsync(i32a,200,poisoned,poisoned)},"`Atomics.waitAsync(i32a, 200, poisoned, poisoned)` throws a RangeError exception");


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const i32a=new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT*4)),poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(RangeError,function(){Atomics.waitAsync(i32a,1/0,poisoned,poisoned)},"`Atomics.waitAsync(i32a, Infinity, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i32a,-1,poisoned,poisoned)},"`Atomics.waitAsync(i32a, -1, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i32a,4,poisoned,poisoned)},"`Atomics.waitAsync(i32a, 4, poisoned, poisoned)` throws a RangeError exception"),assert.throws(RangeError,function(){Atomics.waitAsync(i32a,200,poisoned,poisoned)},"`Atomics.waitAsync(i32a, 200, poisoned, poisoned)` throws a RangeError exception");



test262/test/built-ins/TypedArray/prototype/slice/infinity.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42,43]);assert(compareArray(sample.slice(-1/0),[40,41,42,43]),"start == -Infinity");assert(compareArray(sample.slice(Infinity),[]),"start == Infinity");assert(compareArray(sample.slice(0,-1/0),[]),"end == -Infinity");assert(compareArray(sample.slice(0,Infinity),[40,41,42,43]),"end == Infinity")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42,43]);assert(compareArray(sample.slice(-1/0),[40,41,42,43]),"start == -Infinity"),assert(compareArray(sample.slice(1/0),[]),"start == Infinity"),assert(compareArray(sample.slice(0,-1/0),[]),"end == -Infinity"),assert(compareArray(sample.slice(0,1/0),[40,41,42,43]),"end == Infinity")});



test262/test/built-ins/DataView/prototype/setFloat16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setFloat16(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setFloat16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat16(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setFloat16(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setFloat16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setFloat16(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setFloat16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setFloat16(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setFloat16(13,39)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.setFloat16(12,39)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.setFloat16(11,39)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getFloat16(0),0,"[0] no value was set");assert.sameValue(sample.getFloat16(2),0,"[1] no value was set");assert.sameValue(sample.getFloat16(4),0,"[2] no value was set");assert.sameValue(sample.getFloat16(6),0,"[3] no value was set");assert.sameValue(sample.getFloat16(8),0,"[4] no value was set");assert.sameValue(sample.getFloat16(10),0,"[5] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setFloat16(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setFloat16(13,39)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.setFloat16(12,39)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.setFloat16(11,39)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.setFloat16(1,39)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.setFloat16(0,39)},"0 + 2 > 1 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getFloat16(0),0,"[0] no value was set"),assert.sameValue(sample.getFloat16(2),0,"[1] no value was set"),assert.sameValue(sample.getFloat16(4),0,"[2] no value was set"),assert.sameValue(sample.getFloat16(6),0,"[3] no value was set"),assert.sameValue(sample.getFloat16(8),0,"[4] no value was set"),assert.sameValue(sample.getFloat16(10),0,"[5] no value was set");



test262/test/built-ins/Atomics/waitAsync/non-int32-typedarray-throws.js


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(TypeError,()=>{const view=new Float64Array(new SharedArrayBuffer(Float64Array.BYTES_PER_ELEMENT*8));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float64Array( new SharedArrayBuffer(Float64Array.BYTES_PER_ELEMENT * 8) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Float32Array(new SharedArrayBuffer(Float32Array.BYTES_PER_ELEMENT*4));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float32Array( new SharedArrayBuffer(Float32Array.BYTES_PER_ELEMENT * 4) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");typeof Float16Array!="undefined"&&assert.throws(TypeError,function(){const view=new Float16Array(new SharedArrayBuffer(Float16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float16Array( new SharedArrayBuffer(Float16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Int16Array(new SharedArrayBuffer(Int16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Int16Array( new SharedArrayBuffer(Int16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Int8Array(new SharedArrayBuffer(Int8Array.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Int8Array( new SharedArrayBuffer(Int8Array.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Uint32Array(new SharedArrayBuffer(Uint32Array.BYTES_PER_ELEMENT*4));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint32Array( new SharedArrayBuffer(Uint32Array.BYTES_PER_ELEMENT * 4) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Uint16Array(new SharedArrayBuffer(Uint16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint16Array( new SharedArrayBuffer(Uint16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Uint8Array(new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint8Array( new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");assert.throws(TypeError,()=>{const view=new Uint8ClampedArray(new SharedArrayBuffer(Uint8ClampedArray.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint8ClampedArray( new SharedArrayBuffer(Uint8ClampedArray.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");


assert.sameValue(typeof Atomics.waitAsync,"function",'The value of `typeof Atomics.waitAsync` is "function"');const poisoned={valueOf(){throw new Test262Error("should not evaluate this code")}};assert.throws(TypeError,()=>{const view=new Float64Array(new SharedArrayBuffer(Float64Array.BYTES_PER_ELEMENT*8));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float64Array( new SharedArrayBuffer(Float64Array.BYTES_PER_ELEMENT * 8) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Float32Array(new SharedArrayBuffer(Float32Array.BYTES_PER_ELEMENT*4));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float32Array( new SharedArrayBuffer(Float32Array.BYTES_PER_ELEMENT * 4) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),typeof Float16Array<"u"&&assert.throws(TypeError,function(){const view=new Float16Array(new SharedArrayBuffer(Float16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Float16Array( new SharedArrayBuffer(Float16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Int16Array(new SharedArrayBuffer(Int16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Int16Array( new SharedArrayBuffer(Int16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Int8Array(new SharedArrayBuffer(Int8Array.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Int8Array( new SharedArrayBuffer(Int8Array.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Uint32Array(new SharedArrayBuffer(Uint32Array.BYTES_PER_ELEMENT*4));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint32Array( new SharedArrayBuffer(Uint32Array.BYTES_PER_ELEMENT * 4) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Uint16Array(new SharedArrayBuffer(Uint16Array.BYTES_PER_ELEMENT*2));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint16Array( new SharedArrayBuffer(Uint16Array.BYTES_PER_ELEMENT * 2) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Uint8Array(new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint8Array( new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception"),assert.throws(TypeError,()=>{const view=new Uint8ClampedArray(new SharedArrayBuffer(Uint8ClampedArray.BYTES_PER_ELEMENT));Atomics.waitAsync(view,poisoned,poisoned,poisoned)},"`const view = new Uint8ClampedArray( new SharedArrayBuffer(Uint8ClampedArray.BYTES_PER_ELEMENT) ); Atomics.waitAsync(view, poisoned, poisoned, poisoned)` throws a TypeError exception");



test262/test/built-ins/DataView/prototype/setFloat16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setFloat16(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setFloat16(-1,0)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setFloat16(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setFloat16(-1,0)});



test262/test/built-ins/DataView/prototype/setInt16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setInt16(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setInt16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt16(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setInt16(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setInt16(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setInt16(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/setInt16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setInt16(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setInt16(13,39)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.setInt16(12,39)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.setInt16(11,39)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (offset+length)");sample=new DataView(buffer,0);assert.sameValue(sample.getInt16(0),0,"[0] no value was set");assert.sameValue(sample.getInt16(2),0,"[1] no value was set");assert.sameValue(sample.getInt16(4),0,"[2] no value was set");assert.sameValue(sample.getInt16(6),0,"[3] no value was set");assert.sameValue(sample.getInt16(8),0,"[4] no value was set");assert.sameValue(sample.getInt16(10),0,"[5] no value was set");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setInt16(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setInt16(13,39)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.setInt16(12,39)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.setInt16(11,39)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.setInt16(1,39)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.setInt16(0,39)},"0 + 2 > 1 (offset+length)"),sample=new DataView(buffer,0),assert.sameValue(sample.getInt16(0),0,"[0] no value was set"),assert.sameValue(sample.getInt16(2),0,"[1] no value was set"),assert.sameValue(sample.getInt16(4),0,"[2] no value was set"),assert.sameValue(sample.getInt16(6),0,"[3] no value was set"),assert.sameValue(sample.getInt16(8),0,"[4] no value was set"),assert.sameValue(sample.getInt16(10),0,"[5] no value was set");



test262/test/built-ins/Array/prototype/reduce/callbackfn-resize-arraybuffer.js


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[];nexts=[];indices=[];arrays=[];result=Array.prototype.reduce.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(2*BPE),expectedPrevs=[262,0],expectedNexts=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){expectedPrevs=[262,0,1],expectedNexts=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevs,"prevs (shrink)");assert.compareArray(nexts,expectedNexts,"nexts (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (shrink)");prevs=[];nexts=[];indices=[];arrays=[];result=Array.prototype.reduce.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch(_){}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevs,"prevs (grow)");assert.compareArray(nexts,expectedNexts,"nexts (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[],nexts=[],indices=[],arrays=[],result=Array.prototype.reduce.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(2*BPE),expectedPrevs=[262,0],expectedNexts=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{expectedPrevs=[262,0,1],expectedNexts=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevs,"prevs (shrink)"),assert.compareArray(nexts,expectedNexts,"nexts (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (shrink)"),prevs=[],nexts=[],indices=[],arrays=[],result=Array.prototype.reduce.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch{}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevs,"prevs (grow)"),assert.compareArray(nexts,expectedNexts,"nexts (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});



test262/test/built-ins/DataView/prototype/setInt16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setInt16(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setInt16(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setInt16(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setInt16(-1,0)});



test262/test/built-ins/RegExp/prototype/source/value-line-terminator.js


var re=eval("/"+new RegExp("\n").source+"/");assert.sameValue(re.test("\n"),!0,'input: "\\n"');assert.sameValue(re.test("_\n_"),!0,'input: "_\\n_"');assert.sameValue(re.test("\\n"),!1,'input: "\\\\n"');assert.sameValue(re.test("\r"),!1,'input: "\\r"');assert.sameValue(re.test("n"),!1,'input: "n"');


var re=eval("/"+new RegExp(`
`).source+"/");assert.sameValue(re.test(`
`),!0,'input: "\\n"'),assert.sameValue(re.test(`_
_`),!0,'input: "_\\n_"'),assert.sameValue(re.test("\\n"),!1,'input: "\\\\n"'),assert.sameValue(re.test("\r"),!1,'input: "\\r"'),assert.sameValue(re.test("n"),!1,'input: "n"');



test262/test/built-ins/DataView/prototype/setUint8/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.setUint8(0,10),void 0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.setUint8(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint8(0,30),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.setUint8(0,10),void 0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.setUint8(0,20),void 0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.setUint8(0,30),new Test262Error("the operation completed successfully")});



test262/test/built-ins/TypedArray/prototype/findLastIndex/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findLastIndex,"function","implements TypedArray.prototype.findLastIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findLastIndex(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findLastIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLastIndex(()=>{}),new Test262Error("findLastIndex completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findLastIndex,"function","implements TypedArray.prototype.findLastIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findLastIndex(()=>{});try{ab.resize(BPE*3)}catch{}array.findLastIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLastIndex(()=>{}),new Test262Error("findLastIndex completed successfully")})});



test262/test/built-ins/DataView/prototype/setUint8/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(4),typedArray=new Uint8Array(buffer,0);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.setUint8(Infinity,39)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.setUint8(5,39)},"5 + 1 > 4");assert.throws(RangeError,function(){sample.setUint8(4,39)},"4 + 1 > 4");sample=new DataView(buffer,3);assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (offset)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (length)");sample=new DataView(buffer,2,1);assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (offset+length)");assert.sameValue(typedArray[0],0,"[0] no value was set");assert.sameValue(typedArray[1],0,"[1] no value was set");assert.sameValue(typedArray[2],0,"[2] no value was set");assert.sameValue(typedArray[3],0,"[3] no value was set");


var sample,buffer=new ArrayBuffer(4),typedArray=new Uint8Array(buffer,0);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.setUint8(1/0,39)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.setUint8(5,39)},"5 + 1 > 4"),assert.throws(RangeError,function(){sample.setUint8(4,39)},"4 + 1 > 4"),sample=new DataView(buffer,3),assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (offset)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (length)"),sample=new DataView(buffer,2,1),assert.throws(RangeError,function(){sample.setUint8(1,39)},"1 + 1 > 1 (offset+length)"),assert.sameValue(typedArray[0],0,"[0] no value was set"),assert.sameValue(typedArray[1],0,"[1] no value was set"),assert.sameValue(typedArray[2],0,"[2] no value was set"),assert.sameValue(typedArray[3],0,"[3] no value was set");



test262/test/built-ins/TypedArray/prototype/findLastIndex/BigInt/return-negative-one-if-predicate-returns-false-value.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([1n,2n,3n]),called=0,result=sample.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1,"result is -1 when predicate returns are false");result=sample.findLastIndex(function(){return""});assert.sameValue(result,-1,"ToBoolean(string)");result=sample.findLastIndex(function(){return});assert.sameValue(result,-1,"ToBoolean(undefined)");result=sample.findLastIndex(function(){return null});assert.sameValue(result,-1,"ToBoolean(null)");result=sample.findLastIndex(function(){return 0});assert.sameValue(result,-1,"ToBoolean(0)");result=sample.findLastIndex(function(){return-0});assert.sameValue(result,-1,"ToBoolean(-0)");result=sample.findLastIndex(function(){return NaN});assert.sameValue(result,-1,"ToBoolean(NaN)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([1n,2n,3n]),called=0,result=sample.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1,"result is -1 when predicate returns are false"),result=sample.findLastIndex(function(){return""}),assert.sameValue(result,-1,"ToBoolean(string)"),result=sample.findLastIndex(function(){}),assert.sameValue(result,-1,"ToBoolean(undefined)"),result=sample.findLastIndex(function(){return null}),assert.sameValue(result,-1,"ToBoolean(null)"),result=sample.findLastIndex(function(){return 0}),assert.sameValue(result,-1,"ToBoolean(0)"),result=sample.findLastIndex(function(){return-0}),assert.sameValue(result,-1,"ToBoolean(-0)"),result=sample.findLastIndex(function(){return NaN}),assert.sameValue(result,-1,"ToBoolean(NaN)")});



test262/test/built-ins/Temporal/PlainTime/from/infinity-throws-rangeerror.js


const base={hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainTime.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainTime.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/TypedArray/prototype/findLastIndex/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.findLastIndex,"function","implements TypedArray.prototype.findLastIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.findLastIndex(()=>{});try{ab.resize(BPE*3)}catch(_){}array.findLastIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLastIndex(()=>{}),new Test262Error("findLastIndex completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.findLastIndex,"function","implements TypedArray.prototype.findLastIndex"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.findLastIndex(()=>{});try{ab.resize(BPE*3)}catch{}array.findLastIndex(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.findLastIndex(()=>{}),new Test262Error("findLastIndex completed successfully")})});



test262/test/built-ins/TypedArray/prototype/findLastIndex/return-negative-one-if-predicate-returns-false-value.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([1,2,3]),called=0,result=sample.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1,"result is -1 when predicate returns are false");result=sample.findLastIndex(function(){return""});assert.sameValue(result,-1,"ToBoolean(string)");result=sample.findLastIndex(function(){return});assert.sameValue(result,-1,"ToBoolean(undefined)");result=sample.findLastIndex(function(){return null});assert.sameValue(result,-1,"ToBoolean(null)");result=sample.findLastIndex(function(){return 0});assert.sameValue(result,-1,"ToBoolean(0)");result=sample.findLastIndex(function(){return-0});assert.sameValue(result,-1,"ToBoolean(-0)");result=sample.findLastIndex(function(){return NaN});assert.sameValue(result,-1,"ToBoolean(NaN)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([1,2,3]),called=0,result=sample.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1,"result is -1 when predicate returns are false"),result=sample.findLastIndex(function(){return""}),assert.sameValue(result,-1,"ToBoolean(string)"),result=sample.findLastIndex(function(){}),assert.sameValue(result,-1,"ToBoolean(undefined)"),result=sample.findLastIndex(function(){return null}),assert.sameValue(result,-1,"ToBoolean(null)"),result=sample.findLastIndex(function(){return 0}),assert.sameValue(result,-1,"ToBoolean(0)"),result=sample.findLastIndex(function(){return-0}),assert.sameValue(result,-1,"ToBoolean(-0)"),result=sample.findLastIndex(function(){return NaN}),assert.sameValue(result,-1,"ToBoolean(NaN)")});



test262/test/built-ins/DataView/prototype/setUint8/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.setUint8(Infinity,0)},"Infinity");assert.throws(RangeError,function(){sample.setUint8(-1,0)});


var buffer=new ArrayBuffer(12),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.setUint8(1/0,0)},"Infinity"),assert.throws(RangeError,function(){sample.setUint8(-1,0)});



test262/test/built-ins/Temporal/PlainYearMonth/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/findLastIndex/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.findLastIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch(_){secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,secondElement,0],"elements (shrink)");assert.compareArray(indices,[2,1,0],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,-1,"result (shrink)");elements=[];indices=[];arrays=[];result=sample.findLastIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,-1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.findLastIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch{secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,secondElement,0],"elements (shrink)"),assert.compareArray(indices,[2,1,0],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,-1,"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.findLastIndex(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,-1,"result (grow)")});



test262/test/built-ins/RegExp/S15.10.2.6_A2_T2.js


var __executed=/^m/m.exec("pairs\nmakes	double"),__expected=["m"];__expected.index=6;__expected.input="pairs\nmakes	double";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/^m/m.exec(`pairs
makes	double`),__expected=["m"];__expected.index=6,__expected.input=`pairs
makes	double`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/DataView/prototype/getInt16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getInt16(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getInt16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt16(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getInt16(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getInt16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt16(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getInt16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getInt16(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getInt16(13)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.getInt16(12)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.getInt16(11)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getInt16(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getInt16(13)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.getInt16(12)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.getInt16(11)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.getInt16(1)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.getInt16(0)},"0 + 2 > 1 (offset+length)");



test262/test/built-ins/RegExp/S15.10.2.6_A4_T7.js


var __executed=/\B[^z]{4}\B/.exec("devil arise	forzzx\nevils"),__expected=["il a"];__expected.index=3;__expected.input="devil arise	forzzx\nevils";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\B[^z]{4}\B/.exec(`devil arise	forzzx
evils`),__expected=["il a"];__expected.index=3,__expected.input=`devil arise	forzzx
evils`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Symbol/auto-boxing-non-strict.js


var sym=Symbol("66");sym.a=0;assert.sameValue(sym.a,void 0,"The value of `sym.a` is `undefined`, after executing `sym.a = 0;`");sym["ab"]=0;assert.sameValue(sym["ab"],void 0,"The value of `sym['a' + 'b']` is `undefined`, after executing `sym['a' + 'b'] = 0;`");sym[62]=0;assert.sameValue(sym[62],void 0,"The value of `sym[62]` is `undefined`, after executing `sym[62] = 0;`");


var sym=Symbol("66");sym.a=0,assert.sameValue(sym.a,void 0,"The value of `sym.a` is `undefined`, after executing `sym.a = 0;`"),sym.ab=0,assert.sameValue(sym.ab,void 0,"The value of `sym['a' + 'b']` is `undefined`, after executing `sym['a' + 'b'] = 0;`"),sym[62]=0,assert.sameValue(sym[62],void 0,"The value of `sym[62]` is `undefined`, after executing `sym[62] = 0;`");



test262/test/built-ins/TypedArray/prototype/byteOffset/BigInt/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteOffset,BPE);try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.byteOffset,BPE,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.byteOffset,BPE,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=BPE}assert.sameValue(array.byteOffset,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteOffset,BPE);try{ab.resize(BPE*5)}catch{}assert.sameValue(array.byteOffset,BPE,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.byteOffset,BPE,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=BPE}assert.sameValue(array.byteOffset,expected,"following shrink (out of bounds)")});



test262/test/built-ins/DataView/prototype/getInt16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getInt16(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getInt16(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getInt16(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getInt16(-1)});



test262/test/built-ins/Temporal/PlainTime/prototype/with/options-wrong-type.js


const badOptions=[null,!0,"some string",Symbol(),1,2n],instance=new Temporal.PlainTime;for(const value of badOptions)assert.throws(TypeError,()=>instance.with({minute:45},value),`TypeError on wrong options type ${typeof value}`),assert.throws(RangeError,()=>instance.with({minute:Infinity},value),"Partial time processed before throwing TypeError");


const badOptions=[null,!0,"some string",Symbol(),1,2n],instance=new Temporal.PlainTime;for(const value of badOptions)assert.throws(TypeError,()=>instance.with({minute:45},value),`TypeError on wrong options type ${typeof value}`),assert.throws(RangeError,()=>instance.with({minute:1/0},value),"Partial time processed before throwing TypeError");



test262/test/built-ins/TypedArray/prototype/byteOffset/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteOffset,BPE);try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.byteOffset,BPE,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.byteOffset,BPE,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=BPE}assert.sameValue(array.byteOffset,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteOffset,BPE);try{ab.resize(BPE*5)}catch{}assert.sameValue(array.byteOffset,BPE,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.byteOffset,BPE,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=BPE}assert.sameValue(array.byteOffset,expected,"following shrink (out of bounds)")});



test262/test/built-ins/DataView/prototype/getInt8/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getInt8(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getInt8(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt8(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getInt8(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getInt8(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getInt8(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/DataView/prototype/getInt8/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getInt8(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getInt8(13)},"13 + 1 > 12");assert.throws(RangeError,function(){sample.getInt8(12)},"12 + 1 > 12");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (offset)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (offset+length)");sample=new DataView(buffer,4,0);assert.throws(RangeError,function(){sample.getInt8(0)},"0 + 1 > 0 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getInt8(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getInt8(13)},"13 + 1 > 12"),assert.throws(RangeError,function(){sample.getInt8(12)},"12 + 1 > 12"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (offset)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.getInt8(1)},"1 + 1 > 1 (offset+length)"),sample=new DataView(buffer,4,0),assert.throws(RangeError,function(){sample.getInt8(0)},"0 + 1 > 0 (offset+length)");



test262/test/built-ins/Temporal/PlainTime/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.PlainTime(12,34,56,987,654,321);[Infinity,-1/0].forEach(inf=>{["hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const instance=new Temporal.PlainTime(12,34,56,987,654,321);[1/0,-1/0].forEach(inf=>{["hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/Temporal/PlainYearMonth/prototype/add/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainYearMonth.from({year:2e3,month:5});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainYearMonth.from({year:2e3,month:5});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/Object/S15.2.2.1_A2_T1.js


var obj={prop:1},n_obj=new Object(obj);assert.sameValue(n_obj,obj,"The value of n_obj is expected to equal the value of obj");assert.sameValue(n_obj["prop"],1,'The value of n_obj["prop"] is expected to be 1');


var obj={prop:1},n_obj=new Object(obj);assert.sameValue(n_obj,obj,"The value of n_obj is expected to equal the value of obj"),assert.sameValue(n_obj.prop,1,'The value of n_obj["prop"] is expected to be 1');



test262/test/built-ins/DataView/prototype/getInt8/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getInt8(Infinity)},"Infinity");assert.throws(RangeError,function(){sample.getInt8(-1)});


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getInt8(1/0)},"Infinity"),assert.throws(RangeError,function(){sample.getInt8(-1)});



test262/test/built-ins/TypedArray/prototype/includes/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.includes,"function","implements TypedArray.prototype.includes"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.includes(0n);try{ab.resize(BPE*3)}catch(_){}array.includes(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.includes(0n),new Test262Error("includes completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.includes,"function","implements TypedArray.prototype.includes"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.includes(0n);try{ab.resize(BPE*3)}catch{}array.includes(0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.includes(0n),new Test262Error("includes completed successfully")})});



test262/test/built-ins/RegExp/S15.10.2.6_A3_T7.js


var __executed=/[^o]t\b/i.exec("pilOt\nsoviet robot	openoffice"),__expected=["et"];__expected.index=10;__expected.input="pilOt\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/[^o]t\b/i.exec(`pilOt
soviet robot	openoffice`),__expected=["et"];__expected.index=10,__expected.input=`pilOt
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/DataView/prototype/getBigUint64/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getBigUint64(0),0n,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getBigUint64(0),0n,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getBigUint64(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getBigUint64(0),0n,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getBigUint64(0),0n,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getBigUint64(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/TypedArray/prototype/includes/BigInt/fromIndex-infinity.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.includes(43n,Infinity),!1,"includes(43, Infinity)");assert.sameValue(sample.includes(43n,-1/0),!0,"includes(43, -Infinity)")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,43n,41n]);assert.sameValue(sample.includes(43n,1/0),!1,"includes(43, Infinity)"),assert.sameValue(sample.includes(43n,-1/0),!0,"includes(43, -Infinity)")});



test262/test/built-ins/DataView/prototype/getBigUint64/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,()=>sample.getBigUint64(Infinity),"DataView access at index Infinity should throw");assert.throws(RangeError,()=>sample.getBigUint64(13),"13 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(12),"12 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(11),"11 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(10),"10 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(9),"9 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(8),"8 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(7),"7 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(6),"6 + 8 > 12");assert.throws(RangeError,()=>sample.getBigUint64(5),"5 + 8 > 12");sample=new DataView(buffer,8);assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 4 (offset)");sample=new DataView(buffer,9);assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 3 (offset)");sample=new DataView(buffer,0,8);assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 8 (length)");sample=new DataView(buffer,0,7);assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 7 (length)");sample=new DataView(buffer,4,8);assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 8 (offset+length)");sample=new DataView(buffer,4,7);assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 7 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,()=>sample.getBigUint64(1/0),"DataView access at index Infinity should throw"),assert.throws(RangeError,()=>sample.getBigUint64(13),"13 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(12),"12 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(11),"11 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(10),"10 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(9),"9 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(8),"8 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(7),"7 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(6),"6 + 8 > 12"),assert.throws(RangeError,()=>sample.getBigUint64(5),"5 + 8 > 12"),sample=new DataView(buffer,8),assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 4 (offset)"),sample=new DataView(buffer,9),assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 3 (offset)"),sample=new DataView(buffer,0,8),assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 8 (length)"),sample=new DataView(buffer,0,7),assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 7 (length)"),sample=new DataView(buffer,4,8),assert.throws(RangeError,()=>sample.getBigUint64(1),"1 + 8 > 8 (offset+length)"),sample=new DataView(buffer,4,7),assert.throws(RangeError,()=>sample.getBigUint64(0),"0 + 8 > 7 (offset+length)");



test262/test/built-ins/RegExp/S15.10.2.6_A1_T3.js


var __executed=/s$/m.exec("pairs\nmakes	double"),__expected=["s"];__expected.index=4;__expected.input="pairs\nmakes	double";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/s$/m.exec(`pairs
makes	double`),__expected=["s"];__expected.index=4,__expected.input=`pairs
makes	double`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Object/is/not-same-value-x-y-number.js


assert.sameValue(Object.is(0,-0),!1,"`Object.is(+0, -0)` returns `false`"),assert.sameValue(Object.is(-0,0),!1,"`Object.is(-0, +0)` returns `false`"),assert.sameValue(Object.is(0),!1,"`Object.is(0)` returns `false`"),assert.sameValue(Object.is(Infinity,-1/0),!1,"`Object.is(Infinity, -Infinity)` returns `false`");


assert.sameValue(Object.is(0,-0),!1,"`Object.is(+0, -0)` returns `false`"),assert.sameValue(Object.is(-0,0),!1,"`Object.is(-0, +0)` returns `false`"),assert.sameValue(Object.is(0),!1,"`Object.is(0)` returns `false`"),assert.sameValue(Object.is(1/0,-1/0),!1,"`Object.is(Infinity, -Infinity)` returns `false`");



test262/test/built-ins/DataView/prototype/getBigUint64/to-boolean-littleendian.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(7,255);assert.sameValue(sample.getBigUint64(0),0xffn,"no argument");assert.sameValue(sample.getBigUint64(0,!1),0xffn);assert.sameValue(sample.getBigUint64(0,!0),0xff00000000000000n);assert.sameValue(sample.getBigUint64(0,0),0xffn,"ToBoolean: 0 => false");assert.sameValue(sample.getBigUint64(0,-0),0xffn,"ToBoolean: -0 => false");assert.sameValue(sample.getBigUint64(0,1),0xff00000000000000n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigUint64(0,-1),0xff00000000000000n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigUint64(0,.1),0xff00000000000000n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigUint64(0,Infinity),0xff00000000000000n,"ToBoolean: Number != 0 => true");assert.sameValue(sample.getBigUint64(0,NaN),0xffn,"ToBoolean: NaN => false");assert.sameValue(sample.getBigUint64(0,void 0),0xffn,"ToBoolean: undefined => false");assert.sameValue(sample.getBigUint64(0,null),0xffn,"ToBoolean: null => false");assert.sameValue(sample.getBigUint64(0,""),0xffn,"ToBoolean: String .length == 0 => false");assert.sameValue(sample.getBigUint64(0,"string"),0xff00000000000000n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigUint64(0,"false"),0xff00000000000000n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigUint64(0," "),0xff00000000000000n,"ToBoolean: String .length > 0 => true");assert.sameValue(sample.getBigUint64(0,Symbol("1")),0xff00000000000000n,"ToBoolean: Symbol => true");assert.sameValue(sample.getBigUint64(0,0n),0xffn,"ToBoolean: 0n => false");assert.sameValue(sample.getBigUint64(0,1n),0xff00000000000000n,"ToBoolean: BigInt != 0n => true");assert.sameValue(sample.getBigUint64(0,[]),0xff00000000000000n,"ToBoolean: any object => true");assert.sameValue(sample.getBigUint64(0,{}),0xff00000000000000n,"ToBoolean: any object => true");assert.sameValue(sample.getBigUint64(0,Object(!1)),0xff00000000000000n,"ToBoolean: any object => true; no ToPrimitive");


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);sample.setUint8(7,255),assert.sameValue(sample.getBigUint64(0),0xffn,"no argument"),assert.sameValue(sample.getBigUint64(0,!1),0xffn),assert.sameValue(sample.getBigUint64(0,!0),0xff00000000000000n),assert.sameValue(sample.getBigUint64(0,0),0xffn,"ToBoolean: 0 => false"),assert.sameValue(sample.getBigUint64(0,-0),0xffn,"ToBoolean: -0 => false"),assert.sameValue(sample.getBigUint64(0,1),0xff00000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigUint64(0,-1),0xff00000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigUint64(0,.1),0xff00000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigUint64(0,1/0),0xff00000000000000n,"ToBoolean: Number != 0 => true"),assert.sameValue(sample.getBigUint64(0,NaN),0xffn,"ToBoolean: NaN => false"),assert.sameValue(sample.getBigUint64(0,void 0),0xffn,"ToBoolean: undefined => false"),assert.sameValue(sample.getBigUint64(0,null),0xffn,"ToBoolean: null => false"),assert.sameValue(sample.getBigUint64(0,""),0xffn,"ToBoolean: String .length == 0 => false"),assert.sameValue(sample.getBigUint64(0,"string"),0xff00000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigUint64(0,"false"),0xff00000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigUint64(0," "),0xff00000000000000n,"ToBoolean: String .length > 0 => true"),assert.sameValue(sample.getBigUint64(0,Symbol("1")),0xff00000000000000n,"ToBoolean: Symbol => true"),assert.sameValue(sample.getBigUint64(0,0n),0xffn,"ToBoolean: 0n => false"),assert.sameValue(sample.getBigUint64(0,1n),0xff00000000000000n,"ToBoolean: BigInt != 0n => true"),assert.sameValue(sample.getBigUint64(0,[]),0xff00000000000000n,"ToBoolean: any object => true"),assert.sameValue(sample.getBigUint64(0,{}),0xff00000000000000n,"ToBoolean: any object => true"),assert.sameValue(sample.getBigUint64(0,Object(!1)),0xff00000000000000n,"ToBoolean: any object => true; no ToPrimitive");



test262/test/built-ins/Temporal/PlainTime/prototype/subtract/argument-string-duration-too-large.js


var ones="1".repeat(1e3);assert.sameValue(Number(ones),Infinity);var time=new Temporal.PlainTime,str="PT"+ones+"S";assert.throws(RangeError,()=>time.subtract(str));


var ones="1".repeat(1e3);assert.sameValue(Number(ones),1/0);var time=new Temporal.PlainTime,str="PT"+ones+"S";assert.throws(RangeError,()=>time.subtract(str));



test262/test/built-ins/TypedArray/prototype/includes/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.includes,"function","implements TypedArray.prototype.includes"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.includes(0);try{ab.resize(BPE*3)}catch(_){}array.includes(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.includes(0),new Test262Error("includes completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.includes,"function","implements TypedArray.prototype.includes"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.includes(0);try{ab.resize(BPE*3)}catch{}array.includes(0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.includes(0),new Test262Error("includes completed successfully")})});



test262/test/built-ins/Temporal/PlainTime/prototype/subtract/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainTime.from({hour:12,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainTime.from({hour:12,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/DataView/prototype/getBigUint64/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,()=>sample.getBigUint64(Infinity),"DataView access at index Infinity should throw");assert.throws(RangeError,()=>sample.getBigUint64(-1),"DataView access at index -1 should throw");


var buffer=new ArrayBuffer(8),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,()=>sample.getBigUint64(1/0),"DataView access at index Infinity should throw"),assert.throws(RangeError,()=>sample.getBigUint64(-1),"DataView access at index -1 should throw");



test262/test/built-ins/TypedArray/prototype/includes/fromIndex-infinity.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.includes(43,Infinity),!1,"includes(43, Infinity)");assert.sameValue(sample.includes(43,-1/0),!0,"includes(43, -Infinity)")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,43,41]);assert.sameValue(sample.includes(43,1/0),!1,"includes(43, Infinity)"),assert.sameValue(sample.includes(43,-1/0),!0,"includes(43, -Infinity)")});



test262/test/built-ins/RegExp/S15.10.2.6_A4_T8.js


var __executed=/\B\w{4}\B/.exec("devil arise	forzzx\nevils"),__expected=["orzz"];__expected.index=13;__expected.input="devil arise	forzzx\nevils";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\B\w{4}\B/.exec(`devil arise	forzzx
evils`),__expected=["orzz"];__expected.index=13,__expected.input=`devil arise	forzzx
evils`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Set/prototype/isSubsetOf/set-like-array.js


const s1=new Set([1,2]),s2=[5,6];s2.size=3;s2.has=function(v){if(v===1)return!0;if(v===2)return!0;throw new Test262Error("Set.prototype.isSubsetOf should only call its argument's has method with contents of this")};s2.keys=function(){throw new Test262Error("Set.prototype.isSubsetOf should not call its argument's keys iterator when this.size ≤ arg.size")};assert.sameValue(s1.isSubsetOf(s2),!0);


const s1=new Set([1,2]),s2=[5,6];s2.size=3,s2.has=function(v){if(v===1||v===2)return!0;throw new Test262Error("Set.prototype.isSubsetOf should only call its argument's has method with contents of this")},s2.keys=function(){throw new Test262Error("Set.prototype.isSubsetOf should not call its argument's keys iterator when this.size \u2264 arg.size")},assert.sameValue(s1.isSubsetOf(s2),!0);



test262/test/built-ins/DataView/prototype/getFloat16/resizable-buffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch(_){}assert.sameValue(sample.getFloat16(0),0,"following grow");try{buffer.resize(16)}catch(_){}assert.sameValue(sample.getFloat16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat16(0),new Test262Error("the operation completed successfully")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize");var buffer=new ArrayBuffer(24,{maxByteLength:32}),sample=new DataView(buffer,0,16);try{buffer.resize(32)}catch{}assert.sameValue(sample.getFloat16(0),0,"following grow");try{buffer.resize(16)}catch{}assert.sameValue(sample.getFloat16(0),0,"following shrink (within bounds)");var expectedError;try{buffer.resize(8),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,function(){throw sample.getFloat16(0),new Test262Error("the operation completed successfully")});



test262/test/built-ins/RegExp/S15.10.2.6_A4_T4.js


var __executed=/\B\w\B/.exec("devils arise	for\nrevil"),__expected=["e"];__expected.index=1;__expected.input="devils arise	for\nrevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\B\w\B/.exec(`devils arise	for
revil`),__expected=["e"];__expected.index=1,__expected.input=`devils arise	for
revil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/DataView/prototype/getFloat16/index-is-out-of-range.js


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0);assert.throws(RangeError,function(){sample.getFloat16(Infinity)},"getIndex == Infinity");assert.throws(RangeError,function(){sample.getFloat16(13)},"13 + 2 > 12");assert.throws(RangeError,function(){sample.getFloat16(12)},"12 + 2 > 12");assert.throws(RangeError,function(){sample.getFloat16(11)},"11 + 2 > 12");sample=new DataView(buffer,10);assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (offset)");sample=new DataView(buffer,11);assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (offset)");sample=new DataView(buffer,0,2);assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (length)");sample=new DataView(buffer,0,1);assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (length)");sample=new DataView(buffer,4,2);assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (offset+length)");sample=new DataView(buffer,4,1);assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (offset+length)");


var sample,buffer=new ArrayBuffer(12);sample=new DataView(buffer,0),assert.throws(RangeError,function(){sample.getFloat16(1/0)},"getIndex == Infinity"),assert.throws(RangeError,function(){sample.getFloat16(13)},"13 + 2 > 12"),assert.throws(RangeError,function(){sample.getFloat16(12)},"12 + 2 > 12"),assert.throws(RangeError,function(){sample.getFloat16(11)},"11 + 2 > 12"),sample=new DataView(buffer,10),assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (offset)"),sample=new DataView(buffer,11),assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (offset)"),sample=new DataView(buffer,0,2),assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (length)"),sample=new DataView(buffer,0,1),assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (length)"),sample=new DataView(buffer,4,2),assert.throws(RangeError,function(){sample.getFloat16(1)},"1 + 2 > 2 (offset+length)"),sample=new DataView(buffer,4,1),assert.throws(RangeError,function(){sample.getFloat16(0)},"0 + 2 > 1 (offset+length)");



test262/test/built-ins/RegExp/S15.10.2.6_A3_T12.js


var __executed=/\bop/.exec("pilot\nsoviet robot	openoffice"),__expected=["op"];__expected.index=19;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\bop/.exec(`pilot
soviet robot	openoffice`),__expected=["op"];__expected.index=19,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Symbol/auto-boxing-strict.js


assert.throws(TypeError,function(){var sym=Symbol("66");sym.a=0}),assert.throws(TypeError,function(){var sym=Symbol("66");sym["ab"]=0}),assert.throws(TypeError,function(){var sym=Symbol("66");sym[62]=0});


assert.throws(TypeError,function(){var sym=Symbol("66");sym.a=0}),assert.throws(TypeError,function(){var sym=Symbol("66");sym.ab=0}),assert.throws(TypeError,function(){var sym=Symbol("66");sym[62]=0});



test262/test/built-ins/TypedArray/prototype/includes/resizable-buffer-special-float-values.js


for(let ctor of floatCtors){const rab=CreateResizableArrayBuffer(4*ctor.BYTES_PER_ELEMENT,8*ctor.BYTES_PER_ELEMENT),lengthTracking=new ctor(rab);lengthTracking[0]=-1/0;lengthTracking[1]=Infinity;lengthTracking[2]=NaN;assert(lengthTracking.includes(-1/0));assert(lengthTracking.includes(Infinity));assert(lengthTracking.includes(NaN))}


for(let ctor of floatCtors){const rab=CreateResizableArrayBuffer(4*ctor.BYTES_PER_ELEMENT,8*ctor.BYTES_PER_ELEMENT),lengthTracking=new ctor(rab);lengthTracking[0]=-1/0,lengthTracking[1]=1/0,lengthTracking[2]=NaN,assert(lengthTracking.includes(-1/0)),assert(lengthTracking.includes(1/0)),assert(lengthTracking.includes(NaN))}



test262/test/built-ins/DataView/prototype/getFloat16/detached-buffer-after-toindex-byteoffset.js


var buffer=new ArrayBuffer(6),sample=new DataView(buffer,0);$DETACHBUFFER(buffer);assert.throws(RangeError,function(){sample.getFloat16(-1)});assert.throws(RangeError,function(){sample.getFloat16(Infinity)},"Infinity");


var buffer=new ArrayBuffer(6),sample=new DataView(buffer,0);$DETACHBUFFER(buffer),assert.throws(RangeError,function(){sample.getFloat16(-1)}),assert.throws(RangeError,function(){sample.getFloat16(1/0)},"Infinity");



test262/test/built-ins/DataView/prototype/getFloat16/return-infinity.js


var buffer=new ArrayBuffer(4),sample=new DataView(buffer,0);sample.setUint8(0,124);sample.setUint8(1,0);sample.setUint8(2,252);sample.setUint8(3,0);assert.sameValue(sample.getFloat16(0),Infinity);assert.sameValue(sample.getFloat16(2),-1/0);


var buffer=new ArrayBuffer(4),sample=new DataView(buffer,0);sample.setUint8(0,124),sample.setUint8(1,0),sample.setUint8(2,252),sample.setUint8(3,0),assert.sameValue(sample.getFloat16(0),1/0),assert.sameValue(sample.getFloat16(2),-1/0);



test262/test/built-ins/TypedArray/prototype/values/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.values,"function","implements TypedArray.prototype.values"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.values();try{ab.resize(BPE*3)}catch(_){}array.values();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.values(),new Test262Error("values completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.values,"function","implements TypedArray.prototype.values"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.values();try{ab.resize(BPE*3)}catch{}array.values();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.values(),new Test262Error("values completed successfully")})});



test262/test/built-ins/TypedArray/prototype/values/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.values,"function","implements TypedArray.prototype.values"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.values();try{ab.resize(BPE*3)}catch(_){}array.values();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.values(),new Test262Error("values completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.values,"function","implements TypedArray.prototype.values"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.values();try{ab.resize(BPE*3)}catch{}array.values();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.values(),new Test262Error("values completed successfully")})});



test262/test/built-ins/DataView/excessive-bytelength-throws.js


var buffer=new ArrayBuffer(3);assert.throws(RangeError,function(){new DataView(buffer,0,4)},"offset: 0, length 4");assert.throws(RangeError,function(){new DataView(buffer,1,3)},"offset: 1, length: 3");assert.throws(RangeError,function(){new DataView(buffer,2,2)},"offset: 2, length: 2");assert.throws(RangeError,function(){new DataView(buffer,3,1)},"offset: 3, length: 1");assert.throws(RangeError,function(){new DataView(buffer,4,0)},"offset: 4, length: 0");assert.throws(RangeError,function(){new DataView(buffer,4,-1)},"offset: 4, length: -1");assert.throws(RangeError,function(){new DataView(buffer,4,-1/0)},"offset: 4, length: -Infinity");assert.throws(RangeError,function(){new DataView(buffer,0,Infinity)},"offset: 0, length: Infinity");


var buffer=new ArrayBuffer(3);assert.throws(RangeError,function(){new DataView(buffer,0,4)},"offset: 0, length 4"),assert.throws(RangeError,function(){new DataView(buffer,1,3)},"offset: 1, length: 3"),assert.throws(RangeError,function(){new DataView(buffer,2,2)},"offset: 2, length: 2"),assert.throws(RangeError,function(){new DataView(buffer,3,1)},"offset: 3, length: 1"),assert.throws(RangeError,function(){new DataView(buffer,4,0)},"offset: 4, length: 0"),assert.throws(RangeError,function(){new DataView(buffer,4,-1)},"offset: 4, length: -1"),assert.throws(RangeError,function(){new DataView(buffer,4,-1/0)},"offset: 4, length: -Infinity"),assert.throws(RangeError,function(){new DataView(buffer,0,1/0)},"offset: 0, length: Infinity");



test262/test/built-ins/RegExp/S15.10.2.6_A4_T5.js


var __executed=/\w\B/.exec("devils arise	for\nrevil"),__expected=["d"];__expected.index=0;__expected.input="devils arise	for\nrevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\w\B/.exec(`devils arise	for
revil`),__expected=["d"];__expected.index=0,__expected.input=`devils arise	for
revil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Set/prototype/isSupersetOf/set-like-array.js


const s1=new Set([1,2]),s2=[1];s2.size=3;s2.has=function(v){if(v===1)return!0;if(v===2)return!0;throw new Test262Error("Set.prototype.isSupersetOf should only call its argument's has method with contents of this")};s2.keys=function(){throw new Test262Error("Set.prototype.isSupersetOf should not call its argument's keys iterator when this.size ≤ arg.size")};assert.sameValue(s1.isSupersetOf(s2),!1);


const s1=new Set([1,2]),s2=[1];s2.size=3,s2.has=function(v){if(v===1||v===2)return!0;throw new Test262Error("Set.prototype.isSupersetOf should only call its argument's has method with contents of this")},s2.keys=function(){throw new Test262Error("Set.prototype.isSupersetOf should not call its argument's keys iterator when this.size \u2264 arg.size")},assert.sameValue(s1.isSupersetOf(s2),!1);



test262/test/built-ins/RegExp/S15.10.2.6_A3_T2.js


var __executed=/ot\b/.exec("pilot\nsoviet robot	openoffice"),__expected=["ot"];__expected.index=3;__expected.input="pilot\nsoviet robot	openoffice";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/ot\b/.exec(`pilot
soviet robot	openoffice`),__expected=["ot"];__expected.index=3,__expected.input=`pilot
soviet robot	openoffice`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/RegExp/S15.10.2.10_A1.2_T1.js


var arr=/\n/.exec("\n");if(arr===null||arr[0]!=="\n")throw new Test262Error('#1: var arr = /\\n/.exec("\\u000A"); arr[0] === "\\u000A". Actual. '+(arr&&arr[0]));var arr=/\n\n/.exec("a\n\nb");if(arr===null||arr[0]!=="\n\n")throw new Test262Error('#2: var arr = /\\n\\n/.exec("a\\u000A\\u000Ab"); arr[0] === "\\u000A\\u000A". Actual. '+(arr&&arr[0]));


var arr=/\n/.exec(`
`);if(arr===null||arr[0]!==`
`)throw new Test262Error('#1: var arr = /\\n/.exec("\\u000A"); arr[0] === "\\u000A". Actual. '+(arr&&arr[0]));var arr=/\n\n/.exec(`a

b`);if(arr===null||arr[0]!==`

`)throw new Test262Error('#2: var arr = /\\n\\n/.exec("a\\u000A\\u000Ab"); arr[0] === "\\u000A\\u000A". Actual. '+(arr&&arr[0]));



test262/test/built-ins/TypedArray/prototype/length/BigInt/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.length,2,"initial value");try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.length,2,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.length,2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=2}assert.sameValue(array.length,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.length,2,"initial value");try{ab.resize(BPE*5)}catch{}assert.sameValue(array.length,2,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.length,2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=2}assert.sameValue(array.length,expected,"following shrink (out of bounds)")});



test262/test/built-ins/DataView/excessive-byteoffset-throws.js


var ab=new ArrayBuffer(1);assert.throws(RangeError,function(){new DataView(ab,2)},"2");assert.throws(RangeError,function(){new DataView(ab,Infinity)},"Infinity");


var ab=new ArrayBuffer(1);assert.throws(RangeError,function(){new DataView(ab,2)},"2"),assert.throws(RangeError,function(){new DataView(ab,1/0)},"Infinity");



test262/test/built-ins/TypedArray/prototype/length/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.length,2,"initial value");try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.length,2,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.length,2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=2}assert.sameValue(array.length,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.length,2,"initial value");try{ab.resize(BPE*5)}catch{}assert.sameValue(array.length,2,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.length,2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=2}assert.sameValue(array.length,expected,"following shrink (out of bounds)")});



test262/test/built-ins/Temporal/PlainTime/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainTime(12,34,56,0,0,0),later=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainTime(12,34,56,0,0,0),later=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/built-ins/Temporal/PlainYearMonth/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[Infinity,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,[prop]:obj1},other));assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,[prop]:obj2}));assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const other=new Temporal.PlainYearMonth(2e3,5),base={year:2e3,month:5};[1/0,-1/0].forEach(inf=>{["year","month"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,[prop]:obj1},other)),assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,[prop]:obj2})),assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Temporal/ZonedDateTime/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC");[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC");[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/Set/prototype/isDisjointFrom/set-like-class-mutation.js


const baseSet=new Set(["a","b","c"]),evilSetLike={size:3,has(v){if(v==="a")return baseSet.delete("b"),baseSet.delete("c"),baseSet.add("b"),!1;if(v==="b")return!1;if(v==="c")throw new Test262Error("Set.prototype.isDisjointFrom should not call its argument's has method with values from this which have been deleted before visiting");throw new Test262Error("Set.prototype.isDisjointFrom should only call its argument's has method with contents of this")},*keys(){throw new Test262Error("Set.prototype.isDisjointFrom should not call its argument's keys iterator when this.size ≤ arg.size")}},result=baseSet.isDisjointFrom(evilSetLike);assert.sameValue(result,!0);const expectedNewBase=["a","b"];assert.compareArray([...baseSet],expectedNewBase);


const baseSet=new Set(["a","b","c"]),evilSetLike={size:3,has(v){if(v==="a")return baseSet.delete("b"),baseSet.delete("c"),baseSet.add("b"),!1;if(v==="b")return!1;throw v==="c"?new Test262Error("Set.prototype.isDisjointFrom should not call its argument's has method with values from this which have been deleted before visiting"):new Test262Error("Set.prototype.isDisjointFrom should only call its argument's has method with contents of this")},*keys(){throw new Test262Error("Set.prototype.isDisjointFrom should not call its argument's keys iterator when this.size \u2264 arg.size")}},result=baseSet.isDisjointFrom(evilSetLike);assert.sameValue(result,!0);const expectedNewBase=["a","b"];assert.compareArray([...baseSet],expectedNewBase);



test262/test/built-ins/RegExp/S15.10.2.6_A2_T4.js


var __executed=/^p[b-z]/m.exec("pairs\nmakes	double\npesos"),__expected=["pe"];__expected.index=19;__expected.input="pairs\nmakes	double\npesos";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/^p[b-z]/m.exec(`pairs
makes	double
pesos`),__expected=["pe"];__expected.index=19,__expected.input=`pairs
makes	double
pesos`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit-proxied-array.js


var array=[];array["9007199254740988"]="9007199254740988";array["9007199254740989"]="9007199254740989";array["9007199254740990"]="9007199254740990";array["9007199254740991"]="9007199254740991";var proxy=new Proxy(array,{get(t,pk,r){return pk==="length"?9007199254740994:Reflect.get(t,pk,r)}}),result=Array.prototype.slice.call(proxy,9007199254740989);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,9007199254740989,9007199254740990);assert.compareArray(result,["9007199254740989"],'The value of result is expected to be ["9007199254740989"]');var result=Array.prototype.slice.call(proxy,9007199254740989,9007199254740996);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,-2);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,-2,-1);assert.compareArray(result,["9007199254740989"],'The value of result is expected to be ["9007199254740989"]');


var array=[];array["9007199254740988"]="9007199254740988",array["9007199254740989"]="9007199254740989",array["9007199254740990"]="9007199254740990",array["9007199254740991"]="9007199254740991";var proxy=new Proxy(array,{get(t,pk,r){return pk==="length"?2**53+2:Reflect.get(t,pk,r)}}),result=Array.prototype.slice.call(proxy,9007199254740989);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,9007199254740989,9007199254740990);assert.compareArray(result,["9007199254740989"],'The value of result is expected to be ["9007199254740989"]');var result=Array.prototype.slice.call(proxy,9007199254740989,9007199254740996);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,-2);assert.compareArray(result,["9007199254740989","9007199254740990"],'The value of result is expected to be ["9007199254740989", "9007199254740990"]');var result=Array.prototype.slice.call(proxy,-2,-1);assert.compareArray(result,["9007199254740989"],'The value of result is expected to be ["9007199254740989"]');



test262/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.copyWithin,"function","implements TypedArray.prototype.copyWithin"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.copyWithin(0,0);try{ab.resize(BPE*3)}catch(_){}array.copyWithin(0,0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.copyWithin(0,0),new Test262Error("copyWithin completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.copyWithin,"function","implements TypedArray.prototype.copyWithin"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.copyWithin(0,0);try{ab.resize(BPE*3)}catch{}array.copyWithin(0,0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.copyWithin(0,0),new Test262Error("copyWithin completed successfully")})});



test262/test/built-ins/RegExp/S15.10.2.6_A4_T1.js


var __executed=/\Bevil\B/.exec("devils arise	for\nevil"),__expected=["evil"];__expected.index=1;__expected.input="devils arise	for\nevil";assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length");assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index");assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");


var __executed=/\Bevil\B/.exec(`devils arise	for
evil`),__expected=["evil"];__expected.index=1,__expected.input=`devils arise	for
evil`,assert.sameValue(__executed.length,__expected.length,"The value of __executed.length is expected to equal the value of __expected.length"),assert.sameValue(__executed.index,__expected.index,"The value of __executed.index is expected to equal the value of __expected.index"),assert.sameValue(__executed.input,__expected.input,"The value of __executed.input is expected to equal the value of __expected.input");for(var index=0;index<__expected.length;index++)assert.sameValue(__executed[index],__expected[index],"The value of __executed[index] is expected to equal the value of __expected[index]");



test262/test/built-ins/Temporal/ZonedDateTime/from/argument-propertybag-calendar-iso-string.js


for(const calendar of["2020-01-01","2020-01-01[u-ca=iso8601]","2020-01-01T00:00:00.000000000","2020-01-01T00:00:00.000000000[u-ca=iso8601]","01-01","01-01[u-ca=iso8601]","2020-01","2020-01[u-ca=iso8601]"]){const timeZone="UTC",arg={year:1970,monthCode:"M01",day:1,timeZone,calendar},result=Temporal.ZonedDateTime.from(arg);assert.sameValue(result.calendarId,"iso8601",`Calendar created from string "${calendar}"`);assert.sameValue(result.calendarId,"iso8601","calendar string is iso8601")}


for(const calendar of["2020-01-01","2020-01-01[u-ca=iso8601]","2020-01-01T00:00:00.000000000","2020-01-01T00:00:00.000000000[u-ca=iso8601]","01-01","01-01[u-ca=iso8601]","2020-01","2020-01[u-ca=iso8601]"]){const arg={year:1970,monthCode:"M01",day:1,timeZone:"UTC",calendar},result=Temporal.ZonedDateTime.from(arg);assert.sameValue(result.calendarId,"iso8601",`Calendar created from string "${calendar}"`),assert.sameValue(result.calendarId,"iso8601","calendar string is iso8601")}



test262/test/built-ins/Object/values/primitive-numbers.js


assert.sameValue(Object.values(0).length,0,"0 has zero values"),assert.sameValue(Object.values(-0).length,0,"-0 has zero values"),assert.sameValue(Object.values(Infinity).length,0,"Infinity has zero values"),assert.sameValue(Object.values(-1/0).length,0,"-Infinity has zero values"),assert.sameValue(Object.values(NaN).length,0,"NaN has zero values"),assert.sameValue(Object.values(Math.PI).length,0,"Math.PI has zero values");


assert.sameValue(Object.values(0).length,0,"0 has zero values"),assert.sameValue(Object.values(-0).length,0,"-0 has zero values"),assert.sameValue(Object.values(1/0).length,0,"Infinity has zero values"),assert.sameValue(Object.values(-1/0).length,0,"-Infinity has zero values"),assert.sameValue(Object.values(NaN).length,0,"NaN has zero values"),assert.sameValue(Object.values(Math.PI).length,0,"Math.PI has zero values");



test262/test/built-ins/TypedArray/prototype/copyWithin/BigInt/non-negative-out-of-bounds-end.js


testWithBigIntTypedArrayConstructors(function(TA){assert(compareArray(new TA([0n,1n,2n,3n]).copyWithin(0,1,6),[1n,2n,3n,3n]),"[0, 1, 2, 3].copyWithin(0, 1, 6) -> [1, 2, 3, 3]"),assert(compareArray(new TA([1n,2n,3n,4n,5n]).copyWithin(0,1,Infinity),[2n,3n,4n,5n,5n]),"[1, 2, 3, 4, 5].copyWithin(0, 1, Infinity) -> [2, 3, 4, 5, 5]"),assert(compareArray(new TA([0n,1n,2n,3n,4n,5n]).copyWithin(1,3,6),[0n,3n,4n,5n,4n,5n]),"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) -> [0, 3, 4, 5, 4, 5]"),assert(compareArray(new TA([1n,2n,3n,4n,5n]).copyWithin(1,3,Infinity),[1n,4n,5n,4n,5n]),"[1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) -> [1, 4, 5, 4, 5]")});


testWithBigIntTypedArrayConstructors(function(TA){assert(compareArray(new TA([0n,1n,2n,3n]).copyWithin(0,1,6),[1n,2n,3n,3n]),"[0, 1, 2, 3].copyWithin(0, 1, 6) -> [1, 2, 3, 3]"),assert(compareArray(new TA([1n,2n,3n,4n,5n]).copyWithin(0,1,1/0),[2n,3n,4n,5n,5n]),"[1, 2, 3, 4, 5].copyWithin(0, 1, Infinity) -> [2, 3, 4, 5, 5]"),assert(compareArray(new TA([0n,1n,2n,3n,4n,5n]).copyWithin(1,3,6),[0n,3n,4n,5n,4n,5n]),"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) -> [0, 3, 4, 5, 4, 5]"),assert(compareArray(new TA([1n,2n,3n,4n,5n]).copyWithin(1,3,1/0),[1n,4n,5n,4n,5n]),"[1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) -> [1, 4, 5, 4, 5]")});



test262/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.copyWithin,"function","implements TypedArray.prototype.copyWithin"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.copyWithin(0,0);try{ab.resize(BPE*3)}catch(_){}array.copyWithin(0,0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.copyWithin(0,0),new Test262Error("copyWithin completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.copyWithin,"function","implements TypedArray.prototype.copyWithin"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.copyWithin(0,0);try{ab.resize(BPE*3)}catch{}array.copyWithin(0,0);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.copyWithin(0,0),new Test262Error("copyWithin completed successfully")})});



test262/test/built-ins/TypedArray/prototype/copyWithin/non-negative-out-of-bounds-end.js


testWithTypedArrayConstructors(function(TA){assert(compareArray(new TA([0,1,2,3]).copyWithin(0,1,6),[1,2,3,3]),"[0, 1, 2, 3].copyWithin(0, 1, 6) -> [1, 2, 3, 3]"),assert(compareArray(new TA([1,2,3,4,5]).copyWithin(0,1,Infinity),[2,3,4,5,5]),"[1, 2, 3, 4, 5].copyWithin(0, 1, Infinity) -> [2, 3, 4, 5, 5]"),assert(compareArray(new TA([0,1,2,3,4,5]).copyWithin(1,3,6),[0,3,4,5,4,5]),"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) -> [0, 3, 4, 5, 4, 5]"),assert(compareArray(new TA([1,2,3,4,5]).copyWithin(1,3,Infinity),[1,4,5,4,5]),"[1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) -> [1, 4, 5, 4, 5]")});


testWithTypedArrayConstructors(function(TA){assert(compareArray(new TA([0,1,2,3]).copyWithin(0,1,6),[1,2,3,3]),"[0, 1, 2, 3].copyWithin(0, 1, 6) -> [1, 2, 3, 3]"),assert(compareArray(new TA([1,2,3,4,5]).copyWithin(0,1,1/0),[2,3,4,5,5]),"[1, 2, 3, 4, 5].copyWithin(0, 1, Infinity) -> [2, 3, 4, 5, 5]"),assert(compareArray(new TA([0,1,2,3,4,5]).copyWithin(1,3,6),[0,3,4,5,4,5]),"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) -> [0, 3, 4, 5, 4, 5]"),assert(compareArray(new TA([1,2,3,4,5]).copyWithin(1,3,1/0),[1,4,5,4,5]),"[1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) -> [1, 4, 5, 4, 5]")});



test262/test/built-ins/Proxy/revocable/tco-fn-realm.js


var other=$262.createRealm(),F=other.evalScript("\n  (function() {\n    var proxyObj = Proxy.revocable(function() {}, {});\n    var proxy = proxyObj.proxy;\n    var revoke = proxyObj.revoke;\n    revoke();\n    return proxy();\n  })\n");assert.throws(other.global.TypeError,function(){F()});


var other=$262.createRealm(),F=other.evalScript(`
  (function() {
    var proxyObj = Proxy.revocable(function() {}, {});
    var proxy = proxyObj.proxy;
    var revoke = proxyObj.revoke;
    revoke();
    return proxy();
  })
`);assert.throws(other.global.TypeError,function(){F()});



test262/test/built-ins/Function/S15.3.2.1_A2_T1.js


try{var f=Function("arg1","arg2","arg3","return arg1+arg2+arg3;")}catch(e){throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true");assert.sameValue(f(1,2,3),6,"f(1, 2, 3) must return 6");


try{var f=Function("arg1","arg2","arg3","return arg1+arg2+arg3;")}catch{throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true"),assert.sameValue(f(1,2,3),6,"f(1, 2, 3) must return 6");



test262/test/built-ins/Temporal/PlainTime/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainTime(12,34,56,0,0,0),later=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainTime(12,34,56,0,0,0),later=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/built-ins/Temporal/ZonedDateTime/from/infinity-throws-rangeerror.js


const base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/TypedArray/prototype/reverse/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reverse,"function","implements TypedArray.prototype.reverse"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reverse();try{ab.resize(BPE*3)}catch(_){}array.reverse();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reverse(),new Test262Error("reverse completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reverse,"function","implements TypedArray.prototype.reverse"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reverse();try{ab.resize(BPE*3)}catch{}array.reverse();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reverse(),new Test262Error("reverse completed successfully")})});



test262/test/built-ins/Uint8Array/prototype/toHex/receiver-not-uint8array.js


var toHex=Uint8Array.prototype.toHex;testWithTypedArrayConstructors(function(TA){if(TA===Uint8Array)return;var sample=new TA(2);assert.throws(TypeError,function(){Uint8Array.prototype.toHex.call(sample)})});assert.throws(TypeError,function(){Uint8Array.prototype.toHex.call([])});assert.throws(TypeError,function(){toHex()});


var toHex=Uint8Array.prototype.toHex;testWithTypedArrayConstructors(function(TA){if(TA!==Uint8Array){var sample=new TA(2);assert.throws(TypeError,function(){Uint8Array.prototype.toHex.call(sample)})}}),assert.throws(TypeError,function(){Uint8Array.prototype.toHex.call([])}),assert.throws(TypeError,function(){toHex()});



test262/test/built-ins/TypedArray/prototype/reverse/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reverse,"function","implements TypedArray.prototype.reverse"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reverse();try{ab.resize(BPE*3)}catch(_){}array.reverse();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reverse(),new Test262Error("reverse completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reverse,"function","implements TypedArray.prototype.reverse"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reverse();try{ab.resize(BPE*3)}catch{}array.reverse();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reverse(),new Test262Error("reverse completed successfully")})});



test262/test/built-ins/Array/prototype/findLastIndex/return-negative-one-if-predicate-returns-false-value.js


var arr=["Shoes","Car","Bike"],called=0,result=arr.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,-1);result=arr.findLastIndex(function(){return""});assert.sameValue(result,-1,"coerced string");result=arr.findLastIndex(function(){return});assert.sameValue(result,-1,"coerced undefined");result=arr.findLastIndex(function(){return null});assert.sameValue(result,-1,"coerced null");result=arr.findLastIndex(function(){return 0});assert.sameValue(result,-1,"coerced 0");result=arr.findLastIndex(function(){return NaN});assert.sameValue(result,-1,"coerced NaN");


var arr=["Shoes","Car","Bike"],called=0,result=arr.findLastIndex(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,-1),result=arr.findLastIndex(function(){return""}),assert.sameValue(result,-1,"coerced string"),result=arr.findLastIndex(function(){}),assert.sameValue(result,-1,"coerced undefined"),result=arr.findLastIndex(function(){return null}),assert.sameValue(result,-1,"coerced null"),result=arr.findLastIndex(function(){return 0}),assert.sameValue(result,-1,"coerced 0"),result=arr.findLastIndex(function(){return NaN}),assert.sameValue(result,-1,"coerced NaN");



test262/test/built-ins/DisposableStack/prototype/move/this-does-not-have-internal-disposablestate-throws.js


assert.sameValue(typeof DisposableStack.prototype.move,"function");var move=DisposableStack.prototype.move;assert.throws(TypeError,function(){move.call({["[[DisposableState]]"]:{}})},"Ordinary object without [[DisposableState]]");assert.throws(TypeError,function(){move.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot");assert.throws(TypeError,function(){move.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack;assert.throws(TypeError,function(){move.call(asyncStack)},"AsyncDisposableStack instance");


assert.sameValue(typeof DisposableStack.prototype.move,"function");var move=DisposableStack.prototype.move;assert.throws(TypeError,function(){move.call({"[[DisposableState]]":{}})},"Ordinary object without [[DisposableState]]"),assert.throws(TypeError,function(){move.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot"),assert.throws(TypeError,function(){move.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack;assert.throws(TypeError,function(){move.call(asyncStack)},"AsyncDisposableStack instance");



test262/test/built-ins/Array/prototype/findLastIndex/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.findLastIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch(_){secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,secondElement,0],"elements (shrink)");assert.compareArray(indices,[2,1,0],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,-1,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.findLastIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,-1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.findLastIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch{secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,secondElement,0],"elements (shrink)"),assert.compareArray(indices,[2,1,0],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,-1,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.findLastIndex.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,-1,"result (grow)")});



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A8_T6.js


try{var obj=new(Function("function f(){this.p1=1;};return f").apply())}catch(e){throw new Test262Error("#1: Function.prototype.apply can't be used as [[Construct]] caller")}assert.sameValue(obj.p1,1,"The value of obj.p1 is expected to be 1");


try{var obj=new(Function("function f(){this.p1=1;};return f").apply())}catch{throw new Test262Error("#1: Function.prototype.apply can't be used as [[Construct]] caller")}assert.sameValue(obj.p1,1,"The value of obj.p1 is expected to be 1");



test262/test/built-ins/DisposableStack/prototype/defer/this-does-not-have-internal-disposablestate-throws.js


assert.sameValue(typeof DisposableStack.prototype.defer,"function");var defer=DisposableStack.prototype.defer;assert.throws(TypeError,function(){defer.call({["[[DisposableState]]"]:{}})},"Ordinary object without [[DisposableState]]");assert.throws(TypeError,function(){defer.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot");assert.throws(TypeError,function(){defer.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){defer.call(asyncStack)},"AsyncDisposableStack instance");


assert.sameValue(typeof DisposableStack.prototype.defer,"function");var defer=DisposableStack.prototype.defer;assert.throws(TypeError,function(){defer.call({"[[DisposableState]]":{}})},"Ordinary object without [[DisposableState]]"),assert.throws(TypeError,function(){defer.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot"),assert.throws(TypeError,function(){defer.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){defer.call(asyncStack)},"AsyncDisposableStack instance");



test262/test/built-ins/Temporal/PlainDate/from/infinity-throws-rangeerror.js


const base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T1.js


Function('this.field="strawberry"').apply(),assert.sameValue(this["field"],"strawberry",'The value of this["field"] is expected to be "strawberry"');


Function('this.field="strawberry"').apply(),assert.sameValue(this.field,"strawberry",'The value of this["field"] is expected to be "strawberry"');



test262/test/built-ins/decodeURI/S15.1.3.1_A1.11_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%E0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%E0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A7_T1.js


Function("a1,a2,a3","this.shifted=a1;").apply(null,[1]),assert.sameValue(this["shifted"],1,'The value of this["shifted"] is expected to be 1');


Function("a1,a2,a3","this.shifted=a1;").apply(null,[1]),assert.sameValue(this.shifted,1,'The value of this["shifted"] is expected to be 1');



test262/test/built-ins/DisposableStack/prototype/adopt/this-does-not-have-internal-disposablestate-throws.js


assert.sameValue(typeof DisposableStack.prototype.adopt,"function");var adopt=DisposableStack.prototype.adopt;assert.throws(TypeError,function(){adopt.call({["[[DisposableState]]"]:{}})},"Ordinary object without [[DisposableState]]");assert.throws(TypeError,function(){adopt.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot");assert.throws(TypeError,function(){adopt.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){adopt.call(asyncStack)},"AsyncDisposableStack instance");


assert.sameValue(typeof DisposableStack.prototype.adopt,"function");var adopt=DisposableStack.prototype.adopt;assert.throws(TypeError,function(){adopt.call({"[[DisposableState]]":{}})},"Ordinary object without [[DisposableState]]"),assert.throws(TypeError,function(){adopt.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot"),assert.throws(TypeError,function(){adopt.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){adopt.call(asyncStack)},"AsyncDisposableStack instance");



test262/test/built-ins/Array/prototype/shift/S15.4.4.9_A2_T4.js


var obj={};obj["0"]=0;obj["3"]=3;obj.shift=Array.prototype.shift;obj.length=4;var shift=obj.shift();if(shift!==0)throw new Test262Error('#1: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift() === 0. Actual: '+shift);if(obj.length!==3)throw new Test262Error('#2: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.length === 3. Actual: '+obj.length);var shift=obj.shift();if(shift!==void 0)throw new Test262Error('#3: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift() === undefined. Actual: '+shift);if(obj.length!==2)throw new Test262Error('#4: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length === 2. Actual: '+obj.length);obj.length=1;var shift=obj.shift();if(shift!==void 0)throw new Test262Error('#5: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length = 1; obj.shift() === undefined. Actual: '+shift);if(obj.length!==0)throw new Test262Error('#6: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length = 1; obj.shift(); obj.length === 0. Actual: '+obj.length);


var obj={};obj[0]=0,obj[3]=3,obj.shift=Array.prototype.shift,obj.length=4;var shift=obj.shift();if(shift!==0)throw new Test262Error('#1: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift() === 0. Actual: '+shift);if(obj.length!==3)throw new Test262Error('#2: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.length === 3. Actual: '+obj.length);var shift=obj.shift();if(shift!==void 0)throw new Test262Error('#3: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift() === undefined. Actual: '+shift);if(obj.length!==2)throw new Test262Error('#4: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length === 2. Actual: '+obj.length);obj.length=1;var shift=obj.shift();if(shift!==void 0)throw new Test262Error('#5: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length = 1; obj.shift() === undefined. Actual: '+shift);if(obj.length!==0)throw new Test262Error('#6: var obj = {}; obj["0"] = 0; obj["3"] = 3; obj.length = 4; obj.shift = Array.prototype.shift; obj.shift(); obj.shift(); obj.length = 1; obj.shift(); obj.length === 0. Actual: '+obj.length);



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T4.js


Function('this.field="oil"').apply(void 0),assert.sameValue(this["field"],"oil",'The value of this["field"] is expected to be "oil"');


Function('this.field="oil"').apply(void 0),assert.sameValue(this.field,"oil",'The value of this["field"] is expected to be "oil"');



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A5_T1.js


var obj=1,retobj=Function("this.touched= true; return this;").apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj=1,retobj=Function("this.touched= true; return this;").apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A7_T2.js


new Function("a1,a2","a3","this.shifted=a2;").apply(null,[1,2,3]),assert.sameValue(this["shifted"],2,'The value of this["shifted"] is expected to be 2');


new Function("a1,a2","a3","this.shifted=a2;").apply(null,[1,2,3]),assert.sameValue(this.shifted,2,'The value of this["shifted"] is expected to be 2');



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T3.js


Function('this.field="battle"').apply(void 0),assert.sameValue(this["field"],"battle",'The value of this["field"] is expected to be "battle"');


Function('this.field="battle"').apply(void 0),assert.sameValue(this.field,"battle",'The value of this["field"] is expected to be "battle"');



test262/test/built-ins/Temporal/Duration/prototype/subtract/infinity-throws-rangeerror.js


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/built-ins/TypedArray/prototype/map/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.map,"function","implements TypedArray.prototype.map"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.map(()=>0n);try{ab.resize(BPE*3)}catch(_){}array.map(()=>0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.map(()=>0n),new Test262Error("map completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.map,"function","implements TypedArray.prototype.map"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.map(()=>0n);try{ab.resize(BPE*3)}catch{}array.map(()=>0n);var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.map(()=>0n),new Test262Error("map completed successfully")})});



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A7_T10.js


var obj={};(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(obj,arguments)})("",4,2);assert.sameValue(obj["shifted"],"42",'The value of obj["shifted"] is expected to be "42"');assert.sameValue(typeof this["shifted"],"undefined",'The value of `typeof this["shifted"]` is expected to be "undefined"');


var obj={};(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(obj,arguments)})("",4,2),assert.sameValue(obj.shifted,"42",'The value of obj["shifted"] is expected to be "42"'),assert.sameValue(typeof this.shifted,"undefined",'The value of `typeof this["shifted"]` is expected to be "undefined"');



test262/test/built-ins/DisposableStack/prototype/use/this-does-not-have-internal-disposablestate-throws.js


assert.sameValue(typeof DisposableStack.prototype.use,"function");var use=DisposableStack.prototype.use;assert.throws(TypeError,function(){use.call({["[[DisposableState]]"]:{}})},"Ordinary object without [[DisposableState]]");assert.throws(TypeError,function(){use.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot");assert.throws(TypeError,function(){use.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){use.call(asyncStack)},"AsyncDisposableStack instance");


assert.sameValue(typeof DisposableStack.prototype.use,"function");var use=DisposableStack.prototype.use;assert.throws(TypeError,function(){use.call({"[[DisposableState]]":{}})},"Ordinary object without [[DisposableState]]"),assert.throws(TypeError,function(){use.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot"),assert.throws(TypeError,function(){use.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){use.call(asyncStack)},"AsyncDisposableStack instance");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A5_T2.js


var obj=!0,retobj=new Function("this.touched= true; return this;").apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj=!0,retobj=new Function("this.touched= true; return this;").apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A7_T7.js


(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(null,arguments)})("",1,2),assert.sameValue(this["shifted"],"12",'The value of this["shifted"] is expected to be "12"');


(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(null,arguments)})("",1,2),assert.sameValue(this.shifted,"12",'The value of this["shifted"] is expected to be "12"');



test262/test/built-ins/decodeURI/S15.1.3.1_A1.12_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%"+String.fromCharCode(indexJ,indexJ)+"%A0%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%"+String.fromCharCode(indexJ,indexJ)+"%A0%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/DisposableStack/prototype/dispose/this-does-not-have-internal-disposablestate-throws.js


assert.sameValue(typeof DisposableStack.prototype.dispose,"function");var dispose=DisposableStack.prototype.dispose;assert.throws(TypeError,function(){dispose.call({["[[DisposableState]]"]:{}})},"Ordinary object without [[DisposableState]]");assert.throws(TypeError,function(){dispose.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot");assert.throws(TypeError,function(){dispose.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){dispose.call(asyncStack)},"AsyncDisposableStack instance");


assert.sameValue(typeof DisposableStack.prototype.dispose,"function");var dispose=DisposableStack.prototype.dispose;assert.throws(TypeError,function(){dispose.call({"[[DisposableState]]":{}})},"Ordinary object without [[DisposableState]]"),assert.throws(TypeError,function(){dispose.call(DisposableStack.prototype)},"DisposableStack.prototype does not have a [[DisposableState]] internal slot"),assert.throws(TypeError,function(){dispose.call(DisposableStack)},"DisposableStack does not have a [[DisposableState]] internal slot");var asyncStack=new AsyncDisposableStack(function(){});assert.throws(TypeError,function(){dispose.call(asyncStack)},"AsyncDisposableStack instance");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A5_T3.js


var obj="soap",retobj=function(){return this.touched=!0,this}.apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj="soap",retobj=function(){return this.touched=!0,this}.apply(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/decodeURI/S15.1.3.1_A1.10_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%C0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 110xxxxx (n = 2) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%C0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 110xxxxx (n = 2) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T2.js


Function('this.field="green"').apply(null),assert.sameValue(this["field"],"green",'The value of this["field"] is expected to be "green"');


Function('this.field="green"').apply(null),assert.sameValue(this.field,"green",'The value of this["field"] is expected to be "green"');



test262/test/built-ins/decodeURI/S15.1.3.1_A1.2_T1.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%"+String.fromCharCode(indexJ)+"1"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+1) does not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%"+String.fromCharCode(indexJ)+"1"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+1) does not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A7_T8.js


(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(this,arguments)})("",4,2),assert.sameValue(this["shifted"],"42",'The value of this["shifted"] is expected to be "42"');


(function(){Function("a1,a2,a3","this.shifted=a1+a2+a3;").apply(this,arguments)})("",4,2),assert.sameValue(this.shifted,"42",'The value of this["shifted"] is expected to be "42"');



test262/test/built-ins/decodeURI/S15.1.3.1_A2.1_T1.js


for(var indexI=0;indexI<=65535;indexI++)if(indexI!==37){try{var str=String.fromCharCode(indexI),differs=decodeURI(str)!==str}catch(e){throw new Test262Error("#"+decimalToHexString(indexI)+" throws")}if(differs)throw new Test262Error("#"+decimalToHexString(indexI)+" differs")}


for(var indexI=0;indexI<=65535;indexI++)if(indexI!==37){try{var str=String.fromCharCode(indexI),differs=decodeURI(str)!==str}catch{throw new Test262Error("#"+decimalToHexString(indexI)+" throws")}if(differs)throw new Test262Error("#"+decimalToHexString(indexI)+" differs")}



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T9.js


eval(' Function("this.feat=1").apply(void 0) '),assert.sameValue(this["feat"],1,'The value of this["feat"] is expected to be 1');


eval(' Function("this.feat=1").apply(void 0) '),assert.sameValue(this.feat,1,'The value of this["feat"] is expected to be 1');



test262/test/built-ins/Array/prototype/includes/fromIndex-infinity.js


var sample=[42,43,43,41];assert.sameValue(sample.includes(43,Infinity),!1,"includes(43, Infinity)");assert.sameValue(sample.includes(43,-1/0),!0,"includes(43, -Infinity)");


var sample=[42,43,43,41];assert.sameValue(sample.includes(43,1/0),!1,"includes(43, Infinity)"),assert.sameValue(sample.includes(43,-1/0),!0,"includes(43, -Infinity)");



test262/test/built-ins/decodeURI/S15.1.3.1_A1.2_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%1"+String.fromCharCode(indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+2) does not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%1"+String.fromCharCode(indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If string.charAt(k+2) does not represent hexadecimal digits, throw URIError");



test262/test/built-ins/decodeURI/S15.1.3.1_A1.12_T3.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%A0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%A0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Function/prototype/apply/S15.3.4.3_A3_T10.js


eval(" (function(){this.feat=1}).apply()"),assert.sameValue(this["feat"],1,'The value of this["feat"] is expected to be 1');


eval(" (function(){this.feat=1}).apply()"),assert.sameValue(this.feat,1,'The value of this["feat"] is expected to be 1');



test262/test/built-ins/decodeURI/S15.1.3.1_A1.12_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%A0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%F0%A0%"+String.fromCharCode(indexJ,indexJ)+"%A0"),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 11110xxx (n = 4) and (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Temporal/ZonedDateTime/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),later=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),later=new Temporal.ZonedDateTime(1000000000000000005n,"UTC");assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/built-ins/TypedArray/prototype/map/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.map,"function","implements TypedArray.prototype.map"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.map(()=>{});try{ab.resize(BPE*3)}catch(_){}array.map(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.map(()=>{}),new Test262Error("map completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.map,"function","implements TypedArray.prototype.map"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.map(()=>{});try{ab.resize(BPE*3)}catch{}array.map(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.map(()=>{}),new Test262Error("map completed successfully")})});



test262/test/built-ins/decodeURI/S15.1.3.1_A5.7.js


try{throw new decodeURI,new Test262Error("#1.1: new decodeURI() throw TypeError. Actual: "+new decodeURI)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new decodeURI() throw TypeError. Actual: "+e)}


try{throw new decodeURI,new Test262Error("#1.1: new decodeURI() throw TypeError. Actual: "+new decodeURI)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new decodeURI() throw TypeError. Actual: "+e)}



test262/test/built-ins/Array/prototype/includes/length-boundaries.js


var obj={0:"a",1:"b","9007199254740990":"c","9007199254740991":"d","9007199254740992":"e"};obj.length=-0;assert.sameValue([].includes.call(obj,"a"),!1,"-0");obj.length=-1;assert.sameValue([].includes.call(obj,"a"),!1,"-1");obj.length=-.1;assert.sameValue([].includes.call(obj,"a"),!1,"-0.1");obj.length=-1/0;assert.sameValue([].includes.call(obj,"a"),!1,"-Infinity");var fromIndex=9007199254740990;obj.length=9007199254740991;assert.sameValue([].includes.call(obj,"c",fromIndex),!0,"2**53-1, found value at 2**53-2");obj.length=9007199254740991;assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53-1, ignores indexes >= 2**53-1");obj.length=9007199254740992;assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53, ignores indexes >= 2**53-1");obj.length=9007199254740992;assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53+1, ignores indexes >= 2**53-1");obj.length=Infinity;assert.sameValue([].includes.call(obj,"c",fromIndex),!0,"Infinity, found item");assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"Infinity, ignores indexes >= 2**53-1");


var obj={0:"a",1:"b","9007199254740990":"c","9007199254740991":"d","9007199254740992":"e"};obj.length=-0,assert.sameValue([].includes.call(obj,"a"),!1,"-0"),obj.length=-1,assert.sameValue([].includes.call(obj,"a"),!1,"-1"),obj.length=-.1,assert.sameValue([].includes.call(obj,"a"),!1,"-0.1"),obj.length=-1/0,assert.sameValue([].includes.call(obj,"a"),!1,"-Infinity");var fromIndex=9007199254740990;obj.length=9007199254740991,assert.sameValue([].includes.call(obj,"c",fromIndex),!0,"2**53-1, found value at 2**53-2"),obj.length=9007199254740991,assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53-1, ignores indexes >= 2**53-1"),obj.length=9007199254740992,assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53, ignores indexes >= 2**53-1"),obj.length=9007199254740992,assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"2**53+1, ignores indexes >= 2**53-1"),obj.length=1/0,assert.sameValue([].includes.call(obj,"c",fromIndex),!0,"Infinity, found item"),assert.sameValue([].includes.call(obj,"d",fromIndex),!1,"Infinity, ignores indexes >= 2**53-1");



test262/test/built-ins/decodeURI/S15.1.3.1_A5.3.js


var x=decodeURI.length;verifyNotWritable(decodeURI,"length",null,Infinity);if(decodeURI.length!==x)throw new Test262Error("#1: x = decodeURI.length; decodeURI.length = Infinity; decodeURI.length === x. Actual: "+decodeURI.length);


var x=decodeURI.length;if(verifyNotWritable(decodeURI,"length",null,1/0),decodeURI.length!==x)throw new Test262Error("#1: x = decodeURI.length; decodeURI.length = Infinity; decodeURI.length === x. Actual: "+decodeURI.length);



test262/test/built-ins/Proxy/get/trap-is-not-callable-realm.js


var OProxy=$262.createRealm().global.Proxy,p=new OProxy({},{get:{}});assert.throws(TypeError,function(){p.attr});assert.throws(TypeError,function(){p["attr"]});


var OProxy=$262.createRealm().global.Proxy,p=new OProxy({},{get:{}});assert.throws(TypeError,function(){p.attr}),assert.throws(TypeError,function(){p.attr});



test262/test/built-ins/Temporal/ZonedDateTime/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC"),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321,timeZone:"UTC"};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/decodeURI/S15.1.3.1_A1.11_T2.js


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%E0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError!==!0&&(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 7) and  string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");


for(var result=!0,interval=[[0,47],[58,64],[71,96],[103,65535]],indexI=0;indexI<interval.length;indexI++)for(var indexJ=interval[indexI][0];indexJ<=interval[indexI][1];indexJ++)try{decodeURI("%E0%A0%"+String.fromCharCode(indexJ,indexJ)),result=!1}catch(e){e instanceof URIError||(result=!1)}if(result!==!0)throw new Test262Error("#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 7) and  string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError");



test262/test/built-ins/Proxy/get/null-handler.js


var p=Proxy.revocable({},{});p.revoke();assert.throws(TypeError,function(){p.proxy.attr});assert.throws(TypeError,function(){p.proxy["attr"]});


var p=Proxy.revocable({},{});p.revoke(),assert.throws(TypeError,function(){p.proxy.attr}),assert.throws(TypeError,function(){p.proxy.attr});



test262/test/built-ins/Array/prototype/includes/resizable-buffer-special-float-values.js


for(let ctor of floatCtors){const rab=CreateResizableArrayBuffer(4*ctor.BYTES_PER_ELEMENT,8*ctor.BYTES_PER_ELEMENT),lengthTracking=new ctor(rab);lengthTracking[0]=-1/0;lengthTracking[1]=Infinity;lengthTracking[2]=NaN;assert(Array.prototype.includes.call(lengthTracking,-1/0));assert(Array.prototype.includes.call(lengthTracking,Infinity));assert(Array.prototype.includes.call(lengthTracking,NaN))}


for(let ctor of floatCtors){const rab=CreateResizableArrayBuffer(4*ctor.BYTES_PER_ELEMENT,8*ctor.BYTES_PER_ELEMENT),lengthTracking=new ctor(rab);lengthTracking[0]=-1/0,lengthTracking[1]=1/0,lengthTracking[2]=NaN,assert(Array.prototype.includes.call(lengthTracking,-1/0)),assert(Array.prototype.includes.call(lengthTracking,1/0)),assert(Array.prototype.includes.call(lengthTracking,NaN))}



test262/test/built-ins/Proxy/get/trap-is-undefined-no-property.js


var target={attr:1},p=new Proxy(target,{});assert.sameValue(p.attr,1,"return target.attr");assert.sameValue(p.foo,void 0,"return target.foo");assert.sameValue(p["attr"],1,"return target.attr");assert.sameValue(p["foo"],void 0,"return target.foo");


var target={attr:1},p=new Proxy(target,{});assert.sameValue(p.attr,1,"return target.attr"),assert.sameValue(p.foo,void 0,"return target.foo"),assert.sameValue(p.attr,1,"return target.attr"),assert.sameValue(p.foo,void 0,"return target.foo");



test262/test/built-ins/Proxy/get/trap-is-not-callable.js


var p=new Proxy({},{get:{}});assert.throws(TypeError,function(){p.attr});assert.throws(TypeError,function(){p["attr"]});


var p=new Proxy({},{get:{}});assert.throws(TypeError,function(){p.attr}),assert.throws(TypeError,function(){p.attr});



test262/test/built-ins/Temporal/PlainTime/prototype/add/argument-string-duration-too-large.js


var ones="1".repeat(1e3);assert.sameValue(Number(ones),Infinity);var time=new Temporal.PlainTime,str="PT"+ones+"S";assert.throws(RangeError,()=>time.add(str));


var ones="1".repeat(1e3);assert.sameValue(Number(ones),1/0);var time=new Temporal.PlainTime,str="PT"+ones+"S";assert.throws(RangeError,()=>time.add(str));



test262/test/built-ins/TypedArray/prototype/map/callbackfn-resize.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,NaNvalue=isFloatTypedArrayConstructor(TA)?NaN:0,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=sample.map(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return index});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.compareArray(result,[0,1,2],"result (shrink)");elements=[];indices=[];arrays=[];result=sample.map(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return index});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.compareArray(result,expectedIndices,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,NaNvalue=isFloatTypedArrayConstructor(TA)?NaN:0,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=sample.map(function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),index}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.compareArray(result,[0,1,2],"result (shrink)"),elements=[],indices=[],arrays=[],result=sample.map(function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),index}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.compareArray(result,expectedIndices,"result (grow)")});



test262/test/built-ins/Temporal/PlainTime/prototype/add/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainTime.from({hour:12,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainTime.from({hour:12,minute:34,second:56,millisecond:987,microsecond:654,nanosecond:321});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T4.js


Function('this.field="oil"').call(void 0),assert.sameValue(this["field"],"oil",'The value of this["field"] is expected to be "oil"');


Function('this.field="oil"').call(void 0),assert.sameValue(this.field,"oil",'The value of this["field"] is expected to be "oil"');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A5_T1.js


var obj=1,retobj=Function("this.touched= true; return this;").call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj=1,retobj=Function("this.touched= true; return this;").call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T1.js


Function('this.field="strawberry"').call(),assert.sameValue(this["field"],"strawberry",'The value of this["field"] is expected to be "strawberry"');


Function('this.field="strawberry"').call(),assert.sameValue(this.field,"strawberry",'The value of this["field"] is expected to be "strawberry"');



test262/test/built-ins/Temporal/Duration/prototype/total/relativeto-infinity-throws-rangeerror.js


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,[prop]:obj}}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,[prop]:obj}})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A6_T1.js


Function("a1,a2,a3","this.shifted=a1;").call(null,[1]),assert.sameValue(this["shifted"].constructor,Array,'The value of this["shifted"].constructor is expected to equal the value of Array'),assert.sameValue(this["shifted"].length,1,'The value of this["shifted"].length is expected to be 1'),assert.sameValue(this["shifted"][0],1,'The value of this["shifted"][0] is expected to be 1');


Function("a1,a2,a3","this.shifted=a1;").call(null,[1]),assert.sameValue(this.shifted.constructor,Array,'The value of this["shifted"].constructor is expected to equal the value of Array'),assert.sameValue(this.shifted.length,1,'The value of this["shifted"].length is expected to be 1'),assert.sameValue(this.shifted[0],1,'The value of this["shifted"][0] is expected to be 1');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A6_T10.js


var obj={};(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(obj,arguments,"","2")})("",4,2,"a");assert.sameValue(obj["shifted"],"42",'The value of obj["shifted"] is expected to be "42"');assert.sameValue(typeof this["shifted"],"undefined",'The value of `typeof this["shifted"]` is expected to be "undefined"');


var obj={};(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(obj,arguments,"","2")})("",4,2,"a"),assert.sameValue(obj.shifted,"42",'The value of obj["shifted"] is expected to be "42"'),assert.sameValue(typeof this.shifted,"undefined",'The value of `typeof this["shifted"]` is expected to be "undefined"');



test262/test/built-ins/Error/isError/primitives.js


assert.sameValue(Error.isError(),!1),assert.sameValue(Error.isError(void 0),!1),assert.sameValue(Error.isError(null),!1),assert.sameValue(Error.isError(!0),!1),assert.sameValue(Error.isError(!1),!1),assert.sameValue(Error.isError(0),!1),assert.sameValue(Error.isError(-0),!1),assert.sameValue(Error.isError(NaN),!1),assert.sameValue(Error.isError(Infinity),!1),assert.sameValue(Error.isError(-1/0),!1),assert.sameValue(Error.isError(42),!1),assert.sameValue(Error.isError(""),!1),assert.sameValue(Error.isError("foo"),!1);


assert.sameValue(Error.isError(),!1),assert.sameValue(Error.isError(void 0),!1),assert.sameValue(Error.isError(null),!1),assert.sameValue(Error.isError(!0),!1),assert.sameValue(Error.isError(!1),!1),assert.sameValue(Error.isError(0),!1),assert.sameValue(Error.isError(-0),!1),assert.sameValue(Error.isError(NaN),!1),assert.sameValue(Error.isError(1/0),!1),assert.sameValue(Error.isError(-1/0),!1),assert.sameValue(Error.isError(42),!1),assert.sameValue(Error.isError(""),!1),assert.sameValue(Error.isError("foo"),!1);



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T10.js


eval(" (function(){this.feat=1}).call()"),assert.sameValue(this["feat"],1,'The value of this["feat"] is expected to be 1');


eval(" (function(){this.feat=1}).call()"),assert.sameValue(this.feat,1,'The value of this["feat"] is expected to be 1');



test262/test/built-ins/Temporal/PlainDate/prototype/with/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2);[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});


const instance=new Temporal.PlainDate(2e3,5,2);[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>instance.with({[prop]:inf},{overflow}),`${prop} property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.with({[prop]:obj},{overflow})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})})});



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A6_T7.js


(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(null,arguments,"",2)})("",1,2,!0),assert.sameValue(this["shifted"],"42",'The value of this["shifted"] is expected to be "42"');


(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(null,arguments,"",2)})("",1,2,!0),assert.sameValue(this.shifted,"42",'The value of this["shifted"] is expected to be "42"');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T9.js


eval(' Function("this.feat=1").call(void 0) '),assert.sameValue(this["feat"],1,'The value of this["feat"] is expected to be 1');


eval(' Function("this.feat=1").call(void 0) '),assert.sameValue(this.feat,1,'The value of this["feat"] is expected to be 1');



test262/test/built-ins/Temporal/Duration/prototype/total/duration-out-of-range-added-to-relativeto.js


const relativeTo=new Temporal.PlainDate(2e3,1,1);{const instance=new Temporal.Duration(0,0,0,5e8);assert.throws(RangeError,()=>instance.total({relativeTo,unit:"years"}),"days out of range, positive, unit years");assert.throws(RangeError,()=>instance.total({relativeTo,unit:"months"}),"days out of range, positive, unit months");assert.throws(RangeError,()=>instance.total({relativeTo,unit:"weeks"}),"days out of range, positive, unit weeks");const negInstance=new Temporal.Duration(0,0,0,-5e8);assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"years"}),"days out of range, negative, unit years");assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"months"}),"days out of range, negative, unit months");assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"weeks"}),"days out of range, negative, unit weeks")}{const instance=new Temporal.Duration(0,0,1,Math.trunc(104249991374.31703));assert.throws(RangeError,()=>instance.total({relativeTo,unit:"days"}),"weeks + days out of range, positive");const negInstance=new Temporal.Duration(0,0,-1,-Math.trunc(104249991374.31703));assert.throws(RangeError,()=>instance.total({relativeTo,unit:"days"}),"weeks + days out of range, negative")}


const relativeTo=new Temporal.PlainDate(2e3,1,1);{const instance=new Temporal.Duration(0,0,0,5e8);assert.throws(RangeError,()=>instance.total({relativeTo,unit:"years"}),"days out of range, positive, unit years"),assert.throws(RangeError,()=>instance.total({relativeTo,unit:"months"}),"days out of range, positive, unit months"),assert.throws(RangeError,()=>instance.total({relativeTo,unit:"weeks"}),"days out of range, positive, unit weeks");const negInstance=new Temporal.Duration(0,0,0,-5e8);assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"years"}),"days out of range, negative, unit years"),assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"months"}),"days out of range, negative, unit months"),assert.throws(RangeError,()=>negInstance.total({relativeTo,unit:"weeks"}),"days out of range, negative, unit weeks")}{const instance=new Temporal.Duration(0,0,1,Math.trunc(10424999137431703e-5));assert.throws(RangeError,()=>instance.total({relativeTo,unit:"days"}),"weeks + days out of range, positive");const negInstance=new Temporal.Duration(0,0,-1,-Math.trunc(2**53/86400));assert.throws(RangeError,()=>instance.total({relativeTo,unit:"days"}),"weeks + days out of range, negative")}



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A5_T3.js


var obj="soap",retobj=function(){return this.touched=!0,this}.call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj="soap",retobj=function(){return this.touched=!0,this}.call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/TypedArray/prototype/reduceRight/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reduceRight,"function","implements TypedArray.prototype.reduceRight"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reduceRight(()=>{});try{ab.resize(BPE*3)}catch(_){}array.reduceRight(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduceRight(()=>{}),new Test262Error("reduceRight completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reduceRight,"function","implements TypedArray.prototype.reduceRight"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reduceRight(()=>{});try{ab.resize(BPE*3)}catch{}array.reduceRight(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduceRight(()=>{}),new Test262Error("reduceRight completed successfully")})});



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T2.js


Function('this.field="green"').call(null),assert.sameValue(this["field"],"green",'The value of this["field"] is expected to be "green"');


Function('this.field="green"').call(null),assert.sameValue(this.field,"green",'The value of this["field"] is expected to be "green"');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A3_T3.js


Function('this.field="battle"').call(void 0),assert.sameValue(this["field"],"battle",'The value of this["field"] is expected to be "battle"');


Function('this.field="battle"').call(void 0),assert.sameValue(this.field,"battle",'The value of this["field"] is expected to be "battle"');



test262/test/built-ins/Object/prototype/propertyIsEnumerable/S15.2.4.7_A9.js


assert(!!Object.prototype.propertyIsEnumerable.hasOwnProperty("length"),'The value of !!Object.prototype.propertyIsEnumerable.hasOwnProperty("length") is expected to be true'),assert(!!delete Object.prototype.propertyIsEnumerable.length,"The value of !!delete Object.prototype.propertyIsEnumerable.length is expected to be true");


assert(!!Object.prototype.propertyIsEnumerable.hasOwnProperty("length"),'The value of !!Object.prototype.propertyIsEnumerable.hasOwnProperty("length") is expected to be true'),assert(delete Object.prototype.propertyIsEnumerable.length,"The value of !!delete Object.prototype.propertyIsEnumerable.length is expected to be true");



test262/test/built-ins/TypedArray/prototype/reduceRight/BigInt/result-of-any-type.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,44n]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[Infinity,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduceRight(function(){return item[0]});assert.sameValue(result,item[0],item[1]+" - using default accumulator");result=sample.reduceRight(function(){return item[0]},0);assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([42n,43n,44n]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[1/0,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduceRight(function(){return item[0]}),assert.sameValue(result,item[0],item[1]+" - using default accumulator"),result=sample.reduceRight(function(){return item[0]},0),assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A6_T8.js


(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(this,arguments,"",2)})("",4,2,null),assert.sameValue(this["shifted"],"42",'The value of this["shifted"] is expected to be "42"');


(function(){Function("a1,a2,a3","this.shifted=a1.length+a2+a3;").call(this,arguments,"",2)})("",4,2,null),assert.sameValue(this.shifted,"42",'The value of this["shifted"] is expected to be "42"');



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A7_T6.js


try{var obj=new(Function("function f(){this.p1=1;};return f").call())}catch(e){throw new Test262Error("#1: Function.prototype.call can't be used as [[Construct]] caller")}assert.sameValue(obj.p1,1,"The value of obj.p1 is expected to be 1");


try{var obj=new(Function("function f(){this.p1=1;};return f").call())}catch{throw new Test262Error("#1: Function.prototype.call can't be used as [[Construct]] caller")}assert.sameValue(obj.p1,1,"The value of obj.p1 is expected to be 1");



test262/test/built-ins/Function/prototype/call/S15.3.4.4_A5_T2.js


var obj=!0,retobj=new Function("this.touched= true; return this;").call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"');assert(retobj["touched"],'The value of retobj["touched"] is expected to be true');


var obj=!0,retobj=new Function("this.touched= true; return this;").call(obj);assert.sameValue(typeof obj.touched,"undefined",'The value of `typeof obj.touched` is expected to be "undefined"'),assert(retobj.touched,'The value of retobj["touched"] is expected to be true');



test262/test/built-ins/TypedArray/prototype/reduceRight/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.reduceRight,"function","implements TypedArray.prototype.reduceRight"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.reduceRight(()=>{});try{ab.resize(BPE*3)}catch(_){}array.reduceRight(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduceRight(()=>{}),new Test262Error("reduceRight completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.reduceRight,"function","implements TypedArray.prototype.reduceRight"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.reduceRight(()=>{});try{ab.resize(BPE*3)}catch{}array.reduceRight(()=>{});var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.reduceRight(()=>{}),new Test262Error("reduceRight completed successfully")})});



test262/test/built-ins/Function/prototype/toString/getter-class-expression-static.js


let x="h",f=Object.getOwnPropertyDescriptor(class{static get f(){}},"f").get,g=Object.getOwnPropertyDescriptor(class{static get["g"](){}},"g").get,h=Object.getOwnPropertyDescriptor(class{static get[x](){}},"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }");assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f=Object.getOwnPropertyDescriptor(class{static get f(){}},"f").get,g=Object.getOwnPropertyDescriptor(class{static get g(){}},"g").get,h=Object.getOwnPropertyDescriptor(class{static get[x](){}},"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }"),assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/Function/prototype/toString/getter-object.js


let x="h",f=Object.getOwnPropertyDescriptor({get f(){}},"f").get,g=Object.getOwnPropertyDescriptor({get["g"](){}},"g").get,h=Object.getOwnPropertyDescriptor({get[x](){}},"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }");assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f=Object.getOwnPropertyDescriptor({get f(){}},"f").get,g=Object.getOwnPropertyDescriptor({get g(){}},"g").get,h=Object.getOwnPropertyDescriptor({get[x](){}},"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }"),assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/Function/prototype/toString/async-method-object.js


let x="h",f={async f(){}}.f,g={async["g"](){}}.g,h={async[x](){}}.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }");assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f={async f(){}}.f,g={async g(){}}.g,h={async[x](){}}.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }"),assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/TypedArray/prototype/reduceRight/result-of-any-type.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,44]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[Infinity,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduceRight(function(){return item[0]});assert.sameValue(result,item[0],item[1]+" - using default accumulator");result=sample.reduceRight(function(){return item[0]},0);assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});


testWithTypedArrayConstructors(function(TA){var sample=new TA([42,43,44]);[["test262","string"],["","empty string"],[void 0,"undefined"],[null,"null"],[-0,"-0"],[42,"integer"],[NaN,"NaN"],[1/0,"Infinity"],[.6,"float number"],[!0,"true"],[!1,"false"],[Symbol(""),"symbol"],[{},"object"]].forEach(function(item){var result;result=sample.reduceRight(function(){return item[0]}),assert.sameValue(result,item[0],item[1]+" - using default accumulator"),result=sample.reduceRight(function(){return item[0]},0),assert.sameValue(result,item[0],item[1]+" - using custom accumulator")})});



test262/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-resize.js


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),secondNext,expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[];nexts=[];indices=[];arrays=[];result=sample.reduceRight(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(BPE),secondNext=void 0,expectedPrevs=[262],expectedNexts=[0],expectedIndices=[0],expectedArrays=[sample]}catch(_){secondNext=0,expectedPrevs=[262,2,1],expectedNexts=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,[262,2,1],"prevs (shrink)");assert.compareArray(nexts,[0,secondNext,0],"nexts (shrink)");assert.compareArray(indices,[2,1,0],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,0,"result (shrink)");prevs=[];nexts=[];indices=[];arrays=[];result=sample.reduceRight(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch(_){}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevs,"prevs (grow)");assert.compareArray(nexts,expectedNexts,"nexts (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),secondNext,expectedPrevs,expectedNexts,expectedIndices,expectedArrays,prevs,nexts,indices,arrays,result;prevs=[],nexts=[],indices=[],arrays=[],result=sample.reduceRight(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(BPE),secondNext=void 0,expectedPrevs=[262],expectedNexts=[0],expectedIndices=[0],expectedArrays=[sample]}catch{secondNext=0,expectedPrevs=[262,2,1],expectedNexts=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,[262,2,1],"prevs (shrink)"),assert.compareArray(nexts,[0,secondNext,0],"nexts (shrink)"),assert.compareArray(indices,[2,1,0],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,0,"result (shrink)"),prevs=[],nexts=[],indices=[],arrays=[],result=sample.reduceRight(function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch{}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevs,"prevs (grow)"),assert.compareArray(nexts,expectedNexts,"nexts (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,expectedIndices[expectedIndices.length-1],"result (grow)")});



test262/test/built-ins/Function/prototype/toString/getter-class-expression.js


let x="h",f=Object.getOwnPropertyDescriptor(class{get f(){}}.prototype,"f").get,g=Object.getOwnPropertyDescriptor(class{get["g"](){}}.prototype,"g").get,h=Object.getOwnPropertyDescriptor(class{get[x](){}}.prototype,"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }");assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f=Object.getOwnPropertyDescriptor(class{get f(){}}.prototype,"f").get,g=Object.getOwnPropertyDescriptor(class{get g(){}}.prototype,"g").get,h=Object.getOwnPropertyDescriptor(class{get[x](){}}.prototype,"h").get;assertToStringOrNativeFunction(f,"get /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }"),assertToStringOrNativeFunction(g,'get /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"get /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/Temporal/Duration/prototype/add/infinity-throws-rangeerror.js


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/built-ins/Function/prototype/toString/async-generator-method-object.js


let x="h",f={async*f(){}}.f,g={async*["g"](){}}.g,h={async*[x](){}}.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");


let x="h",f={async*f(){}}.f,g={async*g(){}}.g,h={async*[x](){}}.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/Temporal/PlainDate/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.equals({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.equals({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Function/prototype/toString/method-class-expression.js


let x="h",f=class{f(){}}.prototype.f,g=class{["g"](){}}.prototype.g,h=class{[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"f /* a */ ( /* b */ ) /* c */ { /* d */ }");assertToStringOrNativeFunction(g,'[ /* a */ "g" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }');assertToStringOrNativeFunction(h,"[ /* a */ x /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }");


let x="h",f=class{f(){}}.prototype.f,g=class{g(){}}.prototype.g,h=class{[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"f /* a */ ( /* b */ ) /* c */ { /* d */ }"),assertToStringOrNativeFunction(g,'[ /* a */ "g" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }'),assertToStringOrNativeFunction(h,"[ /* a */ x /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }");



test262/test/built-ins/Object/prototype/valueOf/S15.2.4.4_A9.js


assert(!!Object.prototype.valueOf.hasOwnProperty("length"),'The value of !!Object.prototype.valueOf.hasOwnProperty("length") is expected to be true'),assert(!!delete Object.prototype.valueOf.length,"The value of !!delete Object.prototype.valueOf.length is expected to be true"),assert(!Object.prototype.valueOf.hasOwnProperty("length"),'The value of !Object.prototype.valueOf.hasOwnProperty("length") is expected to be true');


assert(!!Object.prototype.valueOf.hasOwnProperty("length"),'The value of !!Object.prototype.valueOf.hasOwnProperty("length") is expected to be true'),assert(delete Object.prototype.valueOf.length,"The value of !!delete Object.prototype.valueOf.length is expected to be true"),assert(!Object.prototype.valueOf.hasOwnProperty("length"),'The value of !Object.prototype.valueOf.hasOwnProperty("length") is expected to be true');



test262/test/built-ins/Function/prototype/toString/generator-method.js


let x="h",f={*f(){}}.f,g={*["g"](){}}.g,h={*[x](){}}.h;assertToStringOrNativeFunction(f,"* /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }");assertToStringOrNativeFunction(g,'* /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"* /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f={*f(){}}.f,g={*g(){}}.g,h={*[x](){}}.h;assertToStringOrNativeFunction(f,"* /* a */ f /* b */ ( /* c */ ) /* d */ { /* e */ }"),assertToStringOrNativeFunction(g,'* /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"* /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/Array/prototype/copyWithin/non-negative-out-of-bounds-end.js


assert.compareArray([0,1,2,3].copyWithin(0,1,6),[1,2,3,3],"[0, 1, 2, 3].copyWithin(0, 1, 6) must return [1, 2, 3, 3]"),assert.compareArray([0,1,2,3].copyWithin(0,1,Infinity),[1,2,3,3],"[0, 1, 2, 3].copyWithin(0, 1, Infinity) must return [1, 2, 3, 3]"),assert.compareArray([0,1,2,3,4,5].copyWithin(1,3,6),[0,3,4,5,4,5],"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) must return [0, 3, 4, 5, 4, 5]"),assert.compareArray([0,1,2,3,4,5].copyWithin(1,3,Infinity),[0,3,4,5,4,5],"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) must return [0, 3, 4, 5, 4, 5]");


assert.compareArray([0,1,2,3].copyWithin(0,1,6),[1,2,3,3],"[0, 1, 2, 3].copyWithin(0, 1, 6) must return [1, 2, 3, 3]"),assert.compareArray([0,1,2,3].copyWithin(0,1,1/0),[1,2,3,3],"[0, 1, 2, 3].copyWithin(0, 1, Infinity) must return [1, 2, 3, 3]"),assert.compareArray([0,1,2,3,4,5].copyWithin(1,3,6),[0,3,4,5,4,5],"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, 6) must return [0, 3, 4, 5, 4, 5]"),assert.compareArray([0,1,2,3,4,5].copyWithin(1,3,1/0),[0,3,4,5,4,5],"[0, 1, 2, 3, 4, 5].copyWithin(1, 3, Infinity) must return [0, 3, 4, 5, 4, 5]");



test262/test/built-ins/Function/prototype/toString/setter-class-expression.js


let x="h",f=Object.getOwnPropertyDescriptor(class{set f(a){}}.prototype,"f").set,g=Object.getOwnPropertyDescriptor(class{set["g"](a){}}.prototype,"g").set,h=Object.getOwnPropertyDescriptor(class{set[x](a){}}.prototype,"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");


let x="h",f=Object.getOwnPropertyDescriptor(class{set f(a){}}.prototype,"f").set,g=Object.getOwnPropertyDescriptor(class{set g(a){}}.prototype,"g").set,h=Object.getOwnPropertyDescriptor(class{set[x](a){}}.prototype,"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/Proxy/set/trap-is-not-callable-realm.js


var OProxy=$262.createRealm().global.Proxy,p=new OProxy({},{set:{}});assert.throws(TypeError,function(){p.attr=1});assert.throws(TypeError,function(){p["attr"]=1});


var OProxy=$262.createRealm().global.Proxy,p=new OProxy({},{set:{}});assert.throws(TypeError,function(){p.attr=1}),assert.throws(TypeError,function(){p.attr=1});



test262/test/built-ins/Proxy/set/null-handler.js


var p=Proxy.revocable({},{});p.revoke();assert.throws(TypeError,function(){p.proxy.attr=1});assert.throws(TypeError,function(){p.proxy["attr"]=1});


var p=Proxy.revocable({},{});p.revoke(),assert.throws(TypeError,function(){p.proxy.attr=1}),assert.throws(TypeError,function(){p.proxy.attr=1});



test262/test/built-ins/Function/prototype/toString/async-generator-method-class-expression-static.js


let x="h",f=class{static async*f(){}}.f,g=class{static async*["g"](){}}.g,h=class{static async*[x](){}}.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");


let x="h",f=class{static async*f(){}}.f,g=class{static async*g(){}}.g,h=class{static async*[x](){}}.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.toLocaleString,"function","implements TypedArray.prototype.toLocaleString"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.toLocaleString();try{ab.resize(BPE*3)}catch(_){}array.toLocaleString();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.toLocaleString(),new Test262Error("toLocaleString completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.toLocaleString,"function","implements TypedArray.prototype.toLocaleString"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithBigIntTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.toLocaleString();try{ab.resize(BPE*3)}catch{}array.toLocaleString();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.toLocaleString(),new Test262Error("toLocaleString completed successfully")})});



test262/test/built-ins/AsyncDisposableStack/prototype/move/this-does-not-have-internal-asyncdisposablestate-throws.js


assert.sameValue(typeof AsyncDisposableStack.prototype.move,"function");var move=AsyncDisposableStack.prototype.move;assert.throws(TypeError,function(){move.call({["[[AsyncDisposableState]]"]:{}})},"Ordinary object without [[AsyncDisposableState]]");assert.throws(TypeError,function(){move.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot");assert.throws(TypeError,function(){move.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){move.call(stack)},"DisposableStack instance");


assert.sameValue(typeof AsyncDisposableStack.prototype.move,"function");var move=AsyncDisposableStack.prototype.move;assert.throws(TypeError,function(){move.call({"[[AsyncDisposableState]]":{}})},"Ordinary object without [[AsyncDisposableState]]"),assert.throws(TypeError,function(){move.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot"),assert.throws(TypeError,function(){move.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){move.call(stack)},"DisposableStack instance");



test262/test/built-ins/Temporal/PlainTime/prototype/round/roundingincrement-out-of-range.js


const time=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0}));assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:-1}));assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:0}));assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:.9}));assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001}));assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:Infinity}));


const time=new Temporal.PlainTime(12,34,56,0,0,5);assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:-1/0})),assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:-1})),assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:0})),assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:.9})),assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:1000000001})),assert.throws(RangeError,()=>time.round({smallestUnit:"nanoseconds",roundingIncrement:1/0}));



test262/test/built-ins/Temporal/PlainDate/prototype/subtract/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDate.from({year:2e3,month:5,day:2});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDate.from({year:2e3,month:5,day:2});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.subtract({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.subtract({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/Proxy/set/trap-is-not-callable.js


var p=new Proxy({},{set:{}});assert.throws(TypeError,function(){p.attr=1});assert.throws(TypeError,function(){p["attr"]=1});


var p=new Proxy({},{set:{}});assert.throws(TypeError,function(){p.attr=1}),assert.throws(TypeError,function(){p.attr=1});



test262/test/built-ins/Function/prototype/toString/async-method-class-expression-static.js


let x="h",f=class{static async f(){}}.f,g=class{static async["g"](){}}.g,h=class{static async[x](){}}.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }");assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f=class{static async f(){}}.f,g=class{static async g(){}}.g,h=class{static async[x](){}}.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }"),assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/AsyncDisposableStack/prototype/defer/this-does-not-have-internal-asyncdisposablestate-throws.js


assert.sameValue(typeof AsyncDisposableStack.prototype.defer,"function");var defer=AsyncDisposableStack.prototype.defer;assert.throws(TypeError,function(){defer.call({["[[AsyncDisposableState]]"]:{}})},"Ordinary object without [[AsyncDisposableState]]");assert.throws(TypeError,function(){defer.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot");assert.throws(TypeError,function(){defer.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){defer.call(stack)},"DisposableStack instance");


assert.sameValue(typeof AsyncDisposableStack.prototype.defer,"function");var defer=AsyncDisposableStack.prototype.defer;assert.throws(TypeError,function(){defer.call({"[[AsyncDisposableState]]":{}})},"Ordinary object without [[AsyncDisposableState]]"),assert.throws(TypeError,function(){defer.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot"),assert.throws(TypeError,function(){defer.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){defer.call(stack)},"DisposableStack instance");



test262/test/built-ins/TypedArray/prototype/toLocaleString/return-abrupt-from-this-out-of-bounds.js


assert.sameValue(typeof TypedArray.prototype.toLocaleString,"function","implements TypedArray.prototype.toLocaleString"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch(_){}array.toLocaleString();try{ab.resize(BPE*3)}catch(_){}array.toLocaleString();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch(_){expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.toLocaleString(),new Test262Error("toLocaleString completed successfully")})});


assert.sameValue(typeof TypedArray.prototype.toLocaleString,"function","implements TypedArray.prototype.toLocaleString"),assert.sameValue(typeof ArrayBuffer.prototype.resize,"function","implements ArrayBuffer.prototype.resize"),testWithTypedArrayConstructors(TA=>{var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);try{ab.resize(BPE*5)}catch{}array.toLocaleString();try{ab.resize(BPE*3)}catch{}array.toLocaleString();var expectedError;try{ab.resize(BPE*3-1),expectedError=TypeError}catch{expectedError=Test262Error}assert.throws(expectedError,()=>{throw array.toLocaleString(),new Test262Error("toLocaleString completed successfully")})});



test262/test/built-ins/Function/prototype/toString/setter-class-expression-static.js


let x="h",f=Object.getOwnPropertyDescriptor(class{static set f(a){}},"f").set,g=Object.getOwnPropertyDescriptor(class{static set["g"](a){}},"g").set,h=Object.getOwnPropertyDescriptor(class{static set[x](a){}},"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");


let x="h",f=Object.getOwnPropertyDescriptor(class{static set f(a){}},"f").set,g=Object.getOwnPropertyDescriptor(class{static set g(a){}},"g").set,h=Object.getOwnPropertyDescriptor(class{static set[x](a){}},"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/AsyncDisposableStack/prototype/adopt/this-does-not-have-internal-asyncdisposablestate-throws.js


assert.sameValue(typeof AsyncDisposableStack.prototype.adopt,"function");var adopt=AsyncDisposableStack.prototype.adopt;assert.throws(TypeError,function(){adopt.call({["[[AsyncDisposableState]]"]:{}})},"Ordinary object without [[AsyncDisposableState]]");assert.throws(TypeError,function(){adopt.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot");assert.throws(TypeError,function(){adopt.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){adopt.call(stack)},"DisposableStack instance");


assert.sameValue(typeof AsyncDisposableStack.prototype.adopt,"function");var adopt=AsyncDisposableStack.prototype.adopt;assert.throws(TypeError,function(){adopt.call({"[[AsyncDisposableState]]":{}})},"Ordinary object without [[AsyncDisposableState]]"),assert.throws(TypeError,function(){adopt.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot"),assert.throws(TypeError,function(){adopt.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){adopt.call(stack)},"DisposableStack instance");



test262/test/built-ins/Function/prototype/toString/Function.js


let f=Function("a"," /* a */ b, c /* b */ //","/* c */ ; /* d */ //");assertToStringOrNativeFunction(f,"function anonymous(a, /* a */ b, c /* b */ //\n) {\n/* c */ ; /* d */ //\n}");


let f=Function("a"," /* a */ b, c /* b */ //","/* c */ ; /* d */ //");assertToStringOrNativeFunction(f,`function anonymous(a, /* a */ b, c /* b */ //
) {
/* c */ ; /* d */ //
}`);



test262/test/built-ins/Function/prototype/toString/async-generator-method-class-expression.js


let x="h",f=class{async*f(){}}.prototype.f,g=class{async*["g"](){}}.prototype.g,h=class{async*[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");


let x="h",f=class{async*f(){}}.prototype.f,g=class{async*g(){}}.prototype.g,h=class{async*[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"async /* a */ * /* b */ f /* c */ ( /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'async /* a */ * /* b */ [ /* c */ "g" /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"async /* a */ * /* b */ [ /* c */ x /* d */ ] /* e */ ( /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/Temporal/PlainDate/prototype/add/infinity-throws-rangeerror.js


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDate.from({year:2e3,month:5,day:2});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:Infinity},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,Infinity}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});


const overflows=["constrain","reject"],fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=Temporal.PlainDate.from({year:2e3,month:5,day:2});overflows.forEach(overflow=>{fields.forEach(field=>{assert.throws(RangeError,()=>instance.add({[field]:1/0},{overflow}))})});let calls=0;const obj={valueOf(){return calls++,1/0}};overflows.forEach(overflow=>{fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.add({[field]:obj},{overflow})),assert.sameValue(calls,1,"it fails after fetching the primitive value")})});



test262/test/built-ins/Array/prototype/push/length-near-integer-limit.js


var arrayLike={"9007199254740989":"9007199254740989","9007199254740991":"9007199254740991",length:9007199254740990};Array.prototype.push.call(arrayLike,"new-value");assert.sameValue(arrayLike.length,9007199254740991,"New arrayLike.length is 2**53 - 1");assert.sameValue(arrayLike["9007199254740989"],"9007199254740989","arrayLike['9007199254740989'] is unchanged");assert.sameValue(arrayLike["9007199254740990"],"new-value","arrayLike['9007199254740990'] has new value");assert.sameValue(arrayLike["9007199254740991"],"9007199254740991","arrayLike['9007199254740991'] is unchanged");


var arrayLike={"9007199254740989":"9007199254740989","9007199254740991":"9007199254740991",length:9007199254740990};Array.prototype.push.call(arrayLike,"new-value"),assert.sameValue(arrayLike.length,2**53-1,"New arrayLike.length is 2**53 - 1"),assert.sameValue(arrayLike["9007199254740989"],"9007199254740989","arrayLike['9007199254740989'] is unchanged"),assert.sameValue(arrayLike["9007199254740990"],"new-value","arrayLike['9007199254740990'] has new value"),assert.sameValue(arrayLike["9007199254740991"],"9007199254740991","arrayLike['9007199254740991'] is unchanged");



test262/test/built-ins/Function/prototype/toString/method-class-expression-static.js


let x="h",f=class{static f(){}}.f,g=class{static["g"](){}}.g,h=class{static[x](){}}.h;assertToStringOrNativeFunction(f,"f /* a */ ( /* b */ ) /* c */ { /* d */ }");assertToStringOrNativeFunction(g,'[ /* a */ "g" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }');assertToStringOrNativeFunction(h,"[ /* a */ x /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }");


let x="h",f=class{static f(){}}.f,g=class{static g(){}}.g,h=class{static[x](){}}.h;assertToStringOrNativeFunction(f,"f /* a */ ( /* b */ ) /* c */ { /* d */ }"),assertToStringOrNativeFunction(g,'[ /* a */ "g" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }'),assertToStringOrNativeFunction(h,"[ /* a */ x /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }");



test262/test/built-ins/AsyncDisposableStack/prototype/disposeAsync/this-does-not-have-internal-asyncdisposablestate-rejects.js


asyncTest(async function(){assert.sameValue(typeof AsyncDisposableStack.prototype.disposeAsync,"function");var disposeAsync=AsyncDisposableStack.prototype.disposeAsync;await assert.throwsAsync(TypeError,function(){return disposeAsync.call({["[[AsyncDisposableState]]"]:{}})},"Ordinary object without [[AsyncDisposableState]]");await assert.throwsAsync(TypeError,function(){return disposeAsync.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot");await assert.throwsAsync(TypeError,function(){return disposeAsync.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;await assert.throwsAsync(TypeError,function(){return disposeAsync.call(stack)},"DisposableStack instance")});


asyncTest(async function(){assert.sameValue(typeof AsyncDisposableStack.prototype.disposeAsync,"function");var disposeAsync=AsyncDisposableStack.prototype.disposeAsync;await assert.throwsAsync(TypeError,function(){return disposeAsync.call({"[[AsyncDisposableState]]":{}})},"Ordinary object without [[AsyncDisposableState]]"),await assert.throwsAsync(TypeError,function(){return disposeAsync.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot"),await assert.throwsAsync(TypeError,function(){return disposeAsync.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;await assert.throwsAsync(TypeError,function(){return disposeAsync.call(stack)},"DisposableStack instance")});



test262/test/built-ins/Function/prototype/toString/async-method-class-expression.js


let x="h",f=class{async f(){}}.prototype.f,g=class{async["g"](){}}.prototype.g,h=class{async[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }");assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }');assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");


let x="h",f=class{async f(){}}.prototype.f,g=class{async g(){}}.prototype.g,h=class{async[x](){}}.prototype.h;assertToStringOrNativeFunction(f,"async f /* a */ ( /* b */ ) /* c */ { /* d */ }"),assertToStringOrNativeFunction(g,'async /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }'),assertToStringOrNativeFunction(h,"async /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ ) /* f */ { /* g */ }");



test262/test/built-ins/Function/prototype/toString/GeneratorFunction.js


let GeneratorFunction=Object.getPrototypeOf(function*(){}).constructor,g=GeneratorFunction("a"," /* a */ b, c /* b */ //","/* c */ yield yield; /* d */ //");assertToStringOrNativeFunction(g,"function* anonymous(a, /* a */ b, c /* b */ //\n) {\n/* c */ yield yield; /* d */ //\n}");


let GeneratorFunction=Object.getPrototypeOf(function*(){}).constructor,g=GeneratorFunction("a"," /* a */ b, c /* b */ //","/* c */ yield yield; /* d */ //");assertToStringOrNativeFunction(g,`function* anonymous(a, /* a */ b, c /* b */ //
) {
/* c */ yield yield; /* d */ //
}`);



test262/test/built-ins/AsyncDisposableStack/prototype/use/this-does-not-have-internal-asyncdisposablestate-throws.js


assert.sameValue(typeof AsyncDisposableStack.prototype.use,"function");var use=AsyncDisposableStack.prototype.use;assert.throws(TypeError,function(){use.call({["[[AsyncDisposableState]]"]:{}})},"Ordinary object without [[AsyncDisposableState]]");assert.throws(TypeError,function(){use.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot");assert.throws(TypeError,function(){use.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){use.call(stack)},"DisposableStack instance");


assert.sameValue(typeof AsyncDisposableStack.prototype.use,"function");var use=AsyncDisposableStack.prototype.use;assert.throws(TypeError,function(){use.call({"[[AsyncDisposableState]]":{}})},"Ordinary object without [[AsyncDisposableState]]"),assert.throws(TypeError,function(){use.call(AsyncDisposableStack.prototype)},"AsyncDisposableStack.prototype does not have a [[AsyncDisposableState]] internal slot"),assert.throws(TypeError,function(){use.call(AsyncDisposableStack)},"AsyncDisposableStack does not have a [[AsyncDisposableState]] internal slot");var stack=new DisposableStack;assert.throws(TypeError,function(){use.call(stack)},"DisposableStack instance");



test262/test/built-ins/Function/prototype/toString/method-computed-property-name.js


let f={["f"](){}}.f,g={[{a(){}}.a](){}}["a(){}"];assertToStringOrNativeFunction(f,'[ /* a */ "f" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }');assertToStringOrNativeFunction(g,"[ { a(){} }.a ](){ }");


let f={f(){}}.f,g={[{a(){}}.a](){}}["a(){}"];assertToStringOrNativeFunction(f,'[ /* a */ "f" /* b */ ] /* c */ ( /* d */ ) /* e */ { /* f */ }'),assertToStringOrNativeFunction(g,"[ { a(){} }.a ](){ }");



test262/test/built-ins/Temporal/PlainDate/prototype/since/roundingincrement-non-integer.js


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7),result=later.since(earlier,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,4,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=later.since(earlier,{smallestUnit:"days",roundingIncrement:1000000000.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7),result=later.since(earlier,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,4,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=later.since(earlier,{smallestUnit:"days",roundingIncrement:1e9+.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");



test262/test/built-ins/TypedArray/prototype/subarray/BigInt/infinity.js


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n,43n]);assert(compareArray(sample.subarray(-1/0),[40n,41n,42n,43n]),"begin == -Infinity");assert(compareArray(sample.subarray(Infinity),[]),"being == Infinity");assert(compareArray(sample.subarray(0,-1/0),[]),"end == -Infinity");assert(compareArray(sample.subarray(0,Infinity),[40n,41n,42n,43n]),"end == Infinity")});


testWithBigIntTypedArrayConstructors(function(TA){var sample=new TA([40n,41n,42n,43n]);assert(compareArray(sample.subarray(-1/0),[40n,41n,42n,43n]),"begin == -Infinity"),assert(compareArray(sample.subarray(1/0),[]),"being == Infinity"),assert(compareArray(sample.subarray(0,-1/0),[]),"end == -Infinity"),assert(compareArray(sample.subarray(0,1/0),[40n,41n,42n,43n]),"end == Infinity")});



test262/test/built-ins/Function/prototype/toString/setter-object.js


let x="h",f=Object.getOwnPropertyDescriptor({set f(a){}},"f").set,g=Object.getOwnPropertyDescriptor({set["g"](a){}},"g").set,h=Object.getOwnPropertyDescriptor({set[x](a){}},"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }");assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }');assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");


let x="h",f=Object.getOwnPropertyDescriptor({set f(a){}},"f").set,g=Object.getOwnPropertyDescriptor({set g(a){}},"g").set,h=Object.getOwnPropertyDescriptor({set[x](a){}},"h").set;assertToStringOrNativeFunction(f,"set /* a */ f /* b */ ( /* c */ a /* d */ ) /* e */ { /* f */ }"),assertToStringOrNativeFunction(g,'set /* a */ [ /* b */ "g" /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }'),assertToStringOrNativeFunction(h,"set /* a */ [ /* b */ x /* c */ ] /* d */ ( /* e */ a /* f */ ) /* g */ { /* h */ }");



test262/test/built-ins/Temporal/PlainDate/prototype/since/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7);assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:-1})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:0})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:.9})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>later.since(earlier,{roundingIncrement:1/0}));



test262/test/built-ins/global/S10.2.3_A1.3_T4.js


var evalStr='//CHECK#27\nif ( Math === null ) {\n  throw new Test262Error("#27: Math === null");\n}\n;\n';eval(evalStr);


var evalStr=`//CHECK#27
if ( Math === null ) {
  throw new Test262Error("#27: Math === null");
}
;
`;eval(evalStr);



test262/test/built-ins/Temporal/PlainTime/minute-undefined.js


const hour=12,explicit=new Temporal.PlainTime(hour,void 0);TemporalHelpers.assertPlainTime(explicit,hour,0,0,0,0,0,"explicit");const implicit=new Temporal.PlainTime(hour);TemporalHelpers.assertPlainTime(implicit,hour,0,0,0,0,0,"implicit");


const hour=12,explicit=new Temporal.PlainTime(12,void 0);TemporalHelpers.assertPlainTime(explicit,12,0,0,0,0,0,"explicit");const implicit=new Temporal.PlainTime(12);TemporalHelpers.assertPlainTime(implicit,12,0,0,0,0,0,"implicit");



test262/test/built-ins/global/S10.2.3_A2.3_T4.js


var evalStr=`//CHECK#1\nfor (var x in this) {\n  if ( x === 'Math' ) {\n    throw new Test262Error("#1: 'Math' have attribute DontEnum");\n  }\n}\n`;eval(evalStr);


var evalStr=`//CHECK#1
for (var x in this) {
  if ( x === 'Math' ) {
    throw new Test262Error("#1: 'Math' have attribute DontEnum");
  }
}
`;eval(evalStr);



test262/test/built-ins/Object/prototype/toLocaleString/S15.2.4.3_A9.js


assert(!!Object.prototype.toLocaleString.hasOwnProperty("length"),'The value of !!Object.prototype.toLocaleString.hasOwnProperty("length") is expected to be true'),assert(!!delete Object.prototype.toLocaleString.length,"The value of !!delete Object.prototype.toLocaleString.length is expected to be true"),assert(!Object.prototype.toLocaleString.hasOwnProperty("length"),'The value of !Object.prototype.toLocaleString.hasOwnProperty("length") is expected to be true');


assert(!!Object.prototype.toLocaleString.hasOwnProperty("length"),'The value of !!Object.prototype.toLocaleString.hasOwnProperty("length") is expected to be true'),assert(delete Object.prototype.toLocaleString.length,"The value of !!delete Object.prototype.toLocaleString.length is expected to be true"),assert(!Object.prototype.toLocaleString.hasOwnProperty("length"),'The value of !Object.prototype.toLocaleString.hasOwnProperty("length") is expected to be true');



test262/test/built-ins/global/S10.2.3_A2.3_T1.js


var evalStr=`//CHECK#1\nfor (var x in this) {\n  if ( x === 'NaN' ) {\n    throw new Test262Error("#1: 'NaN' have attribute DontEnum");\n  } else if ( x === 'Infinity' ) {\n    throw new Test262Error("#1: 'Infinity' have attribute DontEnum");\n  } else if ( x === 'undefined' ) {\n    throw new Test262Error("#1: 'undefined' have attribute DontEnum");\n  }\n}\n`;eval(evalStr);


var evalStr=`//CHECK#1
for (var x in this) {
  if ( x === 'NaN' ) {
    throw new Test262Error("#1: 'NaN' have attribute DontEnum");
  } else if ( x === 'Infinity' ) {
    throw new Test262Error("#1: 'Infinity' have attribute DontEnum");
  } else if ( x === 'undefined' ) {
    throw new Test262Error("#1: 'undefined' have attribute DontEnum");
  }
}
`;eval(evalStr);



test262/test/built-ins/Temporal/PlainDate/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.since({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.since({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/TypedArray/prototype/subarray/infinity.js


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42,43]);assert(compareArray(sample.subarray(-1/0),[40,41,42,43]),"begin == -Infinity");assert(compareArray(sample.subarray(Infinity),[]),"being == Infinity");assert(compareArray(sample.subarray(0,-1/0),[]),"end == -Infinity");assert(compareArray(sample.subarray(0,Infinity),[40,41,42,43]),"end == Infinity")});


testWithTypedArrayConstructors(function(TA){var sample=new TA([40,41,42,43]);assert(compareArray(sample.subarray(-1/0),[40,41,42,43]),"begin == -Infinity"),assert(compareArray(sample.subarray(1/0),[]),"being == Infinity"),assert(compareArray(sample.subarray(0,-1/0),[]),"end == -Infinity"),assert(compareArray(sample.subarray(0,1/0),[40,41,42,43]),"end == Infinity")});



test262/test/built-ins/Temporal/PlainDate/prototype/since/argument-plaindatetime.js


TemporalHelpers.checkPlainDateTimeConversionFastPath(datetime=>{const date=new Temporal.PlainDate(2e3,5,2),result=date.since(datetime);assert.sameValue(result.total({unit:"nanoseconds"}),0,"time part dropped")});


TemporalHelpers.checkPlainDateTimeConversionFastPath(datetime=>{const result=new Temporal.PlainDate(2e3,5,2).since(datetime);assert.sameValue(result.total({unit:"nanoseconds"}),0,"time part dropped")});



test262/test/built-ins/FinalizationRegistry/prototype/unregister/this-does-not-have-internal-cells-throws.js


assert.sameValue(typeof FinalizationRegistry.prototype.unregister,"function");var unregister=FinalizationRegistry.prototype.unregister,token={};assert.throws(TypeError,function(){unregister.call({["[[Cells]]"]:{}},token)},"Ordinary object without [[Cells]]");assert.throws(TypeError,function(){unregister.call(WeakRef.prototype,token)},"WeakRef.prototype does not have a [[Cells]] internal slot");assert.throws(TypeError,function(){unregister.call(WeakRef,token)},"WeakRef does not have a [[Cells]] internal slot");var wr=new WeakRef({});assert.throws(TypeError,function(){unregister.call(wr,token)},"WeakRef instance");var wm=new WeakMap;assert.throws(TypeError,function(){unregister.call(wm,token)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){unregister.call(ws,token)},"WeakSet instance");


assert.sameValue(typeof FinalizationRegistry.prototype.unregister,"function");var unregister=FinalizationRegistry.prototype.unregister,token={};assert.throws(TypeError,function(){unregister.call({"[[Cells]]":{}},token)},"Ordinary object without [[Cells]]"),assert.throws(TypeError,function(){unregister.call(WeakRef.prototype,token)},"WeakRef.prototype does not have a [[Cells]] internal slot"),assert.throws(TypeError,function(){unregister.call(WeakRef,token)},"WeakRef does not have a [[Cells]] internal slot");var wr=new WeakRef({});assert.throws(TypeError,function(){unregister.call(wr,token)},"WeakRef instance");var wm=new WeakMap;assert.throws(TypeError,function(){unregister.call(wm,token)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){unregister.call(ws,token)},"WeakSet instance");



test262/test/built-ins/Temporal/Duration/prototype/round/relativeto-infinity-throws-rangeerror.js


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,[prop]:obj}}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,[prop]:obj}})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Temporal/Duration/prototype/round/roundingincrement-non-integer.js


const instance=new Temporal.Duration(0,0,0,1),options={smallestUnit:"days",roundingMode:"expand",relativeTo:new Temporal.PlainDate(2e3,1,1)},result=instance.round({...options,roundingIncrement:2.5});TemporalHelpers.assertDuration(result,0,0,0,2,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=instance.round({...options,roundingIncrement:1000000000.5});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");


const instance=new Temporal.Duration(0,0,0,1),options={smallestUnit:"days",roundingMode:"expand",relativeTo:new Temporal.PlainDate(2e3,1,1)},result=instance.round({...options,roundingIncrement:2.5});TemporalHelpers.assertDuration(result,0,0,0,2,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=instance.round({...options,roundingIncrement:1e9+.5});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");



test262/test/built-ins/TypedArray/prototype/toSorted/comparefn-stop-after-error.js


testWithTypedArrayConstructors(TA=>{var calls=0,ta=new TA([3,1,2]);try{ta.toSorted(()=>{if(++calls,calls===1)throw new Test262Error})}catch(e){}assert.sameValue(calls<=1,!0,"compareFn is not called after an error")});


testWithTypedArrayConstructors(TA=>{var calls=0,ta=new TA([3,1,2]);try{ta.toSorted(()=>{if(++calls,calls===1)throw new Test262Error})}catch{}assert.sameValue(calls<=1,!0,"compareFn is not called after an error")});



test262/test/built-ins/FinalizationRegistry/prototype/register/this-does-not-have-internal-target-throws.js


assert.sameValue(typeof FinalizationRegistry.prototype.register,"function");var register=FinalizationRegistry.prototype.register,target={};assert.throws(TypeError,function(){register.call({["[[Cells]]"]:{}},target)},"Ordinary object without [[Cells]]");assert.throws(TypeError,function(){register.call(WeakRef.prototype,target)},"WeakRef.prototype does not have a [[Cells]] internal slot");assert.throws(TypeError,function(){register.call(WeakRef,target)},"WeakRef does not have a [[Cells]] internal slot");var wr=new WeakRef({});assert.throws(TypeError,function(){register.call(wr,target)},"WeakRef instance");var wm=new WeakMap;assert.throws(TypeError,function(){register.call(wm,target)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){register.call(ws,target)},"WeakSet instance");


assert.sameValue(typeof FinalizationRegistry.prototype.register,"function");var register=FinalizationRegistry.prototype.register,target={};assert.throws(TypeError,function(){register.call({"[[Cells]]":{}},target)},"Ordinary object without [[Cells]]"),assert.throws(TypeError,function(){register.call(WeakRef.prototype,target)},"WeakRef.prototype does not have a [[Cells]] internal slot"),assert.throws(TypeError,function(){register.call(WeakRef,target)},"WeakRef does not have a [[Cells]] internal slot");var wr=new WeakRef({});assert.throws(TypeError,function(){register.call(wr,target)},"WeakRef instance");var wm=new WeakMap;assert.throws(TypeError,function(){register.call(wm,target)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){register.call(ws,target)},"WeakSet instance");



test262/test/language/module-code/top-level-await/syntax/try-await-expr-regexp.js


try{await/1/}catch(e){await/1/}try{await/1/}finally{await/1/}try{await/1/}catch(e){await/1/}finally{await/1/}


try{await/1/}catch{await/1/}try{await/1/}finally{await/1/}try{await/1/}catch{await/1/}finally{await/1/}



test262/test/built-ins/TypedArray/prototype/byteLength/BigInt/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteLength,BPE*2);try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.byteLength,BPE*2,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.byteLength,BPE*2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=BPE*2}assert.sameValue(array.byteLength,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithBigIntTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteLength,BPE*2);try{ab.resize(BPE*5)}catch{}assert.sameValue(array.byteLength,BPE*2,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.byteLength,BPE*2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=BPE*2}assert.sameValue(array.byteLength,expected,"following shrink (out of bounds)")});



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-template-literal.js


typeof await"";


await"";



test262/test/built-ins/TypedArray/prototype/byteLength/resizable-array-buffer-fixed.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteLength,BPE*2);try{ab.resize(BPE*5)}catch(_){}assert.sameValue(array.byteLength,BPE*2,"following grow");try{ab.resize(BPE*3)}catch(_){}assert.sameValue(array.byteLength,BPE*2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch(_){expected=BPE*2}assert.sameValue(array.byteLength,expected,"following shrink (out of bounds)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,ab=new ArrayBuffer(BPE*4,{maxByteLength:BPE*5}),array=new TA(ab,BPE,2);assert.sameValue(array.byteLength,BPE*2);try{ab.resize(BPE*5)}catch{}assert.sameValue(array.byteLength,BPE*2,"following grow");try{ab.resize(BPE*3)}catch{}assert.sameValue(array.byteLength,BPE*2,"following shrink (within bounds)");var expected;try{ab.resize(BPE*3-1),expected=0}catch{expected=BPE*2}assert.sameValue(array.byteLength,expected,"following shrink (out of bounds)")});



test262/test/language/comments/multi-line-asi-carriage-return.js


"";"";


"";



test262/test/language/comments/multi-line-asi-line-separator.js


"";"";


"";



test262/test/built-ins/Temporal/Duration/prototype/round/roundingincrement-out-of-range.js


const instance=new Temporal.Duration(1),options={smallestUnit:"years",relativeTo:new Temporal.PlainDate(2e3,1,1)};assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:-1/0}));assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:-1}));assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:0}));assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:1000000001}));assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:Infinity}));


const instance=new Temporal.Duration(1),options={smallestUnit:"years",relativeTo:new Temporal.PlainDate(2e3,1,1)};assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:-1/0})),assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:-1})),assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:0})),assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:1000000001})),assert.throws(RangeError,()=>instance.round({...options,roundingIncrement:1/0}));



test262/test/language/comments/multi-line-asi-line-feed.js


"";"";


"";



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-null.js


export var name1=await null;export var{x=await null}={};


export var name1=await null,{x=await null}={};



test262/test/built-ins/Temporal/Duration/compare/relativeto-propertybag-infinity-throws-rangeerror.js


const duration1=new Temporal.Duration(0,0,0,1),duration2=new Temporal.Duration(0,0,0,0,24),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[Infinity,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.Duration.compare(duration1,duration2,{relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.Duration.compare(duration1,duration2,{relativeTo:{...base,[prop]:obj}}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const duration1=new Temporal.Duration(0,0,0,1),duration2=new Temporal.Duration(0,0,0,0,24),base={year:2e3,month:5,day:2,hour:15,minute:30,second:45,millisecond:987,microsecond:654,nanosecond:321};[1/0,-1/0].forEach(inf=>{["year","month","day","hour","minute","second","millisecond","microsecond","nanosecond"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.Duration.compare(duration1,duration2,{relativeTo:{...base,[prop]:inf}}),`${prop} property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>Temporal.Duration.compare(duration1,duration2,{relativeTo:{...base,[prop]:obj}})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Temporal/PlainDate/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,[prop]:obj1},other));assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,[prop]:obj2}));assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const other=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,[prop]:inf},other),`${prop} property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,[prop]:obj1},other)),assert.compareArray(calls1,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,prop);assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,[prop]:obj2})),assert.compareArray(calls2,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Array/S15.4_A1.1_T4.js


var x=[];x["0"]=0;assert.sameValue(x[0],0,"The value of x[0] is expected to be 0");var y=[];y["1"]=1;assert.sameValue(y[1],1,"The value of y[1] is expected to be 1");


var x=[];x[0]=0,assert.sameValue(x[0],0,"The value of x[0] is expected to be 0");var y=[];y[1]=1,assert.sameValue(y[1],1,"The value of y[1] is expected to be 1");



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-obj-literal.js


if(await{function(){}}){}


await{function(){}};



test262/test/language/comments/hashbang/eval.js


assert.sameValue(eval("#!\n"),void 0),assert.sameValue(eval("#!\n1"),1),assert.sameValue(eval("#!2\n"),void 0);


assert.sameValue(eval(`#!
`),void 0),assert.sameValue(eval(`#!
1`),1),assert.sameValue(eval(`#!2
`),void 0);



test262/test/language/comments/hashbang/eval-indirect.js


assert.sameValue((0,eval)("#!\n"),void 0),assert.sameValue((0,eval)("#!\n1"),1),assert.sameValue((0,eval)("#!2\n"),void 0);


assert.sameValue((0,eval)(`#!
`),void 0),assert.sameValue((0,eval)(`#!
1`),1),assert.sameValue((0,eval)(`#!2
`),void 0);



test262/test/language/comments/hashbang/function-constructor.js


const AsyncFunction=async function(){}.constructor,GeneratorFunction=function*(){}.constructor,AsyncGeneratorFunction=async function*(){}.constructor;for(const ctor of[Function,AsyncFunction,GeneratorFunction,AsyncGeneratorFunction])assert.throws(SyntaxError,()=>ctor("#!\n_",""),`${ctor.name} Call argument`),assert.throws(SyntaxError,()=>ctor("#!\n_"),`${ctor.name} Call body`),assert.throws(SyntaxError,()=>new ctor("#!\n_",""),`${ctor.name} Construct argument`),assert.throws(SyntaxError,()=>new ctor("#!\n_"),`${ctor.name} Construct body`);


const AsyncFunction=async function(){}.constructor,GeneratorFunction=function*(){}.constructor,AsyncGeneratorFunction=async function*(){}.constructor;for(const ctor of[Function,AsyncFunction,GeneratorFunction,AsyncGeneratorFunction])assert.throws(SyntaxError,()=>ctor(`#!
_`,""),`${ctor.name} Call argument`),assert.throws(SyntaxError,()=>ctor(`#!
_`),`${ctor.name} Call body`),assert.throws(SyntaxError,()=>new ctor(`#!
_`,""),`${ctor.name} Construct argument`),assert.throws(SyntaxError,()=>new ctor(`#!
_`),`${ctor.name} Construct body`);



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-literal-string.js


if(await""){}


await"";



test262/test/built-ins/Temporal/PlainDate/prototype/until/roundingincrement-non-integer.js


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7),result=earlier.until(later,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,4,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=earlier.until(later,{smallestUnit:"days",roundingIncrement:1000000000.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7),result=earlier.until(later,{roundingIncrement:2.5,roundingMode:"trunc"});TemporalHelpers.assertDuration(result,0,0,0,4,0,0,0,0,0,0,"roundingIncrement 2.5 truncates to 2");const result2=earlier.until(later,{smallestUnit:"days",roundingIncrement:1e9+.5,roundingMode:"expand"});TemporalHelpers.assertDuration(result2,0,0,0,1e9,0,0,0,0,0,0,"roundingIncrement 1e9 + 0.5 truncates to 1e9");



test262/test/language/comments/multi-line-asi-paragraph-separator.js


"";"";


"";



test262/test/language/statementList/block-block-with-labels.js


x:;





test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-func-expression.js


if(await function(){}){}


await function(){};



test262/test/built-ins/Array/property-cast-boolean-primitive.js


var x=[];x[!0]=1;assert.sameValue(x[1],void 0,"The value of x[1] is expected to equal undefined");assert.sameValue(x["true"],1,'The value of x["true"] is expected to be 1');x[!1]=0;assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined");assert.sameValue(x["false"],0,'The value of x["false"] is expected to be 0');


var x=[];x[!0]=1,assert.sameValue(x[1],void 0,"The value of x[1] is expected to equal undefined"),assert.sameValue(x.true,1,'The value of x["true"] is expected to be 1'),x[!1]=0,assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined"),assert.sameValue(x.false,0,'The value of x["false"] is expected to be 0');



test262/test/language/module-code/top-level-await/syntax/void-await-expr-null.js


void await null;


await null;



test262/test/built-ins/Temporal/Duration/prototype/round/duration-out-of-range-added-to-relativeto.js


const relativeTo=new Temporal.PlainDate(2e3,1,1);{const instance=new Temporal.Duration(0,0,0,5e8);assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"years"}),"days out of range, positive, smallestUnit years");assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"months"}),"days out of range, positive, smallestUnit months");assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"weeks"}),"days out of range, positive, smallestUnit weeks");const negInstance=new Temporal.Duration(0,0,0,-5e8);assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"years"}),"days out of range, negative, smallestUnit years");assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"months"}),"days out of range, negative, smallestUnit months");assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"weeks"}),"days out of range, negative, smallestUnit weeks")}{const instance=new Temporal.Duration(0,0,1,Math.trunc(104249991374.31703));assert.throws(RangeError,()=>instance.round({relativeTo,largestUnit:"days"}),"weeks + days out of range, positive");const negInstance=new Temporal.Duration(0,0,-1,-Math.trunc(104249991374.31703));assert.throws(RangeError,()=>instance.round({relativeTo,largestUnit:"days"}),"weeks + days out of range, negative")}


const relativeTo=new Temporal.PlainDate(2e3,1,1);{const instance=new Temporal.Duration(0,0,0,5e8);assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"years"}),"days out of range, positive, smallestUnit years"),assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"months"}),"days out of range, positive, smallestUnit months"),assert.throws(RangeError,()=>instance.round({relativeTo,smallestUnit:"weeks"}),"days out of range, positive, smallestUnit weeks");const negInstance=new Temporal.Duration(0,0,0,-5e8);assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"years"}),"days out of range, negative, smallestUnit years"),assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"months"}),"days out of range, negative, smallestUnit months"),assert.throws(RangeError,()=>negInstance.round({relativeTo,smallestUnit:"weeks"}),"days out of range, negative, smallestUnit weeks")}{const instance=new Temporal.Duration(0,0,1,Math.trunc(10424999137431703e-5));assert.throws(RangeError,()=>instance.round({relativeTo,largestUnit:"days"}),"weeks + days out of range, positive");const negInstance=new Temporal.Duration(0,0,-1,-Math.trunc(2**53/86400));assert.throws(RangeError,()=>instance.round({relativeTo,largestUnit:"days"}),"weeks + days out of range, negative")}



test262/test/language/types/number/S8.5_A2.1.js


var x=9007199254740994,y=.9999847412109375,z=x+y,d=z-x;if(d!==0)throw new Test262Error("#1: var x = 9007199254740994.0; var y = 1.0 - 1/65536.0; var z = x + y; var d = z - x; d === 0. Actual: "+d);


var x=9007199254740994,y=1-1/65536,z=x+y,d=z-x;if(d!==0)throw new Test262Error("#1: var x = 9007199254740994.0; var y = 1.0 - 1/65536.0; var z = x + y; var d = z - x; d === 0. Actual: "+d);



test262/test/built-ins/Array/S15.4_A1.1_T5.js


var x=[];x[null]=0;assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined");assert.sameValue(x["null"],0,'The value of x["null"] is expected to be 0');var y=[];y[void 0]=0;assert.sameValue(y[0],void 0,"The value of y[0] is expected to equal undefined");assert.sameValue(y["undefined"],0,'The value of y["undefined"] is expected to be 0');


var x=[];x[null]=0,assert.sameValue(x[0],void 0,"The value of x[0] is expected to equal undefined"),assert.sameValue(x.null,0,'The value of x["null"] is expected to be 0');var y=[];y[void 0]=0,assert.sameValue(y[0],void 0,"The value of y[0] is expected to equal undefined"),assert.sameValue(y.undefined,0,'The value of y["undefined"] is expected to be 0');



test262/test/language/module-code/top-level-await/syntax/void-await-expr-this.js


void await this;


await void 0;



test262/test/language/types/number/S8.5_A8.js


var p_inf=1/0,inf=Infinity;if(p_inf!==inf)throw new Test262Error("#1: Infinity is the same as +Infinity");


var p_inf=1/0,inf=1/0;if(p_inf!==inf)throw new Test262Error("#1: Infinity is the same as +Infinity");



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-func-expression.js


typeof await function(){};


await function(){};



test262/test/language/module-code/top-level-await/syntax/void-await-expr-literal-number.js


void await 1;


await 1;



test262/test/language/module-code/top-level-await/syntax/void-await-expr-identifier.js


var foo=1;void await foo;


var foo=1;await foo;



test262/test/language/types/number/S8.5_A12.1.js


var p_inf=1/0,inf=Infinity;if(p_inf!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: +Infinity is the same as Number.POSITIVE_INFINITY");if(inf!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: Infinity is the same as Number.POSITIVE_INFINITY");


var p_inf=1/0,inf=1/0;if(p_inf!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: +Infinity is the same as Number.POSITIVE_INFINITY");if(inf!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: Infinity is the same as Number.POSITIVE_INFINITY");



test262/test/language/types/number/S8.5_A2.2.js


var x=9007199254740994,y=.9999847412109375,z=x+y,d=z-x;if(d===2)throw new Test262Error("#1: var x = 9007199254740994.0; var y = 1.0 - 1/65536.0; var z = x + y; var d = z - x; d !== 2");


var x=9007199254740994,y=1-1/65536,z=x+y,d=z-x;if(d===2)throw new Test262Error("#1: var x = 9007199254740994.0; var y = 1.0 - 1/65536.0; var z = x + y; var d = z - x; d !== 2");



test262/test/built-ins/Temporal/PlainDate/prototype/until/roundingincrement-out-of-range.js


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001}));assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:Infinity}));


const earlier=new Temporal.PlainDate(2e3,5,2),later=new Temporal.PlainDate(2e3,5,7);assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1/0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:-1})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:0})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:.9})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1000000001})),assert.throws(RangeError,()=>earlier.until(later,{roundingIncrement:1/0}));



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-literal-number.js


export var name1=await 1;export var{x=await 1}={};


export var name1=await 1,{x=await 1}={};



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-null.js


typeof await null;


await null;



test262/test/language/types/object/S8.6.2_A8.js


var x=Object.preventExtensions({}),y={};try{x.__proto__=y}catch(err){}if(Object.getPrototypeOf(x)!==Object.prototype)throw new Test262Error("Prototype of non-extensible object mutated");


var x=Object.preventExtensions({}),y={};try{x.__proto__=y}catch{}if(Object.getPrototypeOf(x)!==Object.prototype)throw new Test262Error("Prototype of non-extensible object mutated");



test262/test/built-ins/Function/S15.3.2.1_A2_T2.js


try{var f=Function("arg1, arg2","arg3","return arg1+arg2+arg3;")}catch(e){throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true");assert.sameValue(f("AB","BA",1),"ABBA1",'f(AB, BA, 1) must return "ABBA1"');


try{var f=Function("arg1, arg2","arg3","return arg1+arg2+arg3;")}catch{throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true"),assert.sameValue(f("AB","BA",1),"ABBA1",'f(AB, BA, 1) must return "ABBA1"');



test262/test/language/types/object/S8.6.2_A5_T2.js


this.position=0;var seat={};seat["move"]=function(){position++};seat.move();if(position!==1)throw new Test262Error("#1: this.position=0; seat = {}; seat['move']=function(){position++}; seat.move(); position === 1. Actual: "+position);seat["move"]();if(position!==2)throw new Test262Error("#2: this.position=0; seat = {}; seat['move']=function(){position++}; seat.move(); seat['move'](); position === 2. Actual: "+position);


this.position=0;var seat={};if(seat.move=function(){position++},seat.move(),position!==1)throw new Test262Error("#1: this.position=0; seat = {}; seat['move']=function(){position++}; seat.move(); position === 1. Actual: "+position);if(seat.move(),position!==2)throw new Test262Error("#2: this.position=0; seat = {}; seat['move']=function(){position++}; seat.move(); seat['move'](); position === 2. Actual: "+position);



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-literal-number.js


typeof await 1;


await 1;



test262/test/built-ins/Temporal/PlainDate/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[Infinity,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj}));assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});


const instance=new Temporal.PlainDate(2e3,5,2),base={year:2e3,month:5,day:2};[1/0,-1/0].forEach(inf=>{["year","month","day"].forEach(prop=>{assert.throws(RangeError,()=>instance.until({...base,[prop]:inf}),`${prop} property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,prop);assert.throws(RangeError,()=>instance.until({...base,[prop]:obj})),assert.compareArray(calls,[`get ${prop}.valueOf`,`call ${prop}.valueOf`],"it fails after fetching the primitive value")})});



test262/test/built-ins/Array/prototype/map/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalResult,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.map.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalResult=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalResult=2,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return index});assert.compareArray(elements,expectedElements,"elements (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.compareArray(result,[0,1,finalResult],"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.map.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return index});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.compareArray(result,expectedIndices,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalResult,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.map.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalResult=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalResult=2,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),index}),assert.compareArray(elements,expectedElements,"elements (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.compareArray(result,[0,1,finalResult],"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.map.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),index}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.compareArray(result,expectedIndices,"result (grow)")});



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-array-literal.js


typeof await[];


await[];



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-this.js


typeof await this;


await void 0;



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-identifier.js


var foo=1;if(await foo){}


var foo=1;await foo;



test262/test/built-ins/Temporal/PlainDate/prototype/until/argument-plaindatetime.js


TemporalHelpers.checkPlainDateTimeConversionFastPath(datetime=>{const date=new Temporal.PlainDate(2e3,5,2),result=date.until(datetime);assert.sameValue(result.total({unit:"nanoseconds"}),0,"time part dropped")});


TemporalHelpers.checkPlainDateTimeConversionFastPath(datetime=>{const result=new Temporal.PlainDate(2e3,5,2).until(datetime);assert.sameValue(result.total({unit:"nanoseconds"}),0,"time part dropped")});



test262/test/language/types/object/S8.6.2_A5_T4.js


var __count=0;this["beep"]=function(){__count++};beep();if(__count!==1)throw new Test262Error('#1: __count=0; this["beep"]=function(){__count++}; beep(); __count === 1. Actual: '+__count);this["beep"]();if(__count!==2)throw new Test262Error('#2: __count=0; this["beep"]=function(){__count++}; beep(); this["beep"](); __count === 2. Actual: '+__count);


var __count=0;if(this.beep=function(){__count++},beep(),__count!==1)throw new Test262Error('#1: __count=0; this["beep"]=function(){__count++}; beep(); __count === 1. Actual: '+__count);if(this.beep(),__count!==2)throw new Test262Error('#2: __count=0; this["beep"]=function(){__count++}; beep(); this["beep"](); __count === 2. Actual: '+__count);



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-template-literal.js


export var name1=await"";export var{x=await""}={};


export var name1=await"",{x=await""}={};



test262/test/language/module-code/top-level-await/syntax/await-expr-dyn-import.js


try{await import("foo")}catch(e){}


try{await import("foo")}catch{}



test262/test/language/block-scope/shadowing/let-declaration-shadowing-catch-parameter.js


try{throw"stuff1"}catch(a){{let a=3;assert.sameValue(a,3)}assert.sameValue(a,"stuff1")}


try{throw"stuff1"}catch(a){assert.sameValue(3,3),assert.sameValue(a,"stuff1")}



test262/test/language/module-code/top-level-await/syntax/void-await-expr-obj-literal.js


void await{function(){}};


await{function(){}};



test262/test/language/module-code/top-level-await/syntax/try-await-expr-literal-string.js


try{await""}catch(e){await""}try{await""}finally{await""}try{await""}catch(e){await""}finally{await""}


try{await""}catch{await""}try{await""}finally{await""}try{await""}catch{await""}finally{await""}



test262/test/language/module-code/top-level-await/syntax/void-await-expr-nested.js


void await await await await await await await await await await await await await await await"await";


await await await await await await await await await await await await await await await"await";



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-new-expr.js


export var name1=await new Promise(function(res,rej){res(1)});export var{x=await new Promise(function(res,rej){res(1)})}={};


export var name1=await new Promise(function(res,rej){res(1)}),{x=await new Promise(function(res,rej){res(1)})}={};



test262/test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-var.js


{{var f}var f}


var f,f;



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-regexp.js


if(await/1/){}


await/1/;



test262/test/language/block-scope/leave/try-block-let-declaration-only-shadows-outer-parameter-value-1.js


(function(x){try{let x="inner";throw 0}catch(e){assert.sameValue(x,"outer")}})("outer");


(function(x){try{let x2="inner";throw 0}catch{assert.sameValue(x,"outer")}})("outer");



test262/test/built-ins/Function/S15.3.2.1_A2_T3.js


try{var f=Function("arg1, arg2, arg3","return arg1+arg2+arg3;")}catch(e){throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true");assert.sameValue(f(1,1,"ABBA"),"2ABBA",'f(1, 1, ABBA) must return "2ABBA"');


try{var f=Function("arg1, arg2, arg3","return arg1+arg2+arg3;")}catch{throw new Test262Error("#1: test failed")}assert(f instanceof Function,"The result of evaluating (f instanceof Function) is expected to be true"),assert.sameValue(f(1,1,"ABBA"),"2ABBA",'f(1, 1, ABBA) must return "2ABBA"');



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-regexp.js


export var name1=await/1/;export var{x=await/1/}={};


export var name1=await/1/,{x=await/1/}={};



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-regexp.js


typeof await/1/;


await/1/;



test262/test/language/module-code/top-level-await/syntax/void-await-expr-array-literal.js


void await[];


await[];



test262/test/language/block-scope/leave/finally-block-let-declaration-only-shadows-outer-parameter-value-1.js


try{(function(x){try{let x="inner";throw 0}finally{assert.sameValue(x,"outer")}})("outer")}catch(e){}


try{(function(x){try{let x2="inner";throw 0}finally{assert.sameValue(x,"outer")}})("outer")}catch{}



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-new-expr.js


if(await new Promise(function(res,rej){res(1)})){}


await new Promise(function(res,rej){res(1)});



test262/test/language/block-scope/leave/for-loop-block-let-declaration-only-shadows-outer-parameter-value-1.js


(function(x){for(var i=0;i<10;++i){let x="inner"+i;continue}assert.sameValue(x,"outer")})("outer");


(function(x){for(var i=0;i<10;++i){let x2="inner"+i}assert.sameValue(x,"outer")})("outer");



test262/test/language/module-code/top-level-await/syntax/try-await-expr-new-expr.js


try{await new Promise(function(res,rej){res(1)})}catch(e){await new Promise(function(res,rej){res(1)})}try{await new Promise(function(res,rej){res(1)})}finally{await new Promise(function(res,rej){res(1)})}try{await new Promise(function(res,rej){res(1)})}catch(e){await new Promise(function(res,rej){res(1)})}finally{await new Promise(function(res,rej){res(1)})}


try{await new Promise(function(res,rej){res(1)})}catch{await new Promise(function(res,rej){res(1)})}try{await new Promise(function(res,rej){res(1)})}finally{await new Promise(function(res,rej){res(1)})}try{await new Promise(function(res,rej){res(1)})}catch{await new Promise(function(res,rej){res(1)})}finally{await new Promise(function(res,rej){res(1)})}



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-nested.js


if(await await await await await await await await await await await await await await await"await"){}


await await await await await await await await await await await await await await await"await";



test262/test/language/statements/if/S12.5_A2.js


if(eval("true")){}else throw new Test262Error('#1: In the "if" Statement eval as Expression is admitted');


if(!eval("true"))throw new Test262Error('#1: In the "if" Statement eval as Expression is admitted');



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-null.js


if(await null){}


await null;



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-array-literal.js


export var name1=await[];export var{x=await[]}={};


export var name1=await[],{x=await[]}={};



test262/test/built-ins/Object/seal/seal-infinity.js


Object.seal(Infinity);


Object.seal(1/0);



test262/test/language/module-code/top-level-await/syntax/void-await-expr-regexp.js


void await/1/;


await/1/;



test262/test/language/types/reference/S8.7_A5_T1.js


if(typeof __ref!="undefined")throw new Test262Error('#1: typeof(__ref) === "undefined". Actual: '+typeof __ref);var obj={},__ref=obj;if(typeof __ref>"u")throw new Test262Error('#2: obj = new Object(); var __ref = obj; typeof(__ref) !== "undefined"');if(delete __ref!==!1)throw new Test262Error("#3: obj = new Object(); var __ref = obj; delete __ref === false. Actual: "+delete __ref);if(typeof __ref!="object")throw new Test262Error('#4: obj = new Object(); var __ref = obj; delete __ref; typeof(__ref) === "object". Actual: '+typeof __ref);if(typeof obj!="object")throw new Test262Error('#5: obj = new Object(); var __ref = obj; delete __ref; typeof(obj) === "object". Actual: '+typeof obj);


if(typeof __ref<"u")throw new Test262Error('#1: typeof(__ref) === "undefined". Actual: '+typeof __ref);var obj=new Object,__ref=obj;if(typeof __ref>"u")throw new Test262Error('#2: obj = new Object(); var __ref = obj; typeof(__ref) !== "undefined"');if(delete __ref)throw new Test262Error("#3: obj = new Object(); var __ref = obj; delete __ref === false. Actual: "+delete __ref);if(typeof __ref!="object")throw new Test262Error('#4: obj = new Object(); var __ref = obj; delete __ref; typeof(__ref) === "object". Actual: '+typeof __ref);if(typeof obj!="object")throw new Test262Error('#5: obj = new Object(); var __ref = obj; delete __ref; typeof(obj) === "object". Actual: '+typeof obj);



test262/test/language/module-code/top-level-await/syntax/void-await-expr-template-literal.js


void await"";


await"";



test262/test/language/types/reference/S8.7.1_A1.js


this.y=1;if(delete this.y!==!0)throw new Test262Error("#1: this.y = 1; (delete this.y) === true. Actual: "+delete this.y);if(this.y!==void 0)throw new Test262Error("#2: this.y = 1; (delete this.y) === true; this.y === undefined. Actual: "+this.y);


if(this.y=1,!delete this.y)throw new Test262Error("#1: this.y = 1; (delete this.y) === true. Actual: "+delete this.y);if(this.y!==void 0)throw new Test262Error("#2: this.y = 1; (delete this.y) === true; this.y === undefined. Actual: "+this.y);



test262/test/built-ins/Temporal/Duration/from/infinity-throws-rangeerror.js


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"];fields.forEach(field=>{assert.throws(RangeError,()=>Temporal.Duration.from({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>Temporal.Duration.from({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"];fields.forEach(field=>{assert.throws(RangeError,()=>Temporal.Duration.from({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>Temporal.Duration.from({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-this.js


if(await this){}


await void 0;



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-nested.js


typeof await await await await await await await await await await await await await await await"await";


await await await await await await await await await await await await await await await"await";



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-nested.js


export var name1=await await await await await await await await await await await await await await await"await";export var{x=await await await await await await await await await await await await await await await"await"}={};


export var name1=await await await await await await await await await await await await await await await"await",{x=await await await await await await await await await await await await await await await"await"}={};



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-array-literal.js


if(await[]){}


await[];



test262/test/language/expressions/template-literal/tv-template-head.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[0],"","Template value (empty)"),assert.sameValue(s.raw[0],"","Template raw value (empty)")})`${1}`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[0],"foo","Template value (with content)"),assert.sameValue(s.raw[0],"foo","Template raw value (with content)")})`foo${1}`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[0],"","Template value (empty)"),assert.sameValue(s.raw[0],"","Template raw value (empty)")}`${1}`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[0],"foo","Template value (with content)"),assert.sameValue(s.raw[0],"foo","Template raw value (with content)")}`foo${1}`,assert.sameValue(calls,1);



test262/test/language/module-code/top-level-await/syntax/void-await-expr-new-expr.js


void await new Promise(function(res,rej){res(1)});


await new Promise(function(res,rej){res(1)});



test262/test/language/eval-code/direct/parse-failure-1.js


var x;try{throw eval("x = 1; x\n++"),new Test262Error('#1.1: eval("x = 1; x\\u000A++") must throw a SyntaxError. Actual: '+eval("x = 1; x\n++"))}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error('#1.2: eval("x = 1; x\\u000A++") must throw a SyntaxError. Actual: '+e)}


var x;try{throw eval(`x = 1; x
++`),new Test262Error('#1.1: eval("x = 1; x\\u000A++") must throw a SyntaxError. Actual: '+eval(`x = 1; x
++`))}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error('#1.2: eval("x = 1; x\\u000A++") must throw a SyntaxError. Actual: '+e)}



test262/test/language/expressions/template-literal/tv-template-middle.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[1],"","Template value (empty)"),assert.sameValue(s.raw[1],"","Template raw value (empty)")})`${1}${2}`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[1],"foo","Template value (with content)"),assert.sameValue(s.raw[1],"foo","Template raw value (with content)")})`${1}foo${2}`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[1],"","Template value (empty)"),assert.sameValue(s.raw[1],"","Template raw value (empty)")}`${1}${2}`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[1],"foo","Template value (with content)"),assert.sameValue(s.raw[1],"foo","Template raw value (with content)")}`${1}foo${2}`,assert.sameValue(calls,1);



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-identifier.js


var foo=1;typeof await foo;


var foo=1;await foo;



test262/test/language/expressions/template-literal/tv-hex-escape-sequence.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[0],"A","TV"),assert.sameValue(s.raw[0],"\\x41","TRV")})`\x41`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[0],"A","TV"),assert.sameValue(s.raw[0],"\\x41","TRV")}`\x41`,assert.sameValue(calls,1);



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-obj-literal.js


typeof await{function(){}};


await{function(){}};



test262/test/language/expressions/template-literal/literal-expr-member-expr.js


var object={number:5,string:"stringValue"};assert.sameValue(`foo ${object.number} bar`,"foo 5 bar","number value property");assert.sameValue(`foo ${object.string} bar`,"foo stringValue bar","string value property");assert.sameValue(`foo ${object["string"]} bar`,"foo stringValue bar","string value property (single-quote string dereference)");assert.sameValue(`foo ${object["string"]} bar`,"foo stringValue bar","string value property (double-quote string dereference)");


var object={number:5,string:"stringValue"};assert.sameValue(`foo ${object.number} bar`,"foo 5 bar","number value property"),assert.sameValue(`foo ${object.string} bar`,"foo stringValue bar","string value property"),assert.sameValue(`foo ${object.string} bar`,"foo stringValue bar","string value property (single-quote string dereference)"),assert.sameValue(`foo ${object.string} bar`,"foo stringValue bar","string value property (double-quote string dereference)");



test262/test/language/expressions/template-literal/tv-line-continuation.js


var calls;calls=0;(function(cs){calls++,assert.sameValue(cs[0],"","Line Feed and Carriage Return"),assert.sameValue(cs.raw[0],"\\\n\\\n\\\n","Line Feed and Carriage Return")})`\
\
\
`;assert.sameValue(calls,1);calls=0;(function(cs){calls++,assert.sameValue(cs[0],"","Line Separator"),assert.sameValue(cs.raw[0],"\\\u2028","Line Separator")})`\ `;assert.sameValue(calls,1);calls=0;(function(cs){calls++,assert.sameValue(cs[0],"","Paragraph Separater"),assert.sameValue(cs.raw[0],"\\\u2029","Paragraph Separator")})`\ `;assert.sameValue(calls,1);


var calls;calls=0,function(cs){calls++,assert.sameValue(cs[0],"","Line Feed and Carriage Return"),assert.sameValue(cs.raw[0],`\\
\\
\\
`,"Line Feed and Carriage Return")}`\
\
\
`,assert.sameValue(calls,1),calls=0,function(cs){calls++,assert.sameValue(cs[0],"","Line Separator"),assert.sameValue(cs.raw[0],"\\\u2028","Line Separator")}`\ `,assert.sameValue(calls,1),calls=0,function(cs){calls++,assert.sameValue(cs[0],"","Paragraph Separater"),assert.sameValue(cs.raw[0],"\\\u2029","Paragraph Separator")}`\ `,assert.sameValue(calls,1);



test262/test/language/expressions/template-literal/middle-list-many-expr-abrupt.js


assert.throws(Test262Error,function(){`${0}${1}${function(){throw new Test262Error}()}`});


assert.throws(Test262Error,function(){`${function(){throw new Test262Error}()}`});



test262/test/language/expressions/template-literal/tv-template-character.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[0],"a","`a` character TV"),assert.sameValue(s.raw[0],"a","`a` character TRV")})`a`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[0],"$","`$` character TV"),assert.sameValue(s.raw[0],"$","`$` character TRV")})`$`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[0],"a","`a` character TV"),assert.sameValue(s.raw[0],"a","`a` character TRV")}`a`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[0],"$","`$` character TV"),assert.sameValue(s.raw[0],"$","`$` character TRV")}`$`,assert.sameValue(calls,1);



test262/test/language/module-code/top-level-await/syntax/try-await-expr-obj-literal.js


try{await{function(){}}}catch(e){await{function(){}}}try{await{function(){}}}finally{await{function(){}}}try{await{function(){}}}catch(e){await{function(){}}}finally{await{function(){}}}


try{await{function(){}}}catch{await{function(){}}}try{await{function(){}}}finally{await{function(){}}}try{await{function(){}}}catch{await{function(){}}}finally{await{function(){}}}



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-func-expression.js


export var name1=await function(){};export var{x=await function(){}}={};


export var name1=await function(){},{x=await function(){}}={};



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-literal-number.js


if(await 1){}


await 1;



test262/test/language/expressions/template-literal/tv-template-tail.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[1],"","Template value (empty)"),assert.sameValue(s.raw[1],"","Template raw value (empty)")})`${1}`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[1],"foo","Template value (with content)"),assert.sameValue(s.raw[1],"foo","Template raw value (with content)")})`${1}foo`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[1],"","Template value (empty)"),assert.sameValue(s.raw[1],"","Template raw value (empty)")}`${1}`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[1],"foo","Template value (with content)"),assert.sameValue(s.raw[1],"foo","Template raw value (with content)")}`${1}foo`,assert.sameValue(calls,1);



test262/test/language/expressions/template-literal/middle-list-one-expr-abrupt.js


assert.throws(Test262Error,function(){`${0}${function(){throw new Test262Error}()}`});


assert.throws(Test262Error,function(){`${function(){throw new Test262Error}()}`});



test262/test/built-ins/Temporal/Duration/prototype/with/infinity-throws-rangeerror.js


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.with({[field]:Infinity}))});let calls=0;const obj={valueOf(){return calls++,Infinity}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.with({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});


const fields=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321);fields.forEach(field=>{assert.throws(RangeError,()=>instance.with({[field]:1/0}))});let calls=0;const obj={valueOf(){return calls++,1/0}};fields.forEach(field=>{calls=0,assert.throws(RangeError,()=>instance.with({[field]:obj})),assert.sameValue(calls,1,"it fails after fetching the primitive value")});



test262/test/language/expressions/template-literal/tv-no-substitution.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[0],"","Template value (empty)"),assert.sameValue(s.raw[0],"","Template raw value (empty)")})``;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[0],"foo","Template value (with content)"),assert.sameValue(s.raw[0],"foo","Template raw value (with content)")})`foo`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[0],"","Template value (empty)"),assert.sameValue(s.raw[0],"","Template raw value (empty)")}``,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[0],"foo","Template value (with content)"),assert.sameValue(s.raw[0],"foo","Template raw value (with content)")}`foo`,assert.sameValue(calls,1);



test262/test/language/expressions/template-literal/tv-utf16-escape-sequence.js


var calls;calls=0;(function(s){calls++,assert.sameValue(s[0],"b","u Hex4Digits template value"),assert.sameValue(s.raw[0],"\\u0062","u Hex4Digits template raw value")})`\u0062`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[0],"b","u{ HexDigits } template value"),assert.sameValue(s.raw[0],"\\u{62}","u{ Hex4Digits } template raw value")})`\u{62}`;assert.sameValue(calls,1);calls=0;(function(s){calls++,assert.sameValue(s[0],"b","u{ HexDigits } template value (with leading zeros)"),assert.sameValue(s.raw[0],"\\u{000062}","u{ HexDigits } template raw value (with leading zeros)")})`\u{000062}`;assert.sameValue(calls,1);


var calls;calls=0,function(s){calls++,assert.sameValue(s[0],"b","u Hex4Digits template value"),assert.sameValue(s.raw[0],"\\u0062","u Hex4Digits template raw value")}`\u0062`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[0],"b","u{ HexDigits } template value"),assert.sameValue(s.raw[0],"\\u{62}","u{ Hex4Digits } template raw value")}`\u{62}`,assert.sameValue(calls,1),calls=0,function(s){calls++,assert.sameValue(s[0],"b","u{ HexDigits } template value (with leading zeros)"),assert.sameValue(s.raw[0],"\\u{000062}","u{ HexDigits } template raw value (with leading zeros)")}`\u{000062}`,assert.sameValue(calls,1);



test262/test/language/eval-code/direct/parse-failure-4.js


try{throw eval("break;"),new Test262Error("#1.1: break must throw SyntaxError. Actual: "+eval("break;"))}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: break must throw SyntaxError. Actual: "+e)}try{for(var i=0;i<=1;i++)for(var j=0;j<=1;j++)eval("break;");throw new Test262Error("#2.1: break must throw SyntaxError. Actual: "+eval("break;"))}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#2.2: break must throw SyntaxError. Actual: "+e)}


try{throw eval("break;"),new Test262Error("#1.1: break must throw SyntaxError. Actual: "+eval("break;"))}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: break must throw SyntaxError. Actual: "+e)}try{for(var i=0;i<=1;i++)for(var j=0;j<=1;j++)eval("break;");throw new Test262Error("#2.1: break must throw SyntaxError. Actual: "+eval("break;"))}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#2.2: break must throw SyntaxError. Actual: "+e)}



test262/test/language/expressions/assignment/member-expr-ident-name-else-escaped.js


var obj={};obj.else=42;assert.sameValue(obj["else"],42,"property exists");


var obj={};obj.else=42,assert.sameValue(obj.else,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-if-escaped.js


var obj={};obj.if=42;assert.sameValue(obj["if"],42,"property exists");


var obj={};obj.if=42,assert.sameValue(obj.if,42,"property exists");



test262/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/is-infinity-throws-rangeerror.js


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(RangeError,function(){new TA(Infinity)})});


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(RangeError,function(){new TA(1/0)})});



test262/test/language/statements/for-of/string-astral-truncated.js


var string="a\\ud801b\\ud801",first="a",second="\\ud801",third="b",fourth="\\ud801",iterationCount=0;for(var value of string)assert.sameValue(value,first),first=second,second=third,third=fourth,fourth=null,iterationCount+=1;assert.sameValue(iterationCount,4);


var string="a\uD801b\uD801",first="a",second="\uD801",third="b",fourth="\uD801",iterationCount=0;for(var value of string)assert.sameValue(value,first),first=second,second=third,third=fourth,fourth=null,iterationCount+=1;assert.sameValue(iterationCount,4);



test262/test/language/expressions/assignment/member-expr-ident-name-do-escaped.js


var obj={};obj.do=42;assert.sameValue(obj["do"],42,"property exists");


var obj={};obj.do=42,assert.sameValue(obj.do,42,"property exists");



test262/test/built-ins/Object/S15.2.1.1_A2_T4.js


var obj={flag:!0};assert.sameValue(typeof obj,"object",'The value of `typeof(obj)` is expected to be "object"');var n_obj=Object(obj);assert.sameValue(n_obj,obj,"The value of n_obj is expected to equal the value of obj");assert(!!n_obj["flag"],'The value of !!n_obj["flag"] is expected to be true');


var obj={flag:!0};assert.sameValue(typeof obj,"object",'The value of `typeof(obj)` is expected to be "object"');var n_obj=Object(obj);assert.sameValue(n_obj,obj,"The value of n_obj is expected to equal the value of obj"),assert(!!n_obj.flag,'The value of !!n_obj["flag"] is expected to be true');



test262/test/language/expressions/assignment/member-expr-ident-name-export-escaped.js


var obj={};obj.export=42;assert.sameValue(obj["export"],42,"property exists");


var obj={};obj.export=42,assert.sameValue(obj.export,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-private-escaped.js


var obj={};obj.private=42;assert.sameValue(obj["private"],42,"property exists");


var obj={};obj.private=42,assert.sameValue(obj.private,42,"property exists");



test262/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/undefined-newtarget-throws.js


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){TA(0)}),assert.throws(TypeError,function(){TA(Infinity)})});


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){TA(0)}),assert.throws(TypeError,function(){TA(1/0)})});



test262/test/language/expressions/assignment/member-expr-ident-name-with-escaped.js


var obj={};obj.with=42;assert.sameValue(obj["with"],42,"property exists");


var obj={};obj.with=42,assert.sameValue(obj.with,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-var-escaped.js


var obj={};obj.var=42;assert.sameValue(obj["var"],42,"property exists");


var obj={};obj.var=42,assert.sameValue(obj.var,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-static-escaped.js


var obj={};obj.static=42;assert.sameValue(obj["static"],42,"property exists");


var obj={};obj.static=42,assert.sameValue(obj.static,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-in-escaped.js


var obj={};obj.in=42;assert.sameValue(obj["in"],42,"property exists");


var obj={};obj.in=42,assert.sameValue(obj.in,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-try-escaped.js


var obj={};obj.try=42;assert.sameValue(obj["try"],42,"property exists");


var obj={};obj.try=42,assert.sameValue(obj.try,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-default.js


var obj={};obj.default=42;assert.sameValue(obj["default"],42,"property exists");


var obj={};obj.default=42,assert.sameValue(obj.default,42,"property exists");



test262/test/built-ins/Object/groupBy/evenOdd.js


const array=[1,2,3],obj=Object.groupBy(array,function(i){return i%2===0?"even":"odd"});assert.compareArray(Object.keys(obj),["odd","even"]);assert.compareArray(obj["even"],[2]);assert.compareArray(obj["odd"],[1,3]);


const array=[1,2,3],obj=Object.groupBy(array,function(i){return i%2===0?"even":"odd"});assert.compareArray(Object.keys(obj),["odd","even"]),assert.compareArray(obj.even,[2]),assert.compareArray(obj.odd,[1,3]);



test262/test/language/expressions/assignment/S11.13.1_A4_T2.js


try{throw x=x,new Test262Error("#1.1: x = x throw ReferenceError. Actual: "+(x=x))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x = x throw ReferenceError. Actual: "+e)}


try{throw x=x,new Test262Error("#1.1: x = x throw ReferenceError. Actual: "+(x=x))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x = x throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Object/groupBy/groupLength.js


const arr=["hello","test","world"],obj=Object.groupBy(arr,function(i){return i.length});assert.compareArray(Object.keys(obj),["4","5"]);assert.compareArray(obj["5"],["hello","world"]);assert.compareArray(obj["4"],["test"]);


const arr=["hello","test","world"],obj=Object.groupBy(arr,function(i){return i.length});assert.compareArray(Object.keys(obj),["4","5"]),assert.compareArray(obj[5],["hello","world"]),assert.compareArray(obj[4],["test"]);



test262/test/built-ins/Array/prototype/splice/length-exceeding-integer-limit-shrink-array.js


var arrayLike={"9007199254740986":"9007199254740986","9007199254740987":"9007199254740987","9007199254740988":"9007199254740988","9007199254740990":"9007199254740990","9007199254740991":"9007199254740991",length:9007199254740994},result=Array.prototype.splice.call(arrayLike,9007199254740987,1);assert.compareArray(result,["9007199254740987"],'The value of result is expected to be ["9007199254740987"]');assert.sameValue(arrayLike.length,9007199254740990,"The value of arrayLike.length is expected to be 2 ** 53 - 2");assert.sameValue(arrayLike["9007199254740986"],"9007199254740986",'The value of arrayLike["9007199254740986"] is expected to be "9007199254740986"');assert.sameValue(arrayLike["9007199254740987"],"9007199254740988",'The value of arrayLike["9007199254740987"] is expected to be "9007199254740988"');assert.sameValue("9007199254740988"in arrayLike,!1,'The result of evaluating ("9007199254740988" in arrayLike) is expected to be false');assert.sameValue(arrayLike["9007199254740989"],"9007199254740990",'The value of arrayLike["9007199254740989"] is expected to be "9007199254740990"');assert.sameValue("9007199254740990"in arrayLike,!1,'The result of evaluating ("9007199254740990" in arrayLike) is expected to be false');assert.sameValue(arrayLike["9007199254740991"],"9007199254740991",'The value of arrayLike["9007199254740991"] is expected to be "9007199254740991"');


var arrayLike={"9007199254740986":"9007199254740986","9007199254740987":"9007199254740987","9007199254740988":"9007199254740988","9007199254740990":"9007199254740990","9007199254740991":"9007199254740991",length:9007199254740994},result=Array.prototype.splice.call(arrayLike,9007199254740987,1);assert.compareArray(result,["9007199254740987"],'The value of result is expected to be ["9007199254740987"]'),assert.sameValue(arrayLike.length,2**53-2,"The value of arrayLike.length is expected to be 2 ** 53 - 2"),assert.sameValue(arrayLike["9007199254740986"],"9007199254740986",'The value of arrayLike["9007199254740986"] is expected to be "9007199254740986"'),assert.sameValue(arrayLike["9007199254740987"],"9007199254740988",'The value of arrayLike["9007199254740987"] is expected to be "9007199254740988"'),assert.sameValue("9007199254740988"in arrayLike,!1,'The result of evaluating ("9007199254740988" in arrayLike) is expected to be false'),assert.sameValue(arrayLike["9007199254740989"],"9007199254740990",'The value of arrayLike["9007199254740989"] is expected to be "9007199254740990"'),assert.sameValue("9007199254740990"in arrayLike,!1,'The result of evaluating ("9007199254740990" in arrayLike) is expected to be false'),assert.sameValue(arrayLike["9007199254740991"],"9007199254740991",'The value of arrayLike["9007199254740991"] is expected to be "9007199254740991"');



test262/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/number-tobigint.js


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){new TA([1])},"abrupt completion from Number: 1"),assert.throws(TypeError,function(){new TA([Math.pow(2,63)])},"abrupt completion from Number: 2**63"),assert.throws(TypeError,function(){new TA([0])},"abrupt completion from Number: +0"),assert.throws(TypeError,function(){new TA([-0])},"abrupt completion from Number: -0"),assert.throws(TypeError,function(){new TA([Infinity])},"abrupt completion from Number: Infinity"),assert.throws(TypeError,function(){new TA([-1/0])},"abrupt completion from Number: -Infinity"),assert.throws(TypeError,function(){new TA([NaN])},"abrupt completion from Number: NaN")});


testWithBigIntTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){new TA([1])},"abrupt completion from Number: 1"),assert.throws(TypeError,function(){new TA([Math.pow(2,63)])},"abrupt completion from Number: 2**63"),assert.throws(TypeError,function(){new TA([0])},"abrupt completion from Number: +0"),assert.throws(TypeError,function(){new TA([-0])},"abrupt completion from Number: -0"),assert.throws(TypeError,function(){new TA([1/0])},"abrupt completion from Number: Infinity"),assert.throws(TypeError,function(){new TA([-1/0])},"abrupt completion from Number: -Infinity"),assert.throws(TypeError,function(){new TA([NaN])},"abrupt completion from Number: NaN")});



test262/test/language/expressions/assignment/member-expr-ident-name-for-escaped.js


var obj={};obj.for=42;assert.sameValue(obj["for"],42,"property exists");


var obj={};obj.for=42,assert.sameValue(obj.for,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-interface-escaped.js


var obj={};obj.interface=42;assert.sameValue(obj["interface"],42,"property exists");


var obj={};obj.interface=42,assert.sameValue(obj.interface,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-const-escaped.js


var obj={};obj.const=42;assert.sameValue(obj["const"],42,"property exists");


var obj={};obj.const=42,assert.sameValue(obj.const,42,"property exists");



test262/test/language/expressions/assignment/S11.13.1_A3.2.js


var x=0;if((x=1)!==1)throw new Test262Error("#1: var x = 0; (x = 1) === 1. Actual: "+(x=1));x=0;if((x=1)!==1)throw new Test262Error("#2: x = 0; (x = 1) === 1. Actual: "+(x=1));


var x=0;if((x=1)!=1)throw new Test262Error("#1: var x = 0; (x = 1) === 1. Actual: "+(x=1));if(x=0,(x=1)!=1)throw new Test262Error("#2: x = 0; (x = 1) === 1. Actual: "+(x=1));



test262/test/language/expressions/assignment/member-expr-ident-name-extends-escaped.js


var obj={};obj.extends=42;assert.sameValue(obj["extends"],42,"property exists");


var obj={};obj.extends=42,assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-continue-escaped.js


var obj={};obj.continue=42;assert.sameValue(obj["continue"],42,"property exists");


var obj={};obj.continue=42,assert.sameValue(obj.continue,42,"property exists");



test262/test/language/module-code/instn-named-bndng-dflt-star.js


assert.throws(ReferenceError,function(){typeof x});assert("attr"in ns);export default 3;export var attr;import x,*as ns from"./instn-named-bndng-dflt-star.js";


assert.throws(ReferenceError,function(){x}),assert("attr"in ns);export default 3;export var attr;import x,*as ns from"./instn-named-bndng-dflt-star.js";



test262/test/language/module-code/import-attributes/import-attribute-trlng-comma.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262:""};import"./import-attribute-2_FIXTURE.js"with{test262:""};export*from"./import-attribute-3_FIXTURE.js" with{test262:""};


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import"./import-attribute-1_FIXTURE.js"with{test262:""};import"./import-attribute-2_FIXTURE.js"with{test262:""};export*from"./import-attribute-3_FIXTURE.js"with{test262:""};



test262/test/language/expressions/assignment/member-expr-ident-name-protected-escaped.js


var obj={};obj.protected=42;assert.sameValue(obj["protected"],42,"property exists");


var obj={};obj.protected=42,assert.sameValue(obj.protected,42,"property exists");



test262/test/language/module-code/import-attributes/import-attribute-value-string-double.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262:"x"};import"./import-attribute-2_FIXTURE.js"with{test262:"x"};export*from"./import-attribute-3_FIXTURE.js" with{test262:"x"};


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import"./import-attribute-1_FIXTURE.js"with{test262:"x"};import"./import-attribute-2_FIXTURE.js"with{test262:"x"};export*from"./import-attribute-3_FIXTURE.js"with{test262:"x"};



test262/test/language/module-code/import-attributes/import-attribute-key-string-single.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{"test262x":""};import"./import-attribute-2_FIXTURE.js"with{"test262x":""};export*from"./import-attribute-3_FIXTURE.js" with{"test262x":""};assert.sameValue(x,262.1);


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262x:""};import"./import-attribute-2_FIXTURE.js"with{test262x:""};export*from"./import-attribute-3_FIXTURE.js"with{test262x:""};assert.sameValue(x,262.1);



test262/test/language/expressions/assignment/member-expr-ident-name-switch-escaped.js


var obj={};obj.switch=42;assert.sameValue(obj["switch"],42,"property exists");


var obj={};obj.switch=42,assert.sameValue(obj.switch,42,"property exists");



test262/test/language/module-code/import-attributes/import-attribute-value-string-single.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262:"x"};import"./import-attribute-2_FIXTURE.js"with{test262:"x"};export*from"./import-attribute-3_FIXTURE.js" with{test262:"x"};


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import"./import-attribute-1_FIXTURE.js"with{test262:"x"};import"./import-attribute-2_FIXTURE.js"with{test262:"x"};export*from"./import-attribute-3_FIXTURE.js"with{test262:"x"};



test262/test/language/expressions/assignment/member-expr-ident-name-import-escaped.js


var obj={};obj.import=42;assert.sameValue(obj["import"],42,"property exists");


var obj={};obj.import=42,assert.sameValue(obj.import,42,"property exists");



test262/test/language/module-code/import-attributes/import-attribute-many.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};import"./import-attribute-2_FIXTURE.js"with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};export*from"./import-attribute-3_FIXTURE.js" with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import"./import-attribute-1_FIXTURE.js"with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};import"./import-attribute-2_FIXTURE.js"with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};export*from"./import-attribute-3_FIXTURE.js"with{test262_1:"",test262_2:"",test262_3:"",test262_4:""};



test262/test/language/module-code/import-attributes/import-attribute-key-string-double.js


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{"test262x":""};import"./import-attribute-2_FIXTURE.js"with{"test262x":""};export*from"./import-attribute-3_FIXTURE.js" with{"test262x":""};assert.sameValue(x,262.1);


$DONOTEVALUATE();import"../resources/ensure-linking-error_FIXTURE.js";import x from"./import-attribute-1_FIXTURE.js"with{test262x:""};import"./import-attribute-2_FIXTURE.js"with{test262x:""};export*from"./import-attribute-3_FIXTURE.js"with{test262x:""};assert.sameValue(x,262.1);



test262/test/built-ins/Math/log1p/specific-results.js


assert.sameValue(Math.log1p(NaN),NaN,"NaN"),assert.sameValue(Math.log1p(-1.000001),NaN,"-1.000001"),assert.sameValue(Math.log1p(-2),NaN,"-2"),assert.sameValue(Math.log1p(-1/0),NaN,"-Infinity"),assert.sameValue(Math.log1p(-1),-1/0,"-1"),assert.sameValue(Math.log1p(0),0,"0"),assert.sameValue(Math.log1p(-0),-0,"-0"),assert.sameValue(Math.log1p(Infinity),Infinity,"Infinity");


assert.sameValue(Math.log1p(NaN),NaN,"NaN"),assert.sameValue(Math.log1p(-1.000001),NaN,"-1.000001"),assert.sameValue(Math.log1p(-2),NaN,"-2"),assert.sameValue(Math.log1p(-1/0),NaN,"-Infinity"),assert.sameValue(Math.log1p(-1),-1/0,"-1"),assert.sameValue(Math.log1p(0),0,"0"),assert.sameValue(Math.log1p(-0),-0,"-0"),assert.sameValue(Math.log1p(1/0),1/0,"Infinity");



test262/test/language/expressions/assignment/member-expr-ident-name-implements-escaped.js


var obj={};obj.implements=42;assert.sameValue(obj["implements"],42,"property exists");


var obj={};obj.implements=42,assert.sameValue(obj.implements,42,"property exists");



test262/test/language/module-code/instn-iee-bndng-const.js


assert.throws(ReferenceError,function(){typeof B},"binding is created but not initialized");import{B,results}from"./instn-iee-bndng-const_FIXTURE.js";export const A=null;assert.sameValue(results.length,4);assert.sameValue(results[0],"ReferenceError");assert.sameValue(results[1],"undefined");assert.sameValue(results[2],"ReferenceError");assert.sameValue(results[3],"undefined");


assert.throws(ReferenceError,function(){B},"binding is created but not initialized");import{B,results}from"./instn-iee-bndng-const_FIXTURE.js";export const A=null;assert.sameValue(results.length,4),assert.sameValue(results[0],"ReferenceError"),assert.sameValue(results[1],"undefined"),assert.sameValue(results[2],"ReferenceError"),assert.sameValue(results[3],"undefined");



test262/test/built-ins/Array/prototype/splice/length-near-integer-limit-grow-array.js


var arrayLike={"9007199254740985":"9007199254740985","9007199254740986":"9007199254740986","9007199254740987":"9007199254740987","9007199254740989":"9007199254740989","9007199254740991":"9007199254740991",length:9007199254740990},result=Array.prototype.splice.call(arrayLike,9007199254740986,0,"new-value");assert.compareArray(result,[],"The value of result is expected to be []");assert.sameValue(arrayLike.length,9007199254740991,"The value of arrayLike.length is expected to be 2 ** 53 - 1");assert.sameValue(arrayLike["9007199254740985"],"9007199254740985",'The value of arrayLike["9007199254740985"] is expected to be "9007199254740985"');assert.sameValue(arrayLike["9007199254740986"],"new-value",'The value of arrayLike["9007199254740986"] is expected to be "new-value"');assert.sameValue(arrayLike["9007199254740987"],"9007199254740986",'The value of arrayLike["9007199254740987"] is expected to be "9007199254740986"');assert.sameValue(arrayLike["9007199254740988"],"9007199254740987",'The value of arrayLike["9007199254740988"] is expected to be "9007199254740987"');assert.sameValue("9007199254740989"in arrayLike,!1,'The result of evaluating ("9007199254740989" in arrayLike) is expected to be false');assert.sameValue(arrayLike["9007199254740990"],"9007199254740989",'The value of arrayLike["9007199254740990"] is expected to be "9007199254740989"');assert.sameValue(arrayLike["9007199254740991"],"9007199254740991",'The value of arrayLike["9007199254740991"] is expected to be "9007199254740991"');


var arrayLike={"9007199254740985":"9007199254740985","9007199254740986":"9007199254740986","9007199254740987":"9007199254740987","9007199254740989":"9007199254740989","9007199254740991":"9007199254740991",length:9007199254740990},result=Array.prototype.splice.call(arrayLike,9007199254740986,0,"new-value");assert.compareArray(result,[],"The value of result is expected to be []"),assert.sameValue(arrayLike.length,2**53-1,"The value of arrayLike.length is expected to be 2 ** 53 - 1"),assert.sameValue(arrayLike["9007199254740985"],"9007199254740985",'The value of arrayLike["9007199254740985"] is expected to be "9007199254740985"'),assert.sameValue(arrayLike["9007199254740986"],"new-value",'The value of arrayLike["9007199254740986"] is expected to be "new-value"'),assert.sameValue(arrayLike["9007199254740987"],"9007199254740986",'The value of arrayLike["9007199254740987"] is expected to be "9007199254740986"'),assert.sameValue(arrayLike["9007199254740988"],"9007199254740987",'The value of arrayLike["9007199254740988"] is expected to be "9007199254740987"'),assert.sameValue("9007199254740989"in arrayLike,!1,'The result of evaluating ("9007199254740989" in arrayLike) is expected to be false'),assert.sameValue(arrayLike["9007199254740990"],"9007199254740989",'The value of arrayLike["9007199254740990"] is expected to be "9007199254740989"'),assert.sameValue(arrayLike["9007199254740991"],"9007199254740991",'The value of arrayLike["9007199254740991"] is expected to be "9007199254740991"');



test262/test/language/expressions/assignment/member-expr-ident-name-return-escaped.js


var obj={};obj.return=42;assert.sameValue(obj["return"],42,"property exists");


var obj={};obj.return=42,assert.sameValue(obj.return,42,"property exists");



test262/test/language/expressions/assignment/S11.13.1_A2.1_T2.js


try{throw x=y,new Test262Error("#1.1: x = y throw ReferenceError. Actual: "+(x=y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x = y throw ReferenceError. Actual: "+e)}


try{throw x=y,new Test262Error("#1.1: x = y throw ReferenceError. Actual: "+(x=y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x = y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/member-expr-ident-name-throw-escaped.js


var obj={};obj.throw=42;assert.sameValue(obj["throw"],42,"property exists");


var obj={};obj.throw=42,assert.sameValue(obj.throw,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-new-escaped.js


var obj={};obj.new=42;assert.sameValue(obj["new"],42,"property exists");


var obj={};obj.new=42,assert.sameValue(obj.new,42,"property exists");



test262/test/language/module-code/instn-named-err-dflt-thru-star-dflt.js


$DONOTEVALUATE();import x from"./instn-named-err-dflt-thru-star-int_FIXTURE.js";


$DONOTEVALUATE();import"./instn-named-err-dflt-thru-star-int_FIXTURE.js";



test262/test/built-ins/Math/sin/S15.8.2.16_A4.js


assert.sameValue(Math.sin(Infinity),NaN);


assert.sameValue(Math.sin(1/0),NaN);



test262/test/language/expressions/assignment/member-expr-ident-name-enum-escaped.js


var obj={};obj.enum=42;assert.sameValue(obj["enum"],42,"property exists");


var obj={};obj.enum=42,assert.sameValue(obj.enum,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-delete-escaped.js


var obj={};obj.delete=42;assert.sameValue(obj["delete"],42,"property exists");


var obj={};obj.delete=42,assert.sameValue(obj.delete,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-let-escaped.js


var obj={};obj.let=42;assert.sameValue(obj["let"],42,"property exists");


var obj={};obj.let=42,assert.sameValue(obj.let,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-class-escaped.js


var obj={};obj.class=42;assert.sameValue(obj["class"],42,"property exists");


var obj={};obj.class=42,assert.sameValue(obj.class,42,"property exists");



test262/test/language/module-code/instn-named-err-not-found.js


$DONOTEVALUATE();import{x}from"./instn-named-err-not-found-empty_FIXTURE.js";


$DONOTEVALUATE();import"./instn-named-err-not-found-empty_FIXTURE.js";



test262/test/language/module-code/instn-named-bndng-const.js


assert.throws(ReferenceError,function(){typeof y},"binding is created but not initialized");import{x as y}from"./instn-named-bndng-const.js";export const x=23;


assert.throws(ReferenceError,function(){y},"binding is created but not initialized");import{x as y}from"./instn-named-bndng-const.js";export const x=23;



test262/test/language/expressions/assignment/member-expr-ident-name-extends.js


var obj={};obj.extends=42;assert.sameValue(obj["extends"],42,"property exists");


var obj={};obj.extends=42,assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-super-escaped.js


var obj={};obj.super=42;assert.sameValue(obj["super"],42,"property exists");


var obj={};obj.super=42,assert.sameValue(obj.super,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-void-escaped.js


var obj={};obj.void=42;assert.sameValue(obj["void"],42,"property exists");


var obj={};obj.void=42,assert.sameValue(obj.void,42,"property exists");



test262/test/built-ins/Math/acos/S15.8.2.2_A2.js


assert.sameValue(Math.acos(1.000000000000001),NaN,"1.000000000000001"),assert.sameValue(Math.acos(2),NaN,"2"),assert.sameValue(Math.acos(Infinity),NaN,"Infinity");


assert.sameValue(Math.acos(1.000000000000001),NaN,"1.000000000000001"),assert.sameValue(Math.acos(2),NaN,"2"),assert.sameValue(Math.acos(1/0),NaN,"Infinity");



test262/test/language/expressions/assignment/member-expr-ident-name-public-escaped.js


var obj={};obj.public=42;assert.sameValue(obj["public"],42,"property exists");


var obj={};obj.public=42,assert.sameValue(obj.public,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-package-escaped.js


var obj={};obj.package=42;assert.sameValue(obj["package"],42,"property exists");


var obj={};obj.package=42,assert.sameValue(obj.package,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-case-escaped.js


var obj={};obj.case=42;assert.sameValue(obj["case"],42,"property exists");


var obj={};obj.case=42,assert.sameValue(obj.case,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-default-escaped-ext.js


var obj={};obj.default=42;assert.sameValue(obj["default"],42,"property exists");


var obj={};obj.default=42,assert.sameValue(obj.default,42,"property exists");



test262/test/built-ins/Math/clz32/infinity.js


assert.sameValue(Math.clz32(Infinity),32,"Infinity"),assert.sameValue(Math.clz32(-1/0),32,"-Infinity");


assert.sameValue(Math.clz32(1/0),32,"Infinity"),assert.sameValue(Math.clz32(-1/0),32,"-Infinity");



test262/test/language/expressions/assignment/member-expr-ident-name-break-escaped.js


var obj={};obj.break=42;assert.sameValue(obj["break"],42,"property exists");


var obj={};obj.break=42,assert.sameValue(obj.break,42,"property exists");



test262/test/language/expressions/assignment/assignment-operator-calls-putvalue-lref--rval--1.js


var count=0,global=this;Object.defineProperty(this,"x",{configurable:!0,value:1});(function(){"use strict";assert.throws(ReferenceError,()=>{count++,x=(delete global.x,2),count++}),count++})();assert.sameValue(count,2);assert(!("x"in this));assert(!("x"in global));


var count=0,global=this;Object.defineProperty(this,"x",{configurable:!0,value:1}),function(){"use strict";assert.throws(ReferenceError,()=>{count++,x=(delete global.x,2),count++}),count++}(),assert.sameValue(count,2),assert(!("x"in this)),assert(!("x"in global));



test262/test/language/expressions/assignment/member-expr-ident-name-typeof-escaped.js


var obj={};obj.typeof=42;assert.sameValue(obj["typeof"],42,"property exists");


var obj={};obj.typeof=42,assert.sameValue(obj.typeof,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-debugger-escaped.js


var obj={};obj.debugger=42;assert.sameValue(obj["debugger"],42,"property exists");


var obj={};obj.debugger=42,assert.sameValue(obj.debugger,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-this-escaped.js


var obj={};obj.this=42;assert.sameValue(obj["this"],42,"property exists");


var obj={};obj.this=42,assert.sameValue(obj.this,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-instanceof-escaped.js


var obj={};obj.instanceof=42;assert.sameValue(obj["instanceof"],42,"property exists");


var obj={};obj.instanceof=42,assert.sameValue(obj.instanceof,42,"property exists");



test262/test/built-ins/Math/asin/S15.8.2.3_A2.js


assert.sameValue(Math.asin(1.000000000000001),NaN,"1.000000000000001"),assert.sameValue(Math.asin(2),NaN,"2"),assert.sameValue(Math.asin(Infinity),NaN,"Infinity");


assert.sameValue(Math.asin(1.000000000000001),NaN,"1.000000000000001"),assert.sameValue(Math.asin(2),NaN,"2"),assert.sameValue(Math.asin(1/0),NaN,"Infinity");



test262/test/language/expressions/assignment/member-expr-ident-name-while-escaped.js


var obj={};obj.while=42;assert.sameValue(obj["while"],42,"property exists");


var obj={};obj.while=42,assert.sameValue(obj.while,42,"property exists");



test262/test/language/module-code/instn-named-bndng-dflt-named.js


assert.throws(ReferenceError,function(){typeof x});assert.sameValue(y,void 0);export default 3;export var attr;import x,{attr as y}from"./instn-named-bndng-dflt-named.js";


assert.throws(ReferenceError,function(){x}),assert.sameValue(y,void 0);export default 3;export var attr;import x,{attr as y}from"./instn-named-bndng-dflt-named.js";



test262/test/language/expressions/assignment/member-expr-ident-name-catch-escaped.js


var obj={};obj.catch=42;assert.sameValue(obj["catch"],42,"property exists");


var obj={};obj.catch=42,assert.sameValue(obj.catch,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-function-escaped.js


var obj={};obj.function=42;assert.sameValue(obj["function"],42,"property exists");


var obj={};obj.function=42,assert.sameValue(obj.function,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-extends-escaped-ext.js


var obj={};obj.extends=42;assert.sameValue(obj["extends"],42,"property exists");


var obj={};obj.extends=42,assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/assignment/member-expr-ident-name-finally-escaped.js


var obj={};obj.finally=42;assert.sameValue(obj["finally"],42,"property exists");


var obj={};obj.finally=42,assert.sameValue(obj.finally,42,"property exists");



test262/test/built-ins/Math/cos/S15.8.2.7_A4.js


assert.sameValue(Math.cos(Infinity),NaN);


assert.sameValue(Math.cos(1/0),NaN);



test262/test/language/expressions/assignment/member-expr-ident-name-default-escaped.js


var obj={};obj.default=42;assert.sameValue(obj["default"],42,"property exists");


var obj={};obj.default=42,assert.sameValue(obj.default,42,"property exists");



test262/test/built-ins/Array/prototype/find/return-undefined-if-predicate-returns-false-value.js


var arr=["Shoes","Car","Bike"],called=0,result=arr.find(function(val){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=arr.find(function(val){return""});assert.sameValue(result,void 0,"coerced string");result=arr.find(function(val){return});assert.sameValue(result,void 0,"coerced undefined");result=arr.find(function(val){return null});assert.sameValue(result,void 0,"coerced null");result=arr.find(function(val){return 0});assert.sameValue(result,void 0,"coerced 0");result=arr.find(function(val){return NaN});assert.sameValue(result,void 0,"coerced NaN");


var arr=["Shoes","Car","Bike"],called=0,result=arr.find(function(val){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=arr.find(function(val){return""}),assert.sameValue(result,void 0,"coerced string"),result=arr.find(function(val){}),assert.sameValue(result,void 0,"coerced undefined"),result=arr.find(function(val){return null}),assert.sameValue(result,void 0,"coerced null"),result=arr.find(function(val){return 0}),assert.sameValue(result,void 0,"coerced 0"),result=arr.find(function(val){return NaN}),assert.sameValue(result,void 0,"coerced NaN");



test262/test/language/module-code/instn-named-err-not-found-dflt.js


$DONOTEVALUATE();import x from"./instn-named-err-not-found-empty_FIXTURE.js";


$DONOTEVALUATE();import"./instn-named-err-not-found-empty_FIXTURE.js";



test262/test/built-ins/Array/prototype/find/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.find.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,0,finalElement],"elements (shrink)");assert.compareArray(indices,[0,1,2],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.find.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),finalElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.find.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),finalElement=void 0,expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{finalElement=0,expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,0,finalElement],"elements (shrink)"),assert.compareArray(indices,[0,1,2],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.find.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/built-ins/Math/fround/Math.fround_Infinity.js


assert.sameValue(Math.fround(Infinity),Infinity,"Math.fround(Infinity)");


assert.sameValue(Math.fround(1/0),1/0,"Math.fround(Infinity)");



test262/test/language/module-code/instn-named-bndng-let.js


assert.throws(ReferenceError,function(){typeof y},"binding is created but not initialized");import{x as y}from"./instn-named-bndng-let.js";export let x=23;


assert.throws(ReferenceError,function(){y},"binding is created but not initialized");import{x as y}from"./instn-named-bndng-let.js";export let x=23;



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-finally-escaped.js


var y={finally:x}={finally:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["finally"],42,"assignment successful");


var y={finally:x}={finally:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.finally,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-default.js


var y={default:x}={default:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["default"],42,"assignment successful");


var y={default:x}={default:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.default,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-do-escaped.js


var y={do:x}={do:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["do"],42,"assignment successful");


var y={do:x}={do:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.do,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-default-escaped.js


var y={default:x}={default:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["default"],42,"assignment successful");


var y={default:x}={default:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.default,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-extends-escaped-ext.js


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["extends"],42,"assignment successful");


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.extends,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-if-escaped.js


var y={if:x}={if:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["if"],42,"assignment successful");


var y={if:x}={if:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.if,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-with-escaped.js


var y={with:x}={with:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["with"],42,"assignment successful");


var y={with:x}={with:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.with,42,"assignment successful");



test262/test/language/statementList/block-expr-arrow-function-boolean-literal.js


()=>1,42;





test262/test/language/expressions/assignment/dstr/array-empty-iter-get-err.js


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};assert.throws(Test262Error,function(){0,[]=iterable});


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error},assert.throws(Test262Error,function(){[]=iterable});



test262/test/language/statementList/block-with-statment-regexp-literal.js


length:;





test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-var-escaped.js


var y={var:x}={var:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["var"],42,"assignment successful");


var y={var:x}={var:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.var,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-typeof-escaped.js


var y={typeof:x}={typeof:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["typeof"],42,"assignment successful");


var y={typeof:x}={typeof:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.typeof,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-elem-nested-obj-undefined-hole.js


var x;assert.throws(TypeError,function(){0,[{x}]=[,]});


var x;assert.throws(TypeError,function(){[{x}]=[,]});



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-try-escaped.js


var y={try:x}={try:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["try"],42,"assignment successful");


var y={try:x}={try:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.try,42,"assignment successful");



test262/test/built-ins/Array/prototype/reduceRight/callbackfn-resize-arraybuffer.js


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),expectedPrevsShrink,expectedNextsShrink,expectedIndicesShrink,expectedArraysShrink,expectedPrevsGrow,expectedNextsGrow,expectedIndicesGrow,expectedArraysGrow,prevs,nexts,indices,arrays,result;prevs=[];nexts=[];indices=[];arrays=[];result=Array.prototype.reduceRight.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(BPE),expectedPrevsShrink=[262,2],expectedNextsShrink=[0,0],expectedIndicesShrink=[2,0],expectedArraysShrink=[sample,sample],expectedPrevsGrow=[262],expectedNextsGrow=[0],expectedIndicesGrow=[0],expectedArraysGrow=[sample]}catch(_){expectedPrevsShrink=expectedPrevsGrow=[262,2,1],expectedNextsShrink=expectedNextsGrow=[0,0,0],expectedIndicesShrink=expectedIndicesGrow=[2,1,0],expectedArraysShrink=expectedArraysGrow=[sample,sample,sample]}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevsShrink,"prevs (shrink)");assert.compareArray(nexts,expectedNextsShrink,"nexts (shrink)");assert.compareArray(indices,expectedIndicesShrink,"indices (shrink)");assert.compareArray(arrays,expectedArraysShrink,"arrays (shrink)");assert.sameValue(result,0,"result (shrink)");prevs=[];nexts=[];indices=[];arrays=[];result=Array.prototype.reduceRight.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch(_){}prevs.push(prev);nexts.push(next);indices.push(index);arrays.push(array);return index},262);assert.compareArray(prevs,expectedPrevsGrow,"prevs (grow)");assert.compareArray(nexts,expectedNextsGrow,"nexts (grow)");assert.compareArray(indices,expectedIndicesGrow,"indices (grow)");assert.compareArray(arrays,expectedArraysGrow,"arrays (grow)");assert.sameValue(result,expectedIndicesGrow[expectedIndicesGrow.length-1],"result (grow)")});


testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*3}),sample=new TA(buffer),expectedPrevsShrink,expectedNextsShrink,expectedIndicesShrink,expectedArraysShrink,expectedPrevsGrow,expectedNextsGrow,expectedIndicesGrow,expectedArraysGrow,prevs,nexts,indices,arrays,result;prevs=[],nexts=[],indices=[],arrays=[],result=Array.prototype.reduceRight.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(BPE),expectedPrevsShrink=[262,2],expectedNextsShrink=[0,0],expectedIndicesShrink=[2,0],expectedArraysShrink=[sample,sample],expectedPrevsGrow=[262],expectedNextsGrow=[0],expectedIndicesGrow=[0],expectedArraysGrow=[sample]}catch{expectedPrevsShrink=expectedPrevsGrow=[262,2,1],expectedNextsShrink=expectedNextsGrow=[0,0,0],expectedIndicesShrink=expectedIndicesGrow=[2,1,0],expectedArraysShrink=expectedArraysGrow=[sample,sample,sample]}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevsShrink,"prevs (shrink)"),assert.compareArray(nexts,expectedNextsShrink,"nexts (shrink)"),assert.compareArray(indices,expectedIndicesShrink,"indices (shrink)"),assert.compareArray(arrays,expectedArraysShrink,"arrays (shrink)"),assert.sameValue(result,0,"result (shrink)"),prevs=[],nexts=[],indices=[],arrays=[],result=Array.prototype.reduceRight.call(sample,function(prev,next,index,array){if(prevs.length===0)try{buffer.resize(3*BPE)}catch{}return prevs.push(prev),nexts.push(next),indices.push(index),arrays.push(array),index},262),assert.compareArray(prevs,expectedPrevsGrow,"prevs (grow)"),assert.compareArray(nexts,expectedNextsGrow,"nexts (grow)"),assert.compareArray(indices,expectedIndicesGrow,"indices (grow)"),assert.compareArray(arrays,expectedArraysGrow,"arrays (grow)"),assert.sameValue(result,expectedIndicesGrow[expectedIndicesGrow.length-1],"result (grow)")});



test262/test/language/statementList/block-let-declaration.js


let a,b=42,c;b;


let a,b=42,c;



test262/test/language/statementList/block-arrow-function-functionbody.js


()=>42;





test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-delete-escaped.js


var y={delete:x}={delete:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["delete"],42,"assignment successful");


var y={delete:x}={delete:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.delete,42,"assignment successful");



test262/test/language/statementList/block-with-statment-array-literal.js


length:;





test262/test/language/statementList/block-with-statment-let-declaration.js


length:;let a,b=42,c;b;


let a,b=42,c;



test262/test/built-ins/TypedArrayConstructors/ctors/length-arg/is-infinity-throws-rangeerror.js


testWithTypedArrayConstructors(function(TA){assert.throws(RangeError,function(){new TA(Infinity)})});


testWithTypedArrayConstructors(function(TA){assert.throws(RangeError,function(){new TA(1/0)})});



test262/test/language/statementList/block-with-statment-array-literal-with-item.js


length:;





test262/test/language/statementList/block-with-statment-regexp-literal-flags.js


length:;





test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-catch-escaped.js


var y={catch:x}={catch:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["catch"],42,"assignment successful");


var y={catch:x}={catch:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.catch,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-while-escaped.js


var y={while:x}={while:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["while"],42,"assignment successful");


var y={while:x}={while:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.while,42,"assignment successful");



test262/test/built-ins/TypedArrayConstructors/ctors/length-arg/undefined-newtarget-throws.js


testWithTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){TA(0)}),assert.throws(TypeError,function(){TA(Infinity)})});


testWithTypedArrayConstructors(function(TA){assert.throws(TypeError,function(){TA(0)}),assert.throws(TypeError,function(){TA(1/0)})});



test262/test/language/statementList/block-arrow-function-assignment-expr.js


()=>42;





test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-else-escaped.js


var y={else:x}={else:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["else"],42,"assignment successful");


var y={else:x}={else:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.else,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-public-escaped.js


var y={public:x}={public:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["public"],42,"assignment successful");


var y={public:x}={public:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.public,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-in-escaped.js


var y={in:x}={in:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["in"],42,"assignment successful");


var y={in:x}={in:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.in,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-rest-put-prop-ref-user-err.js


var x={set y(val){throw new Test262Error}};assert.throws(Test262Error,function(){0,[...x.y]=[23]});


var x={set y(val){throw new Test262Error}};assert.throws(Test262Error,function(){[...x.y]=[23]});



test262/test/language/statementList/block-with-statment-block.js


length:;





test262/test/language/expressions/assignment/dstr/array-elem-nested-array-null.js


var _;assert.throws(TypeError,function(){0,[[_]]=[null]});


var _;assert.throws(TypeError,function(){[[_]]=[null]});



test262/test/language/expressions/assignment/dstr/array-elem-nested-array-undefined-own.js


var _;assert.throws(TypeError,function(){0,[[x]]=[void 0]});


var _;assert.throws(TypeError,function(){[[x]]=[void 0]});



test262/test/language/expressions/left-shift/S11.7.1_A3_T2.8.js


if(!0<<void 0!==1)throw new Test262Error("#1: true << undefined === 1. Actual: "+(!0<<void 0));if(void 0<<1!==0)throw new Test262Error("#2: undefined << true === 0. Actual: "+(void 0<<1));if(new Boolean(!0)<<void 0!==1)throw new Test262Error("#3: new Boolean(true) << undefined === 1. Actual: "+(new Boolean(!0)<<void 0));if(void 0<<new Boolean(!0)!==0)throw new Test262Error("#4: undefined << new Boolean(true) === 0. Actual: "+(void 0<<new Boolean(!0)));


if(!0<<void 0!==1)throw new Test262Error("#1: true << undefined === 1. Actual: "+(!0<<void 0));if(void 0<<!0)throw new Test262Error("#2: undefined << true === 0. Actual: "+(void 0<<!0));if(new Boolean(!0)<<void 0!==1)throw new Test262Error("#3: new Boolean(true) << undefined === 1. Actual: "+(new Boolean(!0)<<void 0));if(void 0<<new Boolean(!0))throw new Test262Error("#4: undefined << new Boolean(true) === 0. Actual: "+(void 0<<new Boolean(!0)));



test262/test/language/expressions/left-shift/S11.7.1_A2.1_T2.js


try{throw x<<1,new Test262Error("#1.1: x << 1 throw ReferenceError. Actual: "+(x<<1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x << 1 throw ReferenceError. Actual: "+e)}


try{throw x<<1,new Test262Error("#1.1: x << 1 throw ReferenceError. Actual: "+(x<<1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x << 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/dstr/array-elem-trlg-iter-get-err.js


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};var x;assert.throws(Test262Error,function(){0,[x,]=iterable});


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};var x;assert.throws(Test262Error,function(){[x]=iterable});



test262/test/language/expressions/assignment/dstr/obj-rest-str-val.js


var rest,result,vals="foo";result={...rest}=vals;assert.sameValue(rest["0"],"f");assert.sameValue(rest["1"],"o");assert.sameValue(rest["2"],"o");assert(rest instanceof Object);assert.sameValue(result,vals);


var rest,result,vals="foo";result={...rest}=vals,assert.sameValue(rest[0],"f"),assert.sameValue(rest[1],"o"),assert.sameValue(rest[2],"o"),assert(rest instanceof Object),assert.sameValue(result,vals);



test262/test/language/expressions/left-shift/S11.7.1_A2.1_T3.js


try{throw 1<<y,new Test262Error("#1.1: 1 << y throw ReferenceError. Actual: "+(1<<y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 << y throw ReferenceError. Actual: "+e)}


try{throw 1<<y,new Test262Error("#1.1: 1 << y throw ReferenceError. Actual: "+(1<<y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 << y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-package-escaped.js


var y={package:x}={package:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["package"],42,"assignment successful");


var y={package:x}={package:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.package,42,"assignment successful");



test262/test/language/expressions/left-shift/bigint-and-number.js


assert.throws(TypeError,function(){1n<<1},"1n << 1 throws TypeError"),assert.throws(TypeError,function(){1<<1n},"1 << 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)<<1},"Object(1n) << 1 throws TypeError"),assert.throws(TypeError,function(){1<<Object(1n)},"1 << Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n<<Object(1)},"1n << Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)<<1n},"Object(1) << 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)<<Object(1)},"Object(1n) << Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)<<Object(1n)},"Object(1) << Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n<<NaN},"1n << NaN throws TypeError"),assert.throws(TypeError,function(){NaN<<1n},"NaN << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<Infinity},"1n << Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity<<1n},"Infinity << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<1},"1n << true throws TypeError"),assert.throws(TypeError,function(){!0<<1n},"true << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<"1"},'1n << "1" throws TypeError'),assert.throws(TypeError,function(){"1"<<1n},'"1" << 1n throws TypeError'),assert.throws(TypeError,function(){1n<<null},"1n << null throws TypeError"),assert.throws(TypeError,function(){null<<1n},"null << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<void 0},"1n << undefined throws TypeError"),assert.throws(TypeError,function(){void 0<<1n},"undefined << 1n throws TypeError");


assert.throws(TypeError,function(){1n<<1},"1n << 1 throws TypeError"),assert.throws(TypeError,function(){1<<1n},"1 << 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)<<1},"Object(1n) << 1 throws TypeError"),assert.throws(TypeError,function(){1<<Object(1n)},"1 << Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n<<Object(1)},"1n << Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)<<1n},"Object(1) << 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)<<Object(1)},"Object(1n) << Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)<<Object(1n)},"Object(1) << Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n<<NaN},"1n << NaN throws TypeError"),assert.throws(TypeError,function(){NaN<<1n},"NaN << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<1/0},"1n << Infinity throws TypeError"),assert.throws(TypeError,function(){1/0<<1n},"Infinity << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<!0},"1n << true throws TypeError"),assert.throws(TypeError,function(){!0<<1n},"true << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<"1"},'1n << "1" throws TypeError'),assert.throws(TypeError,function(){"1"<<1n},'"1" << 1n throws TypeError'),assert.throws(TypeError,function(){1n<<null},"1n << null throws TypeError"),assert.throws(TypeError,function(){null<<1n},"null << 1n throws TypeError"),assert.throws(TypeError,function(){1n<<void 0},"1n << undefined throws TypeError"),assert.throws(TypeError,function(){void 0<<1n},"undefined << 1n throws TypeError");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-default-escaped-ext.js


var y={default:x}={default:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["default"],42,"assignment successful");


var y={default:x}={default:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.default,42,"assignment successful");



test262/test/language/expressions/left-shift/S11.7.1_A3_T2.6.js


if("1"<<void 0!==1)throw new Test262Error('#1: "1" << undefined === 1. Actual: '+("1"<<void 0));if(void 0<<"1"!==0)throw new Test262Error('#2: undefined << "1" === 0. Actual: '+(void 0<<"1"));if(new String("1")<<void 0!==1)throw new Test262Error('#3: new String("1") << undefined === 1. Actual: '+(new String("1")<<void 0));if(void 0<<new String("1")!==0)throw new Test262Error('#4: undefined << new String("1") === 0. Actual: '+(void 0<<new String("1")));


if("1"<<void 0!==1)throw new Test262Error('#1: "1" << undefined === 1. Actual: '+("1"<<void 0));if(void 0<<"1")throw new Test262Error('#2: undefined << "1" === 0. Actual: '+(void 0<<"1"));if(new String("1")<<void 0!==1)throw new Test262Error('#3: new String("1") << undefined === 1. Actual: '+(new String("1")<<void 0));if(void 0<<new String("1"))throw new Test262Error('#4: undefined << new String("1") === 0. Actual: '+(void 0<<new String("1")));



test262/test/language/expressions/left-shift/S11.7.1_A2.4_T3.js


try{throw x<<(x=1),new Test262Error("#1.1: x << (x = 1) throw ReferenceError. Actual: "+(x<<(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x << (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x<<(x=1),new Test262Error("#1.1: x << (x = 1) throw ReferenceError. Actual: "+(x<<(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x << (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/dstr/array-elision-val-symbol.js


var s=Symbol();assert.throws(TypeError,function(){0,[,]=s});


var s=Symbol();assert.throws(TypeError,function(){[,]=s});



test262/test/language/expressions/left-shift/S11.7.1_A1.js


if(eval("1	<<	1")!==2)throw new Test262Error("#1: 1\\u0009<<\\u00091 === 2");if(eval("1\v<<\v1")!==2)throw new Test262Error("#2: 1\\u000B<<\\u000B1 === 2");if(eval("1\f<<\f1")!==2)throw new Test262Error("#3: 1\\u000C<<\\u000C1 === 2");if(eval("1 << 1")!==2)throw new Test262Error("#4: 1\\u0020<<\\u00201 === 2");if(eval("1\xA0<<\xA01")!==2)throw new Test262Error("#5: 1\\u00A0<<\\u00A01 === 2");if(eval("1\n<<\n1")!==2)throw new Test262Error("#6: 1\\u000A<<\\u000A1 === 2");if(eval("1\r<<\r1")!==2)throw new Test262Error("#7: 1\\u000D<<\\u000D1 === 2");if(eval("1\u2028<<\u20281")!==2)throw new Test262Error("#8: 1\\u2028<<\\u20281 === 2");if(eval("1\u2029<<\u20291")!==2)throw new Test262Error("#9: 1\\u2029<<\\u20291 === 2");if(eval("1	\v\f \xA0\n\r\u2028\u2029<<	\v\f \xA0\n\r\u2028\u20291")!==2)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029<<\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2");


if(eval("1	<<	1")!==2)throw new Test262Error("#1: 1\\u0009<<\\u00091 === 2");if(eval("1\v<<\v1")!==2)throw new Test262Error("#2: 1\\u000B<<\\u000B1 === 2");if(eval("1\f<<\f1")!==2)throw new Test262Error("#3: 1\\u000C<<\\u000C1 === 2");if(eval("1 << 1")!==2)throw new Test262Error("#4: 1\\u0020<<\\u00201 === 2");if(eval("1\xA0<<\xA01")!==2)throw new Test262Error("#5: 1\\u00A0<<\\u00A01 === 2");if(eval(`1
<<
1`)!==2)throw new Test262Error("#6: 1\\u000A<<\\u000A1 === 2");if(eval("1\r<<\r1")!==2)throw new Test262Error("#7: 1\\u000D<<\\u000D1 === 2");if(eval("1\u2028<<\u20281")!==2)throw new Test262Error("#8: 1\\u2028<<\\u20281 === 2");if(eval("1\u2029<<\u20291")!==2)throw new Test262Error("#9: 1\\u2029<<\\u20291 === 2");if(eval(`1	\v\f \xA0
\r\u2028\u2029<<	\v\f \xA0
\r\u2028\u20291`)!==2)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029<<\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2");



test262/test/language/expressions/assignment/dstr/array-elem-iter-get-err.js


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};var _;assert.throws(Test262Error,function(){0,[_]=iterable});


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};var _;assert.throws(Test262Error,function(){[_]=iterable});



test262/test/language/expressions/assignment/dstr/array-rest-put-unresolvable-strict.js


assert.throws(ReferenceError,function(){0,[...unresolvable]=[]});


assert.throws(ReferenceError,function(){[...unresolvable]=[]});



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-continue-escaped.js


var y={continue:x}={continue:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["continue"],42,"assignment successful");


var y={continue:x}={continue:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.continue,42,"assignment successful");



test262/test/language/eval-code/direct/parse-failure-3.js


try{throw eval("continue;"),new Test262Error("#1.1: continue must throw SyntaxError. Actual: "+eval("continue;"))}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: continue must throw SyntaxError. Actual "+e)}try{for(var i=0;i<=1;i++)for(var j=0;j<=1;j++)eval("continue;");throw new Test262Error("#2.1: continue must throw SyntaxError. Actual: "+eval("continue;"))}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#2.2: continue must throw SyntaxError. Actual: "+e)}


try{throw eval("continue;"),new Test262Error("#1.1: continue must throw SyntaxError. Actual: "+eval("continue;"))}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: continue must throw SyntaxError. Actual "+e)}try{for(var i=0;i<=1;i++)for(var j=0;j<=1;j++)eval("continue;");throw new Test262Error("#2.1: continue must throw SyntaxError. Actual: "+eval("continue;"))}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#2.2: continue must throw SyntaxError. Actual: "+e)}



test262/test/language/statements/for-of/dstr/obj-rest-str-val.js


var rest,counter=0;for({...rest}of["foo"])assert.sameValue(rest["0"],"f"),assert.sameValue(rest["1"],"o"),assert.sameValue(rest["2"],"o"),assert(rest instanceof Object),counter+=1;assert.sameValue(counter,1);


var rest,counter=0;for({...rest}of["foo"])assert.sameValue(rest[0],"f"),assert.sameValue(rest[1],"o"),assert.sameValue(rest[2],"o"),assert(rest instanceof Object),counter+=1;assert.sameValue(counter,1);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-break-escaped.js


var y={break:x}={break:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["break"],42,"assignment successful");


var y={break:x}={break:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.break,42,"assignment successful");



test262/test/language/statements/return/S12.9_A3.js


var __evaluated;__evaluated=function(){return}();if(__evaluated!==void 0)throw new Test262Error("#1: If Expression is omitted, the return value is undefined");


var __evaluated;if(__evaluated=function(){}(),__evaluated!==void 0)throw new Test262Error("#1: If Expression is omitted, the return value is undefined");



test262/test/language/expressions/assignment/dstr/array-elem-nested-obj-undefined.js


var x;assert.throws(TypeError,function(){0,[{x}]=[]});


var x;assert.throws(TypeError,function(){[{x}]=[]});



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-super-escaped.js


var y={super:x}={super:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["super"],42,"assignment successful");


var y={super:x}={super:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.super,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-class-escaped.js


var y={class:x}={class:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["class"],42,"assignment successful");


var y={class:x}={class:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.class,42,"assignment successful");



test262/test/built-ins/Math/acosh/arg-is-infinity.js


assert.sameValue(Math.acosh(Infinity),Infinity);


assert.sameValue(Math.acosh(1/0),1/0);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-instanceof-escaped.js


var y={instanceof:x}={instanceof:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["instanceof"],42,"assignment successful");


var y={instanceof:x}={instanceof:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.instanceof,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-for-escaped.js


var y={for:x}={for:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["for"],42,"assignment successful");


var y={for:x}={for:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.for,42,"assignment successful");



test262/test/built-ins/Math/trunc/Math.trunc_Infinity.js


assert.sameValue(Math.trunc(Infinity),Infinity,"Math.trunc(Infinity)"),assert.sameValue(Math.trunc(-1/0),-1/0,"Math.trunc(-Infinity)");


assert.sameValue(Math.trunc(1/0),1/0,"Math.trunc(Infinity)"),assert.sameValue(Math.trunc(-1/0),-1/0,"Math.trunc(-Infinity)");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-throw-escaped.js


var y={throw:x}={throw:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["throw"],42,"assignment successful");


var y={throw:x}={throw:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.throw,42,"assignment successful");



test262/test/language/expressions/async-arrow-function/escaped-async-line-terminator.js


assert.throws(ReferenceError,function(){async,p=>{}});


assert.throws(ReferenceError,function(){async});



test262/test/language/expressions/assignment/dstr/array-elem-nested-array-undefined-hole.js


var _;assert.throws(TypeError,function(){0,[[_]]=[,]});


var _;assert.throws(TypeError,function(){[[_]]=[,]});



test262/test/language/expressions/assignment/dstr/array-elision-iter-get-err.js


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error};assert.throws(Test262Error,function(){0,[,]=iterable});


var iterable={};iterable[Symbol.iterator]=function(){throw new Test262Error},assert.throws(Test262Error,function(){[,]=iterable});



test262/test/built-ins/Math/sumPrecise/sum-is-NaN.js


assert.sameValue(Math.sumPrecise([NaN]),NaN),assert.sameValue(Math.sumPrecise([Infinity,-1/0]),NaN),assert.sameValue(Math.sumPrecise([-1/0,Infinity]),NaN);


assert.sameValue(Math.sumPrecise([NaN]),NaN),assert.sameValue(Math.sumPrecise([1/0,-1/0]),NaN),assert.sameValue(Math.sumPrecise([-1/0,1/0]),NaN);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-static-escaped.js


var y={static:x}={static:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["static"],42,"assignment successful");


var y={static:x}={static:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.static,42,"assignment successful");



test262/test/language/eval-code/indirect/non-definable-function-with-function.js


try{(0,eval)("function shouldNotBeDefined1() {} function NaN() {} function shouldNotBeDefined2() {}")}catch(e){}assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined1"),void 0,"declaration preceding");assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined2"),void 0,"declaration following");


try{(0,eval)("function shouldNotBeDefined1() {} function NaN() {} function shouldNotBeDefined2() {}")}catch{}assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined1"),void 0,"declaration preceding"),assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined2"),void 0,"declaration following");



test262/test/language/eval-code/indirect/parse-failure-5.js


var value;try{throw value=(0,eval)("return;"),new Test262Error("#1.1: return must throw SyntaxError. Actual: "+value)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: return must throw SyntaxError. Actual: "+e)}assert.throws(SyntaxError,function(){(0,eval)("return;")});


var value;try{throw value=(0,eval)("return;"),new Test262Error("#1.1: return must throw SyntaxError. Actual: "+value)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: return must throw SyntaxError. Actual: "+e)}assert.throws(SyntaxError,function(){(0,eval)("return;")});



test262/test/language/expressions/typeof/get-value-ref-err.js


assert.throws(ReferenceError,function(){typeof x.x});


assert.throws(ReferenceError,function(){x.x});



test262/test/language/expressions/typeof/syntax.js


assert.sameValue(eval("var x = 0; typeof	x"),"number",'#1: var x = 0; typeof\\u0009x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\vx"),"number",'#2: var x = 0; typeof\\u000Bx; x === "number".'),assert.sameValue(eval("var x = 0; typeof\fx"),"number",'#3: var x = 0; typeof\\u000Cx; x === "number".'),assert.sameValue(eval("var x = 0; typeof x"),"number",'#4: var x = 0; typeof\\u0020x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\xA0x"),"number",'#5: var x = 0; typeof\\u00A0x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\nx"),"number",'#6: var x = 0; typeof\\u000Ax; x === "number".'),assert.sameValue(eval("var x = 0; typeof\rx"),"number",'#7: var x = 0; typeof\\u000Dx; x === "number".'),assert.sameValue(eval("var x = 0; typeof\u2028x"),"number",'#8: var x = 0; typeof\\u2028x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\u2029x"),"number",'#9: var x = 0; typeof\\u2029x; x === "number".'),assert.sameValue(eval("var x = 0; typeof	\v\f \xA0\n\r\u2028\u2029x"),"number",'#10: var x = 0; typeof\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029x; x === "number".'),assert.sameValue(eval("typeof(0)"),"number","applied with grouping operator enclosing operand");


assert.sameValue(eval("var x = 0; typeof	x"),"number",'#1: var x = 0; typeof\\u0009x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\vx"),"number",'#2: var x = 0; typeof\\u000Bx; x === "number".'),assert.sameValue(eval("var x = 0; typeof\fx"),"number",'#3: var x = 0; typeof\\u000Cx; x === "number".'),assert.sameValue(eval("var x = 0; typeof x"),"number",'#4: var x = 0; typeof\\u0020x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\xA0x"),"number",'#5: var x = 0; typeof\\u00A0x; x === "number".'),assert.sameValue(eval(`var x = 0; typeof
x`),"number",'#6: var x = 0; typeof\\u000Ax; x === "number".'),assert.sameValue(eval("var x = 0; typeof\rx"),"number",'#7: var x = 0; typeof\\u000Dx; x === "number".'),assert.sameValue(eval("var x = 0; typeof\u2028x"),"number",'#8: var x = 0; typeof\\u2028x; x === "number".'),assert.sameValue(eval("var x = 0; typeof\u2029x"),"number",'#9: var x = 0; typeof\\u2029x; x === "number".'),assert.sameValue(eval(`var x = 0; typeof	\v\f \xA0
\r\u2028\u2029x`),"number",'#10: var x = 0; typeof\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029x; x === "number".'),assert.sameValue(eval("typeof(0)"),"number","applied with grouping operator enclosing operand");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-interface-escaped.js


var y={interface:x}={interface:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["interface"],42,"assignment successful");


var y={interface:x}={interface:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.interface,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-empty-val-symbol.js


var s=Symbol();assert.throws(TypeError,function(){0,[]=s});


var s=Symbol();assert.throws(TypeError,function(){[]=s});



test262/test/built-ins/Math/sign/sign-specialVals.js


assert.sameValue(Math.sign(NaN),NaN,"NaN"),assert.sameValue(Math.sign(-0),-0,"-0"),assert.sameValue(Math.sign(0),0,"0"),assert.sameValue(Math.sign(-1e-6),-1,"-0.000001"),assert.sameValue(Math.sign(-1),-1,"-1"),assert.sameValue(Math.sign(-1/0),-1,"-Infinity"),assert.sameValue(Math.sign(1e-6),1,"0.000001"),assert.sameValue(Math.sign(1),1,"1"),assert.sameValue(Math.sign(Infinity),1,"Infinity");


assert.sameValue(Math.sign(NaN),NaN,"NaN"),assert.sameValue(Math.sign(-0),-0,"-0"),assert.sameValue(Math.sign(0),0,"0"),assert.sameValue(Math.sign(-1e-6),-1,"-0.000001"),assert.sameValue(Math.sign(-1),-1,"-1"),assert.sameValue(Math.sign(-1/0),-1,"-Infinity"),assert.sameValue(Math.sign(1e-6),1,"0.000001"),assert.sameValue(Math.sign(1),1,"1"),assert.sameValue(Math.sign(1/0),1,"Infinity");



test262/test/built-ins/Array/prototype/filter/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.filter.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.compareArray(result,expectedElements,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.filter.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!0});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.compareArray(result,expectedElements,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.filter.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.compareArray(result,expectedElements,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.filter.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!0}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.compareArray(result,expectedElements,"result (grow)")});



test262/test/language/expressions/addition/S11.6.1_A3.1_T2.5.js


if(!0+null!==1)throw new Test262Error("#1: true + null === 1. Actual: "+(!0+null));if(null+!0!==1)throw new Test262Error("#2: null + true === 1. Actual: "+(null+!0));if(new Boolean(!0)+null!==1)throw new Test262Error("#3: new Boolean(true) + null === 1. Actual: "+(new Boolean(!0)+null));if(null+new Boolean(!0)!==1)throw new Test262Error("#4: null + new Boolean(true) === 1. Actual: "+(null+new Boolean(!0)));


if(!0+null!=1)throw new Test262Error("#1: true + null === 1. Actual: "+(!0+null));if(null+!0!=1)throw new Test262Error("#2: null + true === 1. Actual: "+(null+!0));if(new Boolean(!0)+null!==1)throw new Test262Error("#3: new Boolean(true) + null === 1. Actual: "+(new Boolean(!0)+null));if(null+new Boolean(!0)!==1)throw new Test262Error("#4: null + new Boolean(true) === 1. Actual: "+(null+new Boolean(!0)));



test262/test/language/expressions/assignment/dstr/array-elem-nested-array-undefined.js


var _;assert.throws(TypeError,function(){0,[[x]]=[]});


var _;assert.throws(TypeError,function(){[[x]]=[]});



test262/test/language/eval-code/indirect/non-definable-function-with-variable.js


try{(0,eval)("var shouldNotBeDefined1; function NaN() {} var shouldNotBeDefined2;")}catch(e){}assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined1"),void 0,"declaration preceding");assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined2"),void 0,"declaration following");


try{(0,eval)("var shouldNotBeDefined1; function NaN() {} var shouldNotBeDefined2;")}catch{}assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined1"),void 0,"declaration preceding"),assert.sameValue(Object.getOwnPropertyDescriptor(this,"shouldNotBeDefined2"),void 0,"declaration following");



test262/test/language/expressions/assignment/dstr/array-empty-val-undef.js


assert.throws(TypeError,function(){0,[]=void 0});


assert.throws(TypeError,function(){[]=void 0});



test262/test/language/statements/variable/S12.2_A11.js


this["__declared__var"]="baloon";if(this["__declared__var"]!=="baloon")throw new Test262Error(`#1: this['__declared__var'] === "baloon". Actual:  this['__declared__var'] ===`+this["__declared__var"]);if(__declared__var!=="baloon")throw new Test262Error('#2: __declared__var === "baloon". Actual:  __declared__var ==='+__declared__var);var __declared__var;


if(this.__declared__var="baloon",this.__declared__var!=="baloon")throw new Test262Error(`#1: this['__declared__var'] === "baloon". Actual:  this['__declared__var'] ===`+this.__declared__var);if(__declared__var!=="baloon")throw new Test262Error('#2: __declared__var === "baloon". Actual:  __declared__var ==='+__declared__var);var __declared__var;



test262/test/language/expressions/assignment/dstr/array-elision-val-bool.js


assert.throws(TypeError,function(){0,[,]=!0});


assert.throws(TypeError,function(){[,]=!0});



test262/test/language/expressions/assignment/dstr/array-elision-val-null.js


assert.throws(TypeError,function(){0,[,]=null});


assert.throws(TypeError,function(){[,]=null});



test262/test/language/expressions/addition/S11.6.1_A3.2_T2.1.js


if(new String("1")+1!=="11")throw new Test262Error('#3: new String("1") + 1 === "11". Actual: '+(new String("1")+1));if(1+new String("1")!=="11")throw new Test262Error('#4: 1 + new String("1") === "11". Actual: '+(1+new String("1")));if("1"+new Number(1)!=="11")throw new Test262Error('#5: "1" + new Number(1) === "11". Actual: '+("1"+new Number(1)));if(new Number(1)+"1"!=="11")throw new Test262Error('#6: new Number(1) + "1" === "11". Actual: '+(new Number(1)+"1"));if(new String("1")+new Number(1)!=="11")throw new Test262Error('#7: new String("1") + new Number(1) === "11". Actual: '+(new String("1")+new Number(1)));if(new Number(1)+new String("1")!=="11")throw new Test262Error('#8: new Number(1) + new String("1") === "11". Actual: '+(new Number(1)+new String("1")));


if(new String("1")+1!=="11")throw new Test262Error('#3: new String("1") + 1 === "11". Actual: '+(new String("1")+1));if(1+new String("1")!=="11")throw new Test262Error('#4: 1 + new String("1") === "11". Actual: '+(1+new String("1")));if("1"+new Number(1)!="11")throw new Test262Error('#5: "1" + new Number(1) === "11". Actual: '+("1"+new Number(1)));if(new Number(1)+"1"!="11")throw new Test262Error('#6: new Number(1) + "1" === "11". Actual: '+(new Number(1)+"1"));if(new String("1")+new Number(1)!=="11")throw new Test262Error('#7: new String("1") + new Number(1) === "11". Actual: '+(new String("1")+new Number(1)));if(new Number(1)+new String("1")!=="11")throw new Test262Error('#8: new Number(1) + new String("1") === "11". Actual: '+(new Number(1)+new String("1")));



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-protected-escaped.js


var y={protected:x}={protected:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["protected"],42,"assignment successful");


var y={protected:x}={protected:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.protected,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-rest-iter-get-err.js


var iterable={},x;iterable[Symbol.iterator]=function(){throw new Test262Error};assert.throws(Test262Error,function(){0,[...x]=iterable});


var iterable={},x;iterable[Symbol.iterator]=function(){throw new Test262Error},assert.throws(Test262Error,function(){[...x]=iterable});



test262/test/language/statements/variable/S12.2_A4.js


try{__var=__var}catch(e){throw new Test262Error("#1: Unicode characters in variable Identifier allowed")}var __var=1;if(__var!==1)throw new Test262Error("#2: __var === 1. Actual:  __var ==="+__var);


try{__var=__var}catch{throw new Test262Error("#1: Unicode characters in variable Identifier allowed")}var __var=1;if(__var!==1)throw new Test262Error("#2: __var === 1. Actual:  __var ==="+__var);



test262/test/language/expressions/addition/S11.6.1_A2.1_T3.js


try{throw 1+y,new Test262Error("#1.1: 1 + y throw ReferenceError. Actual: "+(1+y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 + y throw ReferenceError. Actual: "+e)}


try{throw 1+y,new Test262Error("#1.1: 1 + y throw ReferenceError. Actual: "+(1+y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 + y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-case-escaped.js


var y={case:x}={case:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["case"],42,"assignment successful");


var y={case:x}={case:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.case,42,"assignment successful");



test262/test/language/expressions/addition/S11.6.1_A4_T4.js


if(Number.POSITIVE_INFINITY+1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Infinity + 1 === Infinity. Actual: Infinity");if(-1+Number.POSITIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: -1 + Infinity === Infinity. Actual: Infinity");if(Number.NEGATIVE_INFINITY+1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: -Infinity + 1 === -Infinity. Actual: -Infinity");if(-1+Number.NEGATIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#4: -1 + -Infinity === -Infinity. Actual: -Infinity");if(Number.POSITIVE_INFINITY+Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity + Number.MAX_VALUE === Infinity. Actual: "+(Infinity+Number.MAX_VALUE));if(-Number.MAX_VALUE+Number.POSITIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#6: -Number.MAX_VALUE + Infinity === Infinity. Actual: "+(-Number.MAX_VALUE+Infinity));if(Number.NEGATIVE_INFINITY+Number.MAX_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity + Number.MAX_VALUE === -Infinity. Actual: "+(-1/0+Number.MAX_VALUE));if(-Number.MAX_VALUE+Number.NEGATIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#8: -Number.MAX_VALUE + -Infinity === -Infinity. Actual: "+(-Number.MAX_VALUE+-1/0));


if(Number.POSITIVE_INFINITY+1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: Infinity + 1 === Infinity. Actual: "+(1/0+1));if(-1+Number.POSITIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: -1 + Infinity === Infinity. Actual: "+(-1+1/0));if(Number.NEGATIVE_INFINITY+1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: -Infinity + 1 === -Infinity. Actual: "+(-1/0+1));if(-1+Number.NEGATIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#4: -1 + -Infinity === -Infinity. Actual: "+(-1+-1/0));if(Number.POSITIVE_INFINITY+Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity + Number.MAX_VALUE === Infinity. Actual: "+(1/0+Number.MAX_VALUE));if(-Number.MAX_VALUE+Number.POSITIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#6: -Number.MAX_VALUE + Infinity === Infinity. Actual: "+(-Number.MAX_VALUE+1/0));if(Number.NEGATIVE_INFINITY+Number.MAX_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity + Number.MAX_VALUE === -Infinity. Actual: "+(-1/0+Number.MAX_VALUE));if(-Number.MAX_VALUE+Number.NEGATIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#8: -Number.MAX_VALUE + -Infinity === -Infinity. Actual: "+(-Number.MAX_VALUE+-1/0));



test262/test/language/expressions/addition/bigint-and-number.js


assert.throws(TypeError,function(){1n+1},"1n + 1 throws TypeError"),assert.throws(TypeError,function(){1+1n},"1 + 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)+1},"Object(1n) + 1 throws TypeError"),assert.throws(TypeError,function(){1+Object(1n)},"1 + Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n+Object(1)},"1n + Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)+1n},"Object(1) + 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)+Object(1)},"Object(1n) + Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)+Object(1n)},"Object(1) + Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n+NaN},"1n + NaN throws TypeError"),assert.throws(TypeError,function(){NaN+1n},"NaN + 1n throws TypeError"),assert.throws(TypeError,function(){1n+Infinity},"1n + Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity+1n},"Infinity + 1n throws TypeError"),assert.throws(TypeError,function(){1n+!0},"1n + true throws TypeError"),assert.throws(TypeError,function(){!0+1n},"true + 1n throws TypeError"),assert.throws(TypeError,function(){1n+null},"1n + null throws TypeError"),assert.throws(TypeError,function(){null+1n},"null + 1n throws TypeError"),assert.throws(TypeError,function(){1n+void 0},"1n + undefined throws TypeError"),assert.throws(TypeError,function(){void 0+1n},"undefined + 1n throws TypeError");


assert.throws(TypeError,function(){1n+1},"1n + 1 throws TypeError"),assert.throws(TypeError,function(){1+1n},"1 + 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)+1},"Object(1n) + 1 throws TypeError"),assert.throws(TypeError,function(){1+Object(1n)},"1 + Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n+Object(1)},"1n + Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)+1n},"Object(1) + 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)+Object(1)},"Object(1n) + Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)+Object(1n)},"Object(1) + Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n+NaN},"1n + NaN throws TypeError"),assert.throws(TypeError,function(){NaN+1n},"NaN + 1n throws TypeError"),assert.throws(TypeError,function(){1n+1/0},"1n + Infinity throws TypeError"),assert.throws(TypeError,function(){1/0+1n},"Infinity + 1n throws TypeError"),assert.throws(TypeError,function(){1n+!0},"1n + true throws TypeError"),assert.throws(TypeError,function(){!0+1n},"true + 1n throws TypeError"),assert.throws(TypeError,function(){1n+null},"1n + null throws TypeError"),assert.throws(TypeError,function(){null+1n},"null + 1n throws TypeError"),assert.throws(TypeError,function(){1n+void 0},"1n + undefined throws TypeError"),assert.throws(TypeError,function(){void 0+1n},"undefined + 1n throws TypeError");



test262/test/built-ins/Math/tan/S15.8.2.18_A4.js


assert.sameValue(Math.tan(Infinity),NaN);


assert.sameValue(Math.tan(1/0),NaN);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-extends.js


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["extends"],42,"assignment successful");


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.extends,42,"assignment successful");



test262/test/language/expressions/addition/S11.6.1_A3.2_T1.1.js


if(new String("1")+"1"!=="11")throw new Test262Error('#2: new String("1") + "1" === "11". Actual: '+(new String("1")+"1"));if("1"+new String("1")!=="11")throw new Test262Error('#3: "1" + new String("1") === "11". Actual: '+("1"+new String("1")));if(new String("1")+new String("1")!=="11")throw new Test262Error('#4: new String("1") + new String("1") === "11". Actual: '+(new String("1")+new String("1")));


if(new String("1")+"1"!="11")throw new Test262Error('#2: new String("1") + "1" === "11". Actual: '+(new String("1")+"1"));if("1"+new String("1")!="11")throw new Test262Error('#3: "1" + new String("1") === "11". Actual: '+("1"+new String("1")));if(new String("1")+new String("1")!=="11")throw new Test262Error('#4: new String("1") + new String("1") === "11". Actual: '+(new String("1")+new String("1")));



test262/test/language/expressions/addition/S11.6.1_A2.1_T2.js


try{throw x+1,new Test262Error("#1.1: x + 1 throw ReferenceError. Actual: "+(x+1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x + 1 throw ReferenceError. Actual: "+e)}


try{throw x+1,new Test262Error("#1.1: x + 1 throw ReferenceError. Actual: "+(x+1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x + 1 throw ReferenceError. Actual: "+e)}



test262/test/language/eval-code/indirect/non-definable-global-var.js


var nonExtensible;try{Object.preventExtensions(this),nonExtensible=!Object.isExtensible(this)}catch(e){nonExtensible=!1}nonExtensible&&assert.throws(TypeError,function(){(0,eval)("var unlikelyVariableName;")});


var nonExtensible;try{Object.preventExtensions(this),nonExtensible=!Object.isExtensible(this)}catch{nonExtensible=!1}nonExtensible&&assert.throws(TypeError,function(){(0,eval)("var unlikelyVariableName;")});



test262/test/language/expressions/addition/S11.6.1_A3.2_T2.2.js


if(new Boolean(!0)+"1"!=="true1")throw new Test262Error('#3: new Boolean(true) + "1" === "true1". Actual: '+(new Boolean(!0)+"1"));if("1"+new Boolean(!0)!=="1true")throw new Test262Error('#4: "1" + new Boolean(true) === "1true". Actual: '+("1"+new Boolean(!0)));if(!0+new String("1")!=="true1")throw new Test262Error('#5: true + new String("1") === "true1". Actual: '+(!0+new String("1")));if(new String("1")+!0!=="1true")throw new Test262Error('#6: new String("1") + true === "1true". Actual: '+(new String("1")+!0));if(new Boolean(!0)+new String("1")!=="true1")throw new Test262Error('#7: new Boolean(true) + new String("1") === "true1". Actual: '+(new Boolean(!0)+new String("1")));if(new String("1")+new Boolean(!0)!=="1true")throw new Test262Error('#8: new String("1") + new Boolean(true) === "1true". Actual: '+(new String("1")+new Boolean(!0)));


if(new Boolean(!0)+"1"!="true1")throw new Test262Error('#3: new Boolean(true) + "1" === "true1". Actual: '+(new Boolean(!0)+"1"));if("1"+new Boolean(!0)!="1true")throw new Test262Error('#4: "1" + new Boolean(true) === "1true". Actual: '+("1"+new Boolean(!0)));if(!0+new String("1")!=="true1")throw new Test262Error('#5: true + new String("1") === "true1". Actual: '+(!0+new String("1")));if(new String("1")+!0!=="1true")throw new Test262Error('#6: new String("1") + true === "1true". Actual: '+(new String("1")+!0));if(new Boolean(!0)+new String("1")!=="true1")throw new Test262Error('#7: new Boolean(true) + new String("1") === "true1". Actual: '+(new Boolean(!0)+new String("1")));if(new String("1")+new Boolean(!0)!=="1true")throw new Test262Error('#8: new String("1") + new Boolean(true) === "1true". Actual: '+(new String("1")+new Boolean(!0)));



test262/test/language/expressions/assignment/dstr/array-elem-put-unresolvable-strict.js


assert.throws(ReferenceError,function(){0,[unresolvable]=[]});


assert.throws(ReferenceError,function(){[unresolvable]=[]});



test262/test/language/expressions/addition/S11.6.1_A1.js


if(eval("1	+	1")!==2)throw new Test262Error("#1: 1\\u0009+\\u00091 === 2");if(eval("1\v+\v1")!==2)throw new Test262Error("#2: 1\\u000B+\\u000B1 === 2");if(eval("1\f+\f1")!==2)throw new Test262Error("#3: 1\\u000C+\\u000C1 === 2");if(eval("1 + 1")!==2)throw new Test262Error("#4: 1\\u0020+\\u00201 === 2");if(eval("1\xA0+\xA01")!==2)throw new Test262Error("#5: 1\\u00A0+\\u00A01 === 2");if(eval("1\n+\n1")!==2)throw new Test262Error("#6: 1\\u000A+\\u000A1 === 2");if(eval("1\r+\r1")!==2)throw new Test262Error("#7: 1\\u000D+\\u000D1 === 2");if(eval("1\u2028+\u20281")!==2)throw new Test262Error("#8: 1\\u2028+\\u20281 === 2");if(eval("1\u2029+\u20291")!==2)throw new Test262Error("#9: 1\\u2029+\\u20291 === 2");if(eval("1	\v\f \xA0\n\r\u2028\u2029+	\v\f \xA0\n\r\u2028\u20291")!==2)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029+\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2");


if(eval("1	+	1")!==2)throw new Test262Error("#1: 1\\u0009+\\u00091 === 2");if(eval("1\v+\v1")!==2)throw new Test262Error("#2: 1\\u000B+\\u000B1 === 2");if(eval("1\f+\f1")!==2)throw new Test262Error("#3: 1\\u000C+\\u000C1 === 2");if(eval("1 + 1")!==2)throw new Test262Error("#4: 1\\u0020+\\u00201 === 2");if(eval("1\xA0+\xA01")!==2)throw new Test262Error("#5: 1\\u00A0+\\u00A01 === 2");if(eval(`1
+
1`)!==2)throw new Test262Error("#6: 1\\u000A+\\u000A1 === 2");if(eval("1\r+\r1")!==2)throw new Test262Error("#7: 1\\u000D+\\u000D1 === 2");if(eval("1\u2028+\u20281")!==2)throw new Test262Error("#8: 1\\u2028+\\u20281 === 2");if(eval("1\u2029+\u20291")!==2)throw new Test262Error("#9: 1\\u2029+\\u20291 === 2");if(eval(`1	\v\f \xA0
\r\u2028\u2029+	\v\f \xA0
\r\u2028\u20291`)!==2)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029+\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-void-escaped.js


var y={void:x}={void:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["void"],42,"assignment successful");


var y={void:x}={void:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.void,42,"assignment successful");



test262/test/built-ins/Math/hypot/Math.hypot_InfinityNaN.js


assert.sameValue(Math.hypot(NaN,Infinity),Infinity,"Math.hypot(NaN, Infinity)");


assert.sameValue(Math.hypot(NaN,1/0),1/0,"Math.hypot(NaN, Infinity)");



test262/test/language/expressions/addition/S11.6.1_A2.4_T3.js


try{throw x+(x=1),new Test262Error("#1.1: x + (x = 1) throw ReferenceError. Actual: "+(x+(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x + (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x+(x=1),new Test262Error("#1.1: x + (x = 1) throw ReferenceError. Actual: "+(x+(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x + (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Math/hypot/Math.hypot_Infinity.js


assert.sameValue(Math.hypot(3,Infinity),Infinity,"Math.hypot(3, Infinity)");


assert.sameValue(Math.hypot(3,1/0),1/0,"Math.hypot(3, Infinity)");



test262/test/language/expressions/assignment/dstr/array-elem-nested-obj-undefined-own.js


var x;assert.throws(TypeError,function(){0,[{x}]=[void 0]});


var x;assert.throws(TypeError,function(){[{x}]=[void 0]});



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-extends-escaped.js


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["extends"],42,"assignment successful");


var y={extends:x}={extends:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.extends,42,"assignment successful");



test262/test/built-ins/Math/hypot/Math.hypot_NegInfinity.js


assert.sameValue(Math.hypot(3,-1/0),Infinity,"Math.hypot(3, -Infinity)");


assert.sameValue(Math.hypot(3,-1/0),1/0,"Math.hypot(3, -Infinity)");



test262/test/language/statements/variable/S12.2_A7.js


try{infor_var=infor_var}catch(e){throw new Test262Error('#1: Variable declaration inside "for" loop is admitted')}for(;;){break;var infor_var}


try{infor_var=infor_var}catch{throw new Test262Error('#1: Variable declaration inside "for" loop is admitted')}for(;;){break;var infor_var}



test262/test/language/statements/variable/S12.2_A12.js


try{x=x}catch(e){throw new Test262Error('#1: Declaration variable inside "do-while" statement is admitted')}do var x;while(!1);


try{x=x}catch{throw new Test262Error('#1: Declaration variable inside "do-while" statement is admitted')}do var x;while(!1);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-new-escaped.js


var y={new:x}={new:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["new"],42,"assignment successful");


var y={new:x}={new:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.new,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-export-escaped.js


var y={export:x}={export:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["export"],42,"assignment successful");


var y={export:x}={export:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.export,42,"assignment successful");



test262/test/built-ins/parseFloat/S15.1.2.3_A7.7.js


try{throw new parseFloat,new Test262Error("#1.1: new parseFloat() throw TypeError. Actual: "+new parseFloat)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new parseFloat() throw TypeError. Actual: "+e)}


try{throw new parseFloat,new Test262Error("#1.1: new parseFloat() throw TypeError. Actual: "+new parseFloat)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new parseFloat() throw TypeError. Actual: "+e)}



test262/test/built-ins/parseFloat/S15.1.2.3_A7.3.js


var x=parseFloat.length;verifyNotWritable(parseFloat,"length",null,Infinity);if(parseFloat.length!==x)throw new Test262Error("#1: x = parseFloat.length; parseFloat.length = Infinity; parseFloat.length === x. Actual: "+parseFloat.length);


var x=parseFloat.length;if(verifyNotWritable(parseFloat,"length",null,1/0),parseFloat.length!==x)throw new Test262Error("#1: x = parseFloat.length; parseFloat.length = Infinity; parseFloat.length === x. Actual: "+parseFloat.length);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-const-escaped.js


var y={const:x}={const:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["const"],42,"assignment successful");


var y={const:x}={const:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.const,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-let-escaped.js


var y={let:x}={let:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["let"],42,"assignment successful");


var y={let:x}={let:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.let,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-enum-escaped.js


var y={enum:x}={enum:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["enum"],42,"assignment successful");


var y={enum:x}={enum:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.enum,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-empty-val-num.js


assert.throws(TypeError,function(){0,[]=1});


assert.throws(TypeError,function(){[]=1});



test262/test/language/expressions/assignment/dstr/obj-prop-name-evaluation.js


var x,y,xy,result,vals={x:1,xy:23,y:2};result={["xy"]:x}=vals;assert.sameValue(x,23);assert.sameValue(y,void 0);assert.sameValue(xy,void 0);assert.sameValue(result,vals);


var x,y,xy,result,vals={x:1,xy:23,y:2};result={xy:x}=vals,assert.sameValue(x,23),assert.sameValue(y,void 0),assert.sameValue(xy,void 0),assert.sameValue(result,vals);



test262/test/built-ins/parseFloat/S15.1.2.3_A1_T5.js


if(parseFloat(new Number(-1.1))!==parseFloat("-1.1"))throw new Test262Error('#1: parseFloat(new Number(-1.1)) === parseFloat("-1.1"). Actual: '+parseFloat(new Number(-1.1)));if(parseFloat(new Number(Infinity))!==parseFloat("Infinity"))throw new Test262Error('#2: parseFloat(new Number(Infinity)) === parseFloat("Infinity"). Actual: '+parseFloat(new Number(Infinity)));if(""+parseFloat(new Number(NaN))!=="NaN")throw new Test262Error('#3: String(parseFloat(new Number(NaN))) === "NaN". Actual: '+(""+parseFloat(new Number(NaN))));if(parseFloat(new Number(1))!==parseFloat(".01e+2"))throw new Test262Error('#4: parseFloat(new Number(.01e+2)) === parseFloat(".01e+2"). Actual: '+parseFloat(new Number(1)));


if(parseFloat(new Number(-1.1))!==parseFloat("-1.1"))throw new Test262Error('#1: parseFloat(new Number(-1.1)) === parseFloat("-1.1"). Actual: '+parseFloat(new Number(-1.1)));if(parseFloat(new Number(1/0))!==parseFloat("Infinity"))throw new Test262Error('#2: parseFloat(new Number(Infinity)) === parseFloat("Infinity"). Actual: '+parseFloat(new Number(1/0)));if(String(parseFloat(new Number(NaN)))!=="NaN")throw new Test262Error('#3: String(parseFloat(new Number(NaN))) === "NaN". Actual: '+String(parseFloat(new Number(NaN))));if(parseFloat(new Number(1))!==parseFloat(".01e+2"))throw new Test262Error('#4: parseFloat(new Number(.01e+2)) === parseFloat(".01e+2"). Actual: '+parseFloat(new Number(1)));



test262/test/language/identifier-resolution/S11.1.2_A1_T2.js


try{throw this.z,z,new Test262Error("#1.1: this.z; z === undefined throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: this.z; z === undefined throw ReferenceError. Actual: "+e)}


try{throw this.z,z,new Test262Error("#1.1: this.z; z === undefined throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: this.z; z === undefined throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-import-escaped.js


var y={import:x}={import:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["import"],42,"assignment successful");


var y={import:x}={import:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.import,42,"assignment successful");



test262/test/language/global-code/S10.4.1_A1_T2.js


x=1;if(this.x!==1)throw new Test262Error("#1: variable x is a property of global object");if(delete this.x!==!0)throw new Test262Error("#2: variable x has property attribute DontDelete");


if(x=1,this.x!==1)throw new Test262Error("#1: variable x is a property of global object");if(!delete this.x)throw new Test262Error("#2: variable x has property attribute DontDelete");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-function-escaped.js


var y={function:x}={function:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["function"],42,"assignment successful");


var y={function:x}={function:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.function,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-switch-escaped.js


var y={switch:x}={switch:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["switch"],42,"assignment successful");


var y={switch:x}={switch:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.switch,42,"assignment successful");



test262/test/built-ins/parseFloat/S15.1.2.3_A1_T2.js


if(parseFloat(-1.1)!==parseFloat("-1.1"))throw new Test262Error('#1: parseFloat(-1.1) === parseFloat("-1.1"). Actual: '+parseFloat(-1.1));if(parseFloat(Infinity)!==parseFloat("Infinity"))throw new Test262Error('#2: parseFloat(Infinity) === parseFloat("Infinity"). Actual: '+parseFloat(Infinity));if(""+parseFloat(NaN)!=="NaN")throw new Test262Error('#3: String(parseFloat(NaN)) === "NaN". Actual: '+(""+parseFloat(NaN)));if(parseFloat(1)!==parseFloat(".01e+2"))throw new Test262Error('#4: parseFloat(.01e+2) === parseFloat(".01e+2"). Actual: '+parseFloat(1));if(parseFloat(-0)!==0)throw new Test262Error("#5: parseFloat(-0) === 0. Actual: "+parseFloat(-0));if(1/parseFloat(-0)!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: parseFloat(-0) === +0. Actual: "+parseFloat(-0));


if(parseFloat(-1.1)!==parseFloat("-1.1"))throw new Test262Error('#1: parseFloat(-1.1) === parseFloat("-1.1"). Actual: '+parseFloat(-1.1));if(parseFloat(1/0)!==parseFloat("Infinity"))throw new Test262Error('#2: parseFloat(Infinity) === parseFloat("Infinity"). Actual: '+parseFloat(1/0));if(String(parseFloat(NaN))!=="NaN")throw new Test262Error('#3: String(parseFloat(NaN)) === "NaN". Actual: '+String(parseFloat(NaN)));if(parseFloat(1)!==parseFloat(".01e+2"))throw new Test262Error('#4: parseFloat(.01e+2) === parseFloat(".01e+2"). Actual: '+parseFloat(1));if(parseFloat(-0)!==0)throw new Test262Error("#5: parseFloat(-0) === 0. Actual: "+parseFloat(-0));if(1/parseFloat(-0)!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: parseFloat(-0) === +0. Actual: "+parseFloat(-0));



test262/test/language/expressions/assignment/dstr/array-elision-val-num.js


assert.throws(TypeError,function(){0,[,]=1});


assert.throws(TypeError,function(){[,]=1});



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-implements-escaped.js


var y={implements:x}={implements:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["implements"],42,"assignment successful");


var y={implements:x}={implements:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.implements,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-return-escaped.js


var y={return:x}={return:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["return"],42,"assignment successful");


var y={return:x}={return:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.return,42,"assignment successful");



test262/test/language/expressions/object/ident-name-method-def-var-escaped.js


var obj={var(){return 42}};assert.sameValue(obj["var"](),42,"property exists");


var obj={var(){return 42}};assert.sameValue(obj.var(),42,"property exists");



test262/test/language/global-code/yield-non-strict.js


try{yield=0}catch(_){}


try{yield=0}catch{}



test262/test/language/expressions/object/S11.1.5_A1.1.js


var object={};if(typeof object!="object")throw new Test262Error('#1: var object = {}; typeof object === "object". Actual: '+typeof object);if(object instanceof Object!==!0)throw new Test262Error("#2: var object = {}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object.toString()!=="[object Object]")throw new Test262Error('#4: var object = {}; object.toString === "[object Object]". Actual: '+object.toString);


var object={};if(typeof object!="object")throw new Test262Error('#1: var object = {}; typeof object === "object". Actual: '+typeof object);if(!(object instanceof Object))throw new Test262Error("#2: var object = {}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object.toString()!=="[object Object]")throw new Test262Error('#4: var object = {}; object.toString === "[object Object]". Actual: '+object.toString);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-debugger-escaped.js


var y={debugger:x}={debugger:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["debugger"],42,"assignment successful");


var y={debugger:x}={debugger:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.debugger,42,"assignment successful");



test262/test/language/expressions/assignment/dstr/array-empty-val-null.js


assert.throws(TypeError,function(){0,[]=null});


assert.throws(TypeError,function(){[]=null});



test262/test/language/expressions/object/ident-name-method-def-instanceof-escaped.js


var obj={instanceof(){return 42}};assert.sameValue(obj["instanceof"](),42,"property exists");


var obj={instanceof(){return 42}};assert.sameValue(obj.instanceof(),42,"property exists");



test262/test/language/global-code/S10.4.1_A1_T1.js


var x=1;if(this.x!==1)throw new Test262Error("#1: variable x is a property of global object");if(delete this.x!==!1)throw new Test262Error("#2: variable x has property attribute DontDelete");


var x=1;if(this.x!==1)throw new Test262Error("#1: variable x is a property of global object");if(delete this.x)throw new Test262Error("#2: variable x has property attribute DontDelete");



test262/test/language/expressions/assignment/dstr/array-elem-init-let.js


var x;assert.throws(ReferenceError,function(){0,[x=y]=[]});let y;


var x;assert.throws(ReferenceError,function(){[x=y]=[]});let y;



test262/test/language/expressions/object/ident-name-prop-name-literal-void-escaped.js


var obj={void:42};assert.sameValue(obj["void"],42,"property exists");


var obj={void:42};assert.sameValue(obj.void,42,"property exists");



test262/test/language/global-code/S10.1.7_A1_T1.js


if(delete this!==!0)throw new Test262Error("#1: The this value associated with an executioncontext is immutable. Actual: this was deleted");


if(!delete this)throw new Test262Error("#1: The this value associated with an executioncontext is immutable. Actual: this was deleted");



test262/test/language/statements/with/12.10-2-5.js


try{with(null)x=2;throw new Test262Error("#2.1: with(null) x = 2 must throw TypeError. Actual: x === . Actual: "+x)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: with(null) x = 2 must throw TypeError. Actual: "+e)}


try{with(null)x=2;throw new Test262Error("#2.1: with(null) x = 2 must throw TypeError. Actual: x === . Actual: "+x)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: with(null) x = 2 must throw TypeError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-interface-escaped.js


var obj={interface(){return 42}};assert.sameValue(obj["interface"](),42,"property exists");


var obj={interface(){return 42}};assert.sameValue(obj.interface(),42,"property exists");



test262/test/language/expressions/object/S11.1.5_A3.js


var object={0:1,1:"x",o:{}};if(object[0]!==1)throw new Test262Error('#1: var object = {0 : 1; "1" : "x"; o : {}}; object[0] === 1. Actual: '+object[0]);if(object["1"]!=="x")throw new Test262Error('#2: var object = {0 : 1; "1" : "x"; o : {}}; object["1"] === "x". Actual: '+object["1"]);if(typeof object.o!="object")throw new Test262Error('#1: var object = {0 : 1; "1" : "x"; o : {}}; typeof object.o === "object". Actual: '+typeof object.o);


var object={0:1,1:"x",o:{}};if(object[0]!==1)throw new Test262Error('#1: var object = {0 : 1; "1" : "x"; o : {}}; object[0] === 1. Actual: '+object[0]);if(object[1]!=="x")throw new Test262Error('#2: var object = {0 : 1; "1" : "x"; o : {}}; object["1"] === "x". Actual: '+object[1]);if(typeof object.o!="object")throw new Test262Error('#1: var object = {0 : 1; "1" : "x"; o : {}}; typeof object.o === "object". Actual: '+typeof object.o);



test262/test/language/expressions/assignment/dstr/array-empty-val-bool.js


assert.throws(TypeError,function(){0,[]=!0});


assert.throws(TypeError,function(){[]=!0});



test262/test/language/literals/regexp/S7.8.5_A1.3_T2.js


try{throw eval("/\n/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Line Feed is incorrect. Actual: "+eval("/\n/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: Line Feed is incorrect. Actual: "+e)}


try{throw eval(`/
/`).source,new Test262Error("#1.1: RegularExpressionFirstChar :: Line Feed is incorrect. Actual: "+eval(`/
/`).source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: Line Feed is incorrect. Actual: "+e)}



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-in-escaped.js


var obj={in:42};assert.sameValue(obj["in"],42,"property exists");


var obj={in:42};assert.sameValue(obj.in,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-import-escaped.js


var obj={import:42};assert.sameValue(obj["import"],42,"property exists");


var obj={import:42};assert.sameValue(obj.import,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-switch-escaped.js


var obj={switch:42};assert.sameValue(obj["switch"],42,"property exists");


var obj={switch:42};assert.sameValue(obj.switch,42,"property exists");



test262/test/language/expressions/assignment/dstr/array-elem-put-prop-ref-user-err.js


var x={set y(val){throw new Test262Error}};assert.throws(Test262Error,function(){0,[x.y]=[23]});


var x={set y(val){throw new Test262Error}};assert.throws(Test262Error,function(){[x.y]=[23]});



test262/test/language/literals/regexp/S7.8.5_A1.3_T6.js


try{throw eval("/\u2029/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Paragraph separator is incorrect. Actual: "+eval("/\u2029/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: Paragraph separator is incorrect. Actual: "+e)}


try{throw eval("/\u2029/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Paragraph separator is incorrect. Actual: "+eval("/\u2029/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: Paragraph separator is incorrect. Actual: "+e)}



test262/test/language/expressions/object/accessor-name-literal-numeric-octal.js


var stringSet,obj={get[8](){return"get string"},set[8](param){stringSet=param}};assert.sameValue(obj["8"],"get string");obj["8"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get 8(){return"get string"},set 8(param){stringSet=param}};assert.sameValue(obj[8],"get string"),obj[8]="set string",assert.sameValue(stringSet,"set string");



test262/test/built-ins/parseFloat/S15.1.2.3_A2_T7.js


if(parseFloat("\n1.1")!==parseFloat("1.1"))throw new Test262Error('#1: parseFloat("\\u000A1.1") === parseFloat("1.1"). Actual: '+parseFloat("\n1.1"));if(parseFloat("\n\n-1.1")!==parseFloat("-1.1"))throw new Test262Error('#2: parseFloat("\\u000A\\u000A-1.1") === parseFloat("-1.1"). Actual: '+parseFloat("\n\n-1.1"));assert.sameValue(parseFloat("\n"),NaN);


if(parseFloat(`
1.1`)!==parseFloat("1.1"))throw new Test262Error('#1: parseFloat("\\u000A1.1") === parseFloat("1.1"). Actual: '+parseFloat(`
1.1`));if(parseFloat(`

-1.1`)!==parseFloat("-1.1"))throw new Test262Error('#2: parseFloat("\\u000A\\u000A-1.1") === parseFloat("-1.1"). Actual: '+parseFloat(`

-1.1`));assert.sameValue(parseFloat(`
`),NaN);



test262/test/language/literals/regexp/named-groups/invalid-lone-surrogate-groupname.js


assert.throws(SyntaxError,()=>eval("/(?<a\\ud801>.)/"),"Lead"),assert.throws(SyntaxError,()=>eval("/(?<a\\udca4>.)/"),"Trail"),assert.throws(SyntaxError,()=>eval("/(?<a\\ud801>.)/u"),"Lead with u flag"),assert.throws(SyntaxError,()=>eval("/(?<a\\udca4>.)/u"),"Trail with u flag");


assert.throws(SyntaxError,()=>eval("/(?<a\uD801>.)/"),"Lead"),assert.throws(SyntaxError,()=>eval("/(?<a\uDCA4>.)/"),"Trail"),assert.throws(SyntaxError,()=>eval("/(?<a\uD801>.)/u"),"Lead with u flag"),assert.throws(SyntaxError,()=>eval("/(?<a\uDCA4>.)/u"),"Trail with u flag");



test262/test/language/expressions/object/ident-name-prop-name-literal-extends-escaped.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/language/module-code/instn-iee-bndng-let.js


assert.throws(ReferenceError,function(){typeof B},"binding is created but not initialized");import{B,results}from"./instn-iee-bndng-let_FIXTURE.js";export let A;assert.sameValue(results.length,4);assert.sameValue(results[0],"ReferenceError");assert.sameValue(results[1],"undefined");assert.sameValue(results[2],"ReferenceError");assert.sameValue(results[3],"undefined");


assert.throws(ReferenceError,function(){B},"binding is created but not initialized");import{B,results}from"./instn-iee-bndng-let_FIXTURE.js";export let A;assert.sameValue(results.length,4),assert.sameValue(results[0],"ReferenceError"),assert.sameValue(results[1],"undefined"),assert.sameValue(results[2],"ReferenceError"),assert.sameValue(results[3],"undefined");



test262/test/language/literals/regexp/S7.8.5_A1.5_T2.js


try{throw eval("/\\\n/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+eval("/\\\n/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+e)}


try{throw eval(`/\\
/`).source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+eval(`/\\
/`).source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-default-escaped.js


var obj={default(){return 42}};assert.sameValue(obj["default"](),42,"property exists");


var obj={default(){return 42}};assert.sameValue(obj.default(),42,"property exists");



test262/test/language/literals/regexp/S7.8.5_A1.5_T6.js


try{throw eval("/\\\u2029/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+eval("/\\\u2029/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+e)}


try{throw eval("/\\\u2029/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+eval("/\\\u2029/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+e)}



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-return-escaped.js


var obj={return:42};assert.sameValue(obj["return"],42,"property exists");


var obj={return:42};assert.sameValue(obj.return,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-protected-escaped.js


var obj={protected(){return 42}};assert.sameValue(obj["protected"](),42,"property exists");


var obj={protected(){return 42}};assert.sameValue(obj.protected(),42,"property exists");



test262/test/language/expressions/object/accessor-name-literal-numeric-zero.js


var stringSet,obj={get[0](){return"get string"},set[0](param){stringSet=param}};assert.sameValue(obj["0"],"get string");obj["0"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get 0(){return"get string"},set 0(param){stringSet=param}};assert.sameValue(obj[0],"get string"),obj[0]="set string",assert.sameValue(stringSet,"set string");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-let-escaped.js


var obj={let:42};assert.sameValue(obj["let"],42,"property exists");


var obj={let:42};assert.sameValue(obj.let,42,"property exists");



test262/test/built-ins/Array/prototype/lastIndexOf/15.4.4.15-5-12.js


var arr=[];arr[Math.pow(2,32)-2]=null;assert.sameValue(arr.lastIndexOf(null,Infinity),Math.pow(2,32)-2,"arr.lastIndexOf(null, Infinity)");


var arr=[];arr[Math.pow(2,32)-2]=null,assert.sameValue(arr.lastIndexOf(null,1/0),Math.pow(2,32)-2,"arr.lastIndexOf(null, Infinity)");



test262/test/language/literals/regexp/S7.8.5_A2.3_T6.js


try{throw eval("/s\u2029/").source,new Test262Error("#1.1: RegularExpressionChar :: Paragraph separator is incorrect. Actual: "+eval("/s\u2029/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: Paragraph separator is incorrect. Actual: "+e)}


try{throw eval("/s\u2029/").source,new Test262Error("#1.1: RegularExpressionChar :: Paragraph separator is incorrect. Actual: "+eval("/s\u2029/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: Paragraph separator is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-new-escaped.js


var obj={new:42};assert.sameValue(obj["new"],42,"property exists");


var obj={new:42};assert.sameValue(obj.new,42,"property exists");



test262/test/language/module-code/instn-resolve-empty-import.js


$DONOTEVALUATE();import{}from"./instn-resolve-empty-import_FIXTURE.js";


$DONOTEVALUATE();import"./instn-resolve-empty-import_FIXTURE.js";



test262/test/language/expressions/assignment/dstr/array-rest-put-let.js


assert.throws(ReferenceError,function(){0,[...x]=[]});let x;


assert.throws(ReferenceError,function(){[...x]=[]});let x;



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-implements-escaped.js


var obj={implements:42};assert.sameValue(obj["implements"],42,"property exists");


var obj={implements:42};assert.sameValue(obj.implements,42,"property exists");



test262/test/language/literals/regexp/S7.8.5_A2.3_T2.js


try{throw eval("/a\n/").source,new Test262Error("#1.1: RegularExpressionChar :: Line Feedis incorrect. Actual: "+eval("/a\n/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: Line Feed is incorrect. Actual: "+e)}


try{throw eval(`/a
/`).source,new Test262Error("#1.1: RegularExpressionChar :: Line Feedis incorrect. Actual: "+eval(`/a
/`).source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: Line Feed is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-export-escaped.js


var obj={export:42};assert.sameValue(obj["export"],42,"property exists");


var obj={export:42};assert.sameValue(obj.export,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-finally-escaped.js


var obj={finally(){return 42}};assert.sameValue(obj["finally"](),42,"property exists");


var obj={finally(){return 42}};assert.sameValue(obj.finally(),42,"property exists");



test262/test/language/expressions/assignment/dstr/array-elision-val-undef.js


assert.throws(TypeError,function(){0,[,]=void 0});


assert.throws(TypeError,function(){[,]=void 0});



test262/test/language/literals/regexp/S7.8.5_A2.5_T6.js


try{throw eval("/a\\\u2029/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+eval("/a\\\u2029/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+e)}


try{throw eval("/a\\\u2029/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+eval("/a\\\u2029/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Paragraph separator is incorrect. Actual: "+e)}



test262/test/built-ins/Array/prototype/lastIndexOf/15.4.4.15-3-7.js


var obj={4:-1/0,5:Infinity,length:5-Math.pow(2,32)};assert.sameValue(Array.prototype.lastIndexOf.call(obj,-1/0),-1,"Array.prototype.lastIndexOf.call(obj, -Infinity)");assert.sameValue(Array.prototype.lastIndexOf.call(obj,Infinity),-1,"Array.prototype.lastIndexOf.call(obj, Infinity)");


var obj={4:-1/0,5:1/0,length:5-Math.pow(2,32)};assert.sameValue(Array.prototype.lastIndexOf.call(obj,-1/0),-1,"Array.prototype.lastIndexOf.call(obj, -Infinity)"),assert.sameValue(Array.prototype.lastIndexOf.call(obj,1/0),-1,"Array.prototype.lastIndexOf.call(obj, Infinity)");



test262/test/language/expressions/object/ident-name-prop-name-literal-const-escaped.js


var obj={const:42};assert.sameValue(obj["const"],42,"property exists");


var obj={const:42};assert.sameValue(obj.const,42,"property exists");



test262/test/language/literals/regexp/S7.8.5_A2.5_T2.js


try{throw eval("/a\\\n/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+eval("/a\\\n/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+e)}


try{throw eval(`/a\\
/`).source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+eval(`/a\\
/`).source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Line Feed is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-let-escaped.js


var obj={let:42};assert.sameValue(obj["let"],42,"property exists");


var obj={let:42};assert.sameValue(obj.let,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-new-escaped.js


var obj={new:42};assert.sameValue(obj["new"],42,"property exists");


var obj={new:42};assert.sameValue(obj.new,42,"property exists");



test262/test/language/expressions/assignment/dstr/array-elem-put-let.js


assert.throws(ReferenceError,function(){0,[x]=[]});let x;


assert.throws(ReferenceError,function(){[x]=[]});let x;



test262/test/language/expressions/object/ident-name-prop-name-literal-enum-escaped.js


var obj={enum:42};assert.sameValue(obj["enum"],42,"property exists");


var obj={enum:42};assert.sameValue(obj.enum,42,"property exists");



test262/test/language/literals/regexp/S7.8.5_A2.5_T5.js


try{throw eval("/a\\\u2028/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+eval("/a\\\u2028/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+e)}


try{throw eval("/a\\\u2028/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+eval("/a\\\u2028/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+e)}



test262/test/language/statements/with/12.10-2-4.js


try{with(void 0)x=2;throw new Test262Error("#2.1: with(undefined) x = 2 must throw TypeError. Actual: x === "+x)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: with(undefined) x = 2 must throw TypeError. Actual: "+e)}


try{with(void 0)x=2;throw new Test262Error("#2.1: with(undefined) x = 2 must throw TypeError. Actual: x === "+x)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: with(undefined) x = 2 must throw TypeError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-void-escaped.js


var obj={void(){return 42}};assert.sameValue(obj["void"](),42,"property exists");


var obj={void(){return 42}};assert.sameValue(obj.void(),42,"property exists");



test262/test/language/expressions/assignment/dstr/array-elem-nested-obj-null.js


var x;assert.throws(TypeError,function(){0,[{x}]=[null]});


var x;assert.throws(TypeError,function(){[{x}]=[null]});



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-default.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-import-escaped.js


var obj={import:42};assert.sameValue(obj["import"],42,"property exists");


var obj={import:42};assert.sameValue(obj.import,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-function-escaped.js


var obj={function:42};assert.sameValue(obj["function"],42,"property exists");


var obj={function:42};assert.sameValue(obj.function,42,"property exists");



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-this-escaped.js


var y={this:x}={this:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["this"],42,"assignment successful");


var y={this:x}={this:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.this,42,"assignment successful");



test262/test/language/literals/regexp/S7.8.5_A2.3_T4.js


try{throw eval("/a\r/").source,new Test262Error("#1.1: RegularExpressionChar :: Carriage Retur is incorrect. Actual: "+eval("/a\r/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: Carriage Retur is incorrect. Actual: "+e)}


try{throw eval("/a\r/").source,new Test262Error("#1.1: RegularExpressionChar :: Carriage Retur is incorrect. Actual: "+eval("/a\r/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: Carriage Retur is incorrect. Actual: "+e)}



test262/test/language/module-code/eval-gtbndng-local-bndng-const.js


const constBinding=89;assert.sameValue(constBinding,89);


const constBinding=89;assert.sameValue(89,89);



test262/test/language/expressions/object/ident-name-prop-name-literal-switch-escaped.js


var obj={switch:42};assert.sameValue(obj["switch"],42,"property exists");


var obj={switch:42};assert.sameValue(obj.switch,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-throw-escaped.js


var obj={throw(){return 42}};assert.sameValue(obj["throw"](),42,"property exists");


var obj={throw(){return 42}};assert.sameValue(obj.throw(),42,"property exists");



test262/test/language/literals/regexp/u-null-character-escape.js


var nullChar=String.fromCharCode(0);assert.sameValue(/\0/u.exec(nullChar)[0],nullChar);assert(/^\0a$/u.test("\0a"));assert.sameValue("\0②".match(/\0②/u)[0],"\0②");assert.sameValue("\0፬".search(/\0፬$/u),0);


var nullChar="\0";assert.sameValue(/\0/u.exec(nullChar)[0],nullChar),assert(/^\0a$/u.test("\0a")),assert.sameValue("\0\u2461".match(/\0②/u)[0],"\0\u2461"),assert.sameValue("\0\u136C".search(/\0፬$/u),0);



test262/test/language/expressions/assignment/dstr/ident-name-prop-name-literal-private-escaped.js


var y={private:x}={private:42};assert.sameValue(x,42,"property exists");assert.sameValue(y["private"],42,"assignment successful");


var y={private:x}={private:42};assert.sameValue(x,42,"property exists"),assert.sameValue(y.private,42,"assignment successful");



test262/test/language/literals/regexp/S7.8.5_A2.3_T5.js


try{throw eval("/a\u2028/").source,new Test262Error("#1.1: RegularExpressionChar :: Line separator is incorrect. Actual: "+eval("/a\u2028/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: Line separator is incorrect. Actual: "+e)}


try{throw eval("/a\u2028/").source,new Test262Error("#1.1: RegularExpressionChar :: Line separator is incorrect. Actual: "+eval("/a\u2028/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: Line separator is incorrect. Actual: "+e)}



test262/test/language/expressions/comma/S11.14_A2.1_T2.js


try{throw x,1,new Test262Error("#1.1: x, 1 throw ReferenceError. Actual: "+(x,1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x, 1 throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: x, 1 throw ReferenceError. Actual: "+(x,1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x, 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-for-escaped.js


var obj={for(){return 42}};assert.sameValue(obj["for"](),42,"property exists");


var obj={for(){return 42}};assert.sameValue(obj.for(),42,"property exists");



test262/test/language/literals/regexp/S7.8.5_A4.1.js


if(/(?:)/ instanceof RegExp!==!0)throw new Test262Error("#1: (/(?:)/ instanceof RegExp) === true. Actual: "+(/(?:)/ instanceof RegExp));


if(!(/(?:)/ instanceof RegExp))throw new Test262Error("#1: (/(?:)/ instanceof RegExp) === true. Actual: "+(/(?:)/ instanceof RegExp));



test262/test/language/expressions/comma/S11.14_A1.js


if(eval("false	,	true")!==!0)throw new Test262Error("#1: (false\\u0009,\\u0009true) === true");if(eval("false\v,\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B,\\u000Btrue) === true");if(eval("false\f,\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C,\\u000Ctrue) === true");if(eval("false , true")!==!0)throw new Test262Error("#4: (false\\u0020,\\u0020true) === true");if(eval("false\xA0,\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0,\\u00A0true) === true");if(eval("false\n,\ntrue")!==!0)throw new Test262Error("#6: (false\\u000A,\\u000Atrue) === true");if(eval("false\r,\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D,\\u000Dtrue) === true");if(eval("false\u2028,\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028,\\u2028true) === true");if(eval("false\u2029,\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029,\\u2029true) === true");if(eval("false	\v\f \xA0\n\r\u2028\u2029,	\v\f \xA0\n\r\u2028\u2029true")!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029,\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");


if(eval("false	,	true")!==!0)throw new Test262Error("#1: (false\\u0009,\\u0009true) === true");if(eval("false\v,\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B,\\u000Btrue) === true");if(eval("false\f,\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C,\\u000Ctrue) === true");if(eval("false , true")!==!0)throw new Test262Error("#4: (false\\u0020,\\u0020true) === true");if(eval("false\xA0,\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0,\\u00A0true) === true");if(eval(`false
,
true`)!==!0)throw new Test262Error("#6: (false\\u000A,\\u000Atrue) === true");if(eval("false\r,\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D,\\u000Dtrue) === true");if(eval("false\u2028,\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028,\\u2028true) === true");if(eval("false\u2029,\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029,\\u2029true) === true");if(eval(`false	\v\f \xA0
\r\u2028\u2029,	\v\f \xA0
\r\u2028\u2029true`)!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029,\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");



test262/test/language/expressions/object/ident-name-prop-name-literal-implements-escaped.js


var obj={implements:42};assert.sameValue(obj["implements"],42,"property exists");


var obj={implements:42};assert.sameValue(obj.implements,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-package-escaped.js


var obj={package:42};assert.sameValue(obj["package"],42,"property exists");


var obj={package:42};assert.sameValue(obj.package,42,"property exists");



test262/test/language/expressions/comma/S11.14_A2.1_T3.js


try{throw 1,y,new Test262Error("#1.1: 1, y throw ReferenceError. Actual: "+(1,y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1, y throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: 1, y throw ReferenceError. Actual: "+y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1, y throw ReferenceError. Actual: "+e)}



test262/test/language/literals/regexp/S7.8.5_A2.5_T4.js


try{throw eval("/a\\\r/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+eval("/a\\\r/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+e)}


try{throw eval("/a\\\r/").source,new Test262Error("#1.1: RegularExpressionChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+eval("/a\\\r/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-return-escaped.js


var obj={return:42};assert.sameValue(obj["return"],42,"property exists");


var obj={return:42};assert.sameValue(obj.return,42,"property exists");



test262/test/language/statements/variable/S12.2_A6_T1.js


try{intry__var=intry__var}catch(e){throw new Test262Error('#1: Variable declaration inside "try" block is admitted')}try{incatch__var=incatch__var}catch(e){throw new Test262Error('#2: Variable declaration inside "catch" block is admitted')}try{var intry__var}catch(e){var incatch__var}


try{intry__var=intry__var}catch{throw new Test262Error('#1: Variable declaration inside "try" block is admitted')}try{incatch__var=incatch__var}catch{throw new Test262Error('#2: Variable declaration inside "catch" block is admitted')}try{var intry__var}catch{var incatch__var}



test262/test/language/literals/regexp/S7.8.5_A1.3_T4.js


try{throw eval("/\r/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Carriage Return is incorrect. Actual: "+eval("/\r/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: Carriage Return is incorrect. Actual: "+e)}


try{throw eval("/\r/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Carriage Return is incorrect. Actual: "+eval("/\r/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: Carriage Return is incorrect. Actual: "+e)}



test262/test/language/statements/variable/S12.2_A2.js


if(delete __variable)throw new Test262Error("#1: delete(__variable)===false");if(delete this["__variable"])throw new Test262Error('#2: delete(this["__variable"])===false');var __variable,__variable="defined";if(delete __variable|delete this["__variable"])throw new Test262Error('#3: (delete(__variable) | delete(this["__variable"]))===false');if(__variable!=="defined"|this["__variable"]!=="defined")throw new Test262Error('#4: __variable === "defined" and this["__variable"] ==="defined"');


if(delete __variable)throw new Test262Error("#1: delete(__variable)===false");if(delete this.__variable)throw new Test262Error('#2: delete(this["__variable"])===false');var __variable,__variable="defined";if(delete __variable|delete this.__variable)throw new Test262Error('#3: (delete(__variable) | delete(this["__variable"]))===false');if(__variable!=="defined"|this.__variable!=="defined")throw new Test262Error('#4: __variable === "defined" and this["__variable"] ==="defined"');



test262/test/language/expressions/exponentiation/applying-the-exp-operator_A17.js


var base=0,exponents=[];exponents[3]=Infinity;exponents[2]=17976931348623157e292;exponents[1]=1;exponents[0]=1e-15;for(var i=0;i<exponents.length;i++)if(base**exponents[i]!==0)throw new Test262Error("("+base+" **  "+exponents[i]+") !== +0");


var base=0,exponents=[];exponents[3]=1/0,exponents[2]=17976931348623157e292,exponents[1]=1,exponents[0]=1e-15;for(var i=0;i<exponents.length;i++)if(base**exponents[i]!==0)throw new Test262Error("("+base+" **  "+exponents[i]+") !== +0");



test262/test/language/literals/regexp/S7.8.5_A1.5_T5.js


try{throw eval("/\\\u2028/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+eval("/\\\u2028/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+e)}


try{throw eval("/\\\u2028/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+eval("/\\\u2028/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Line separator is incorrect. Actual: "+e)}



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-export-escaped.js


var obj={export:42};assert.sameValue(obj["export"],42,"property exists");


var obj={export:42};assert.sameValue(obj.export,42,"property exists");



test262/test/language/literals/regexp/y-assertion-start.js


var re;re=/^a/y;re.lastIndex=0;assert.sameValue(re.test("a"),!0,"positive: beginning of input (without `m`)");re.lastIndex=1;assert.sameValue(re.test(" a"),!1,"negative: within a line (without `m`)");re.lastIndex=1;assert.sameValue(re.test("\na"),!1,"negative: beginning of line (without `m`)");re=/^a/my;re.lastIndex=0;assert.sameValue(re.test("a"),!0,"positive: beginning of input (with `m`)");re.lastIndex=1;assert.sameValue(re.test(" a"),!1,"negative: within a line (with `m`)");re.lastIndex=1;assert.sameValue(re.test("\na"),!0,"positive: beginning of line (with `m`)");


var re;re=/^a/y,re.lastIndex=0,assert.sameValue(re.test("a"),!0,"positive: beginning of input (without `m`)"),re.lastIndex=1,assert.sameValue(re.test(" a"),!1,"negative: within a line (without `m`)"),re.lastIndex=1,assert.sameValue(re.test(`
a`),!1,"negative: beginning of line (without `m`)"),re=/^a/my,re.lastIndex=0,assert.sameValue(re.test("a"),!0,"positive: beginning of input (with `m`)"),re.lastIndex=1,assert.sameValue(re.test(" a"),!1,"negative: within a line (with `m`)"),re.lastIndex=1,assert.sameValue(re.test(`
a`),!0,"positive: beginning of line (with `m`)");



test262/test/language/literals/regexp/S7.8.5_A1.5_T4.js


try{throw eval("/\\\r/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+eval("/\\\r/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+e)}


try{throw eval("/\\\r/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+eval("/\\\r/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: BackslashSequence :: \\Carriage Return is incorrect. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-debugger-escaped.js


var obj={debugger:42};assert.sameValue(obj["debugger"],42,"property exists");


var obj={debugger:42};assert.sameValue(obj.debugger,42,"property exists");



test262/test/language/module-code/instn-named-err-ambiguous.js


$DONOTEVALUATE();import{x}from"./instn-named-err-ambiguous_FIXTURE.js";


$DONOTEVALUATE();import"./instn-named-err-ambiguous_FIXTURE.js";



test262/test/language/literals/regexp/S7.8.5_A1.3_T5.js


try{throw eval("/\u2028/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Line separator is incorrect. Actual: "+eval("/\u2028/").source)}catch(e){if(e instanceof SyntaxError!==!0)throw new Test262Error("#1.2: RegularExpressionFirstChar :: Line separator is incorrect. Actual: "+e)}


try{throw eval("/\u2028/").source,new Test262Error("#1.1: RegularExpressionFirstChar :: Line separator is incorrect. Actual: "+eval("/\u2028/").source)}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("#1.2: RegularExpressionFirstChar :: Line separator is incorrect. Actual: "+e)}



test262/test/language/expressions/object/S11.1.5_A4.3.js


var object={undefined:!0};if(object.undefined!==!0)throw new Test262Error("#1: var object = {undefined : true}; object.undefined === true");var object={undefined:!0};if(object["undefined"]!==!0)throw new Test262Error('#2: var object = {undefined : true}; object["undefined"] === true');var object={true:!0};if(object["true"]!==!0)throw new Test262Error('#3: var object = {"true" : true}; object["true"] === true');var object={null:!0};if(object["null"]!==!0)throw new Test262Error('#4: var object = {"null" : true}; object["null"] === true');


var object={undefined:!0};if(object.undefined!==!0)throw new Test262Error("#1: var object = {undefined : true}; object.undefined === true");var object={undefined:!0};if(object.undefined!==!0)throw new Test262Error('#2: var object = {undefined : true}; object["undefined"] === true');var object={true:!0};if(object.true!==!0)throw new Test262Error('#3: var object = {"true" : true}; object["true"] === true');var object={null:!0};if(object.null!==!0)throw new Test262Error('#4: var object = {"null" : true}; object["null"] === true');



test262/test/language/expressions/object/ident-name-method-def-continue-escaped.js


var obj={continue(){return 42}};assert.sameValue(obj["continue"](),42,"property exists");


var obj={continue(){return 42}};assert.sameValue(obj.continue(),42,"property exists");



test262/test/language/module-code/top-level-await/module-import-rejection-tick.js


import foo from"./module-import-rejection-tick_FIXTURE.js";throw new Test262Error("this should be unreachable");


import"./module-import-rejection-tick_FIXTURE.js";throw new Test262Error("this should be unreachable");



test262/test/language/expressions/object/accessor-name-computed.js


var _,stringSet,obj={get[[_="string"]](){return"get string"},set[[_="string"]](param){stringSet=param}};assert.sameValue(obj["string"],"get string");obj["string"]="set string";assert.sameValue(stringSet,"set string");


var _,stringSet,obj={get[[_="string"]](){return"get string"},set[[_="string"]](param){stringSet=param}};assert.sameValue(obj.string,"get string"),obj.string="set string",assert.sameValue(stringSet,"set string");



test262/test/built-ins/WeakRef/prototype/deref/this-does-not-have-internal-target-throws.js


assert.sameValue(typeof WeakRef.prototype.deref,"function");var deref=WeakRef.prototype.deref;assert.throws(TypeError,function(){deref.call({["[[Target]]"]:{}})},"Ordinary object without [[Target]]");assert.throws(TypeError,function(){deref.call(WeakRef.prototype)},"WeakRef.prototype does not have a [[Target]] internal slot");assert.throws(TypeError,function(){deref.call(WeakRef)},"WeakRef does not have a [[Target]] internal slot");var finalizationRegistry=new FinalizationRegistry(function(){});assert.throws(TypeError,function(){deref.call(finalizationRegistry)},"FinalizationRegistry instance");var wm=new WeakMap;assert.throws(TypeError,function(){deref.call(wm)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){deref.call(ws)},"WeakSet instance");


assert.sameValue(typeof WeakRef.prototype.deref,"function");var deref=WeakRef.prototype.deref;assert.throws(TypeError,function(){deref.call({"[[Target]]":{}})},"Ordinary object without [[Target]]"),assert.throws(TypeError,function(){deref.call(WeakRef.prototype)},"WeakRef.prototype does not have a [[Target]] internal slot"),assert.throws(TypeError,function(){deref.call(WeakRef)},"WeakRef does not have a [[Target]] internal slot");var finalizationRegistry=new FinalizationRegistry(function(){});assert.throws(TypeError,function(){deref.call(finalizationRegistry)},"FinalizationRegistry instance");var wm=new WeakMap;assert.throws(TypeError,function(){deref.call(wm)},"WeakMap instance");var ws=new WeakSet;assert.throws(TypeError,function(){deref.call(ws)},"WeakSet instance");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-continue-escaped.js


var obj={continue:42};assert.sameValue(obj["continue"],42,"property exists");


var obj={continue:42};assert.sameValue(obj.continue,42,"property exists");



test262/test/language/expressions/exponentiation/exp-operator-evaluation-order.js


var capture=[],leftValue={valueOf(){return capture.push("leftValue"),3}},rightValue={valueOf(){return capture.push("rightValue"),2}};(capture.push("left"),leftValue)**(capture.push("right"),rightValue);assert.sameValue(capture[0],"left","Expected the 1st element captured to be 'left'");assert.sameValue(capture[1],"right","Expected the 2nd element captured to be 'right'");assert.sameValue(capture[2],"leftValue","Expected the 3rd element captured to be 'leftValue'");assert.sameValue(capture[3],"rightValue","Expected the 4th element captured to be 'rightValue'");


var capture=[],leftValue={valueOf(){return capture.push("leftValue"),3}},rightValue={valueOf(){return capture.push("rightValue"),2}};capture.push("left"),leftValue**(capture.push("right"),rightValue),assert.sameValue(capture[0],"left","Expected the 1st element captured to be 'left'"),assert.sameValue(capture[1],"right","Expected the 2nd element captured to be 'right'"),assert.sameValue(capture[2],"leftValue","Expected the 3rd element captured to be 'leftValue'"),assert.sameValue(capture[3],"rightValue","Expected the 4th element captured to be 'rightValue'");



test262/test/language/expressions/object/ident-name-method-def-class-escaped.js


var obj={class(){return 42}};assert.sameValue(obj["class"](),42,"property exists");


var obj={class(){return 42}};assert.sameValue(obj.class(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-typeof-escaped.js


var obj={typeof(){return 42}};assert.sameValue(obj["typeof"](),42,"property exists");


var obj={typeof(){return 42}};assert.sameValue(obj.typeof(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-super-escaped.js


var obj={super(){return 42}};assert.sameValue(obj["super"](),42,"property exists");


var obj={super(){return 42}};assert.sameValue(obj.super(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-extends-escaped-ext.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-enum-escaped.js


var obj={enum(){return 42}};assert.sameValue(obj["enum"](),42,"property exists");


var obj={enum(){return 42}};assert.sameValue(obj.enum(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-break-escaped.js


var obj={break(){return 42}};assert.sameValue(obj["break"](),42,"property exists");


var obj={break(){return 42}};assert.sameValue(obj.break(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-delete-escaped.js


var obj={delete(){return 42}};assert.sameValue(obj["delete"](),42,"property exists");


var obj={delete(){return 42}};assert.sameValue(obj.delete(),42,"property exists");



test262/test/language/expressions/exponentiation/bigint-and-number.js


assert.throws(TypeError,function(){1n**1},"1n ** 1 throws TypeError"),assert.throws(TypeError,function(){1**1n},"1 ** 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)**1},"Object(1n) ** 1 throws TypeError"),assert.throws(TypeError,function(){1**Object(1n)},"1 ** Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n**Object(1)},"1n ** Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)**1n},"Object(1) ** 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)**Object(1)},"Object(1n) ** Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)**Object(1n)},"Object(1) ** Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n**NaN},"1n ** NaN throws TypeError"),assert.throws(TypeError,function(){NaN**1n},"NaN ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**Infinity},"1n ** Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity**1n},"Infinity ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**1},"1n ** true throws TypeError"),assert.throws(TypeError,function(){(!0)**1n},"true ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**"1"},'1n ** "1" throws TypeError'),assert.throws(TypeError,function(){"1"**1n},'"1" ** 1n throws TypeError'),assert.throws(TypeError,function(){1n**null},"1n ** null throws TypeError"),assert.throws(TypeError,function(){null**1n},"null ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**void 0},"1n ** undefined throws TypeError"),assert.throws(TypeError,function(){(void 0)**1n},"undefined ** 1n throws TypeError");


assert.throws(TypeError,function(){1n**1},"1n ** 1 throws TypeError"),assert.throws(TypeError,function(){1**1n},"1 ** 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)**1},"Object(1n) ** 1 throws TypeError"),assert.throws(TypeError,function(){1**Object(1n)},"1 ** Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n**Object(1)},"1n ** Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)**1n},"Object(1) ** 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)**Object(1)},"Object(1n) ** Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)**Object(1n)},"Object(1) ** Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n**NaN},"1n ** NaN throws TypeError"),assert.throws(TypeError,function(){NaN**1n},"NaN ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**(1/0)},"1n ** Infinity throws TypeError"),assert.throws(TypeError,function(){(1/0)**1n},"Infinity ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**!0},"1n ** true throws TypeError"),assert.throws(TypeError,function(){(!0)**1n},"true ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**"1"},'1n ** "1" throws TypeError'),assert.throws(TypeError,function(){"1"**1n},'"1" ** 1n throws TypeError'),assert.throws(TypeError,function(){1n**null},"1n ** null throws TypeError"),assert.throws(TypeError,function(){null**1n},"null ** 1n throws TypeError"),assert.throws(TypeError,function(){1n**void 0},"1n ** undefined throws TypeError"),assert.throws(TypeError,function(){(void 0)**1n},"undefined ** 1n throws TypeError");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-static-escaped.js


var obj={static:42};assert.sameValue(obj["static"],42,"property exists");


var obj={static:42};assert.sameValue(obj.static,42,"property exists");



test262/test/built-ins/Number/string-numeric-separator-literal-dd-dot-dd-ep-sign-minus-dd-nsl-dd.js


assert.sameValue(Number("1.0e-1_0"),NaN,"1.0e-1_0");


assert.sameValue(+"1.0e-1_0",NaN,"1.0e-1_0");



test262/test/language/expressions/object/prop-def-id-eval-error.js


var obj={attr:null,get[Symbol.unscopables](){throw new Test262Error}};assert.throws(Test262Error,function(){with(obj)({attr})});


var obj={attr:null,get[Symbol.unscopables](){throw new Test262Error}};assert.throws(Test262Error,function(){with(obj)attr});



test262/test/language/module-code/top-level-await/module-import-rejection-body.js


import foo from"./module-import-rejection-body_FIXTURE.js";throw new Test262Error("this should be unreachable");


import"./module-import-rejection-body_FIXTURE.js";throw new Test262Error("this should be unreachable");



test262/test/language/expressions/exponentiation/applying-the-exp-operator_A11.js


var base=1/0,exponents=[];exponents[3]=Infinity;exponents[2]=17976931348623157e292;exponents[1]=1;exponents[0]=1e-15;for(var i=0;i<exponents.length;i++)if(base**exponents[i]!==1/0)throw new Test262Error("("+base+" ** "+exponents[i]+") !== +Infinity");


var base=1/0,exponents=[];exponents[3]=1/0,exponents[2]=17976931348623157e292,exponents[1]=1,exponents[0]=1e-15;for(var i=0;i<exponents.length;i++)if(base**exponents[i]!==1/0)throw new Test262Error("("+base+" ** "+exponents[i]+") !== +Infinity");



test262/test/language/module-code/top-level-await/void-await-expr.js


var got=0,x={get y(){got+=1}};void await x.y;assert.sameValue(got,1);$DONE();


var got=0,x={get y(){got+=1}};await x.y,assert.sameValue(got,1),$DONE();



test262/test/language/module-code/top-level-await/syntax/try-await-expr-literal-number.js


try{await 1}catch(e){await 1}try{await 1}finally{await 1}try{await 1}catch(e){await 1}finally{await 1}


try{await 1}catch{await 1}try{await 1}finally{await 1}try{await 1}catch{await 1}finally{await 1}



test262/test/built-ins/Number/POSITIVE_INFINITY/value.js


assert.sameValue(Number.POSITIVE_INFINITY,Infinity);


assert.sameValue(Number.POSITIVE_INFINITY,1/0);



test262/test/language/module-code/top-level-await/syntax/try-await-expr-template-literal.js


try{await""}catch(e){await""}try{await""}finally{await""}try{await""}catch(e){await""}finally{await""}


try{await""}catch{await""}try{await""}finally{await""}try{await""}catch{await""}finally{await""}



test262/test/language/module-code/top-level-await/syntax/void-await-expr-func-expression.js


void await function(){};


await function(){};



test262/test/built-ins/Number/S9.3.1_A1.js


assert.sameValue(Number(""),0,'Number("") must return 0');


assert.sameValue(0,0,'Number("") must return 0');



test262/test/built-ins/Number/string-numeric-separator-literal-nzd-nsl-dds.js


assert.sameValue(Number("1_0123456789"),NaN,"1_0123456789");


assert.sameValue(+"1_0123456789",NaN,"1_0123456789");



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-literal-string.js


typeof await"";


await"";



test262/test/language/module-code/top-level-await/syntax/if-expr-await-expr-template-literal.js


if(await""){}


await"";



test262/test/language/module-code/top-level-await/syntax/void-await-expr-literal-string.js


void await"";


await"";



test262/test/built-ins/Number/isSafeInteger/infinity.js


assert.sameValue(Number.isSafeInteger(Infinity),!1,"Infinity"),assert.sameValue(Number.isSafeInteger(-1/0),!1,"-Infinity");


assert.sameValue(Number.isSafeInteger(1/0),!1,"Infinity"),assert.sameValue(Number.isSafeInteger(-1/0),!1,"-Infinity");



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-literal-string.js


export var name1=await"";export var{x=await""}={};


export var name1=await"",{x=await""}={};



test262/test/built-ins/Array/prototype/lastIndexOf/15.4.4.15-1-14.js


var obj=new SyntaxError;obj.length=2;obj[1]=Infinity;assert.sameValue(Array.prototype.lastIndexOf.call(obj,Infinity),1,"Array.prototype.lastIndexOf.call(obj, Infinity)");


var obj=new SyntaxError;obj.length=2,obj[1]=1/0,assert.sameValue(Array.prototype.lastIndexOf.call(obj,1/0),1,"Array.prototype.lastIndexOf.call(obj, Infinity)");



test262/test/built-ins/Number/S9.3.1_A14.js


assert.sameValue(Number("+1234567890"),1234567890,'Number("+1234567890") must return 1234567890');


assert.sameValue(+"+1234567890",1234567890,'Number("+1234567890") must return 1234567890');



test262/test/language/module-code/top-level-await/syntax/try-await-expr-nested.js


try{await await await await await await await await await await await await await await await"await"}catch(e){await await await await await await await await await await await await await await await"await"}try{await await await await await await await await await await await await await await await"await"}finally{await await await await await await await await await await await await await await await"await"}try{await await await await await await await await await await await await await await await"await"}catch(e){await await await await await await await await await await await await await await await"await"}finally{await await await await await await await await await await await await await await await"await"}


try{await await await await await await await await await await await await await await await"await"}catch{await await await await await await await await await await await await await await await"await"}try{await await await await await await await await await await await await await await await"await"}finally{await await await await await await await await await await await await await await await"await"}try{await await await await await await await await await await await await await await await"await"}catch{await await await await await await await await await await await await await await await"await"}finally{await await await await await await await await await await await await await await await"await"}



test262/test/language/module-code/top-level-await/syntax/typeof-await-expr-new-expr.js


typeof await new Promise(function(res,rej){res(1)});


await new Promise(function(res,rej){res(1)});



test262/test/language/module-code/top-level-await/syntax/try-await-expr-func-expression.js


try{await function(){}}catch(e){await function(){}}try{await function(){}}finally{await function(){}}try{await function(){}}catch(e){await function(){}}finally{await function(){}}


try{await function(){}}catch{await function(){}}try{await function(){}}finally{await function(){}}try{await function(){}}catch{await function(){}}finally{await function(){}}



test262/test/built-ins/Number/string-numeric-separator-literal-dot-dds-nsl-dds-ep.js


assert.sameValue(Number(".00_01e2"),NaN,".00_01e2");


assert.sameValue(+".00_01e2",NaN,".00_01e2");



test262/test/language/module-code/top-level-await/syntax/try-await-expr-null.js


try{await null}catch(e){await null}try{await null}finally{await null}try{await null}catch(e){await null}finally{await null}


try{await null}catch{await null}try{await null}finally{await null}try{await null}catch{await null}finally{await null}



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-identifier.js


var foo=1;export var name1=await foo;export var{x=await foo}={};


var foo=1;export var name1=await foo,{x=await foo}={};



test262/test/language/module-code/top-level-await/syntax/try-await-expr-identifier.js


var foo=1;try{await foo}catch(e){await foo}try{await foo}finally{await foo}try{await foo}catch(e){await foo}finally{await foo}


var foo=1;try{await foo}catch{await foo}try{await foo}finally{await foo}try{await foo}catch{await foo}finally{await foo}



test262/test/built-ins/Number/isNaN/not-nan.js


assert.sameValue(Number.isNaN(0),!1,"0"),assert.sameValue(Number.isNaN(-0),!1,"-0"),assert.sameValue(Number.isNaN(1),!1,"1"),assert.sameValue(Number.isNaN(-1),!1,"-1"),assert.sameValue(Number.isNaN(1.1),!1,"1.1"),assert.sameValue(Number.isNaN(1e10),!1,"1e10"),assert.sameValue(Number.isNaN(Infinity),!1,"Infinity"),assert.sameValue(Number.isNaN(-1/0),!1,"-Infinity");


assert.sameValue(Number.isNaN(0),!1,"0"),assert.sameValue(Number.isNaN(-0),!1,"-0"),assert.sameValue(Number.isNaN(1),!1,"1"),assert.sameValue(Number.isNaN(-1),!1,"-1"),assert.sameValue(Number.isNaN(1.1),!1,"1.1"),assert.sameValue(Number.isNaN(1e10),!1,"1e10"),assert.sameValue(Number.isNaN(1/0),!1,"Infinity"),assert.sameValue(Number.isNaN(-1/0),!1,"-Infinity");



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-this.js


export var name1=await this;export var{x=await this}={};


export var name1=await void 0,{x=await void 0}={};



test262/test/language/module-code/top-level-await/syntax/export-var-await-expr-obj-literal.js


export var name1=await{function(){}};export var{x=await{function(){}}}={};


export var name1=await{function(){}},{x=await{function(){}}}={};



test262/test/language/module-code/top-level-await/syntax/try-await-expr-array-literal.js


try{await[]}catch(e){await[]}try{await[]}finally{await[]}try{await[]}catch(e){await[]}finally{await[]}


try{await[]}catch{await[]}try{await[]}finally{await[]}try{await[]}catch{await[]}finally{await[]}



test262/test/language/computed-property-names/object/accessor/getter.js


var s=Symbol(),A={get["a"](){return"A"},get[1](){return 1},get[s](){return s}};assert.sameValue(A.a,"A","The value of `A.a` is `'A'`");assert.sameValue(A[1],1,"The value of `A[1]` is `1`");assert.sameValue(A[s],s,"The value of `A[s]` is `Symbol()`");


var s=Symbol(),A={get a(){return"A"},get 1(){return 1},get[s](){return s}};assert.sameValue(A.a,"A","The value of `A.a` is `'A'`"),assert.sameValue(A[1],1,"The value of `A[1]` is `1`"),assert.sameValue(A[s],s,"The value of `A[s]` is `Symbol()`");



test262/test/language/computed-property-names/object/accessor/setter.js


var calls=0,s=Symbol(),A={set["a"](_){calls++},set[1](_){calls++},set[s](_){calls++}};A.a="A";A[1]=1;A[s]=s;assert.sameValue(calls,3,"The value of `calls` is `1`, after executing `A.a = 'A'; A[1] = 1; A[s] = s;`");


var calls=0,s=Symbol(),A={set a(_){calls++},set 1(_){calls++},set[s](_){calls++}};A.a="A",A[1]=1,A[s]=s,assert.sameValue(calls,3,"The value of `calls` is `1`, after executing `A.a = 'A'; A[1] = 1; A[s] = s;`");



test262/test/built-ins/Number/string-numeric-separator-literal-dot-dd-nsl-dds-ep.js


assert.sameValue(Number(".1_01e2"),NaN,".1_01e2");


assert.sameValue(+".1_01e2",NaN,".1_01e2");



test262/test/language/statements/for-of/dstr/obj-prop-name-evaluation.js


var x,y,xy,counter=0;for({["xy"]:x}of[{x:1,xy:23,y:2}])assert.sameValue(x,23),assert.sameValue(y,void 0),assert.sameValue(xy,void 0),counter+=1;assert.sameValue(counter,1);


var x,y,xy,counter=0;for({xy:x}of[{x:1,xy:23,y:2}])assert.sameValue(x,23),assert.sameValue(y,void 0),assert.sameValue(xy,void 0),counter+=1;assert.sameValue(counter,1);



test262/test/built-ins/Number/S9.3.1_A11.js


assert.sameValue(123450,123450),assert.sameValue(Number(".12345e-3"),12345e-8);


assert.sameValue(12345*10,123450),assert.sameValue(+".12345e-3",12345e-8);



test262/test/language/computed-property-names/object/method/generator.js


var object={*["a"](){yield 1,yield 2}};assert.compareArray(Object.keys(object),["a"]);


var object={*a(){yield 1,yield 2}};assert.compareArray(Object.keys(object),["a"]);



test262/test/built-ins/Array/prototype/some/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.some.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch(_){expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (shrink)");assert.compareArray(indices,expectedIndices,"indices (shrink)");assert.compareArray(arrays,expectedArrays,"arrays (shrink)");assert.sameValue(result,!1,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.some.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,!1,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.some.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(2*BPE),expectedElements=[0,0],expectedIndices=[0,1],expectedArrays=[sample,sample]}catch{expectedElements=[0,0,0],expectedIndices=[0,1,2],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (shrink)"),assert.compareArray(indices,expectedIndices,"indices (shrink)"),assert.compareArray(arrays,expectedArrays,"arrays (shrink)"),assert.sameValue(result,!1,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.some.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,!1,"result (grow)")});



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.9.js


try{var x=1,z=x&=y;throw new Test262Error("#1.1: var x = 1; x &= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x &= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x&=y;throw new Test262Error("#1.1: var x = 1; x &= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x &= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.3.js


try{var z=x%=1;throw new Test262Error("#1.1: x %= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x %= 1 throw ReferenceError. Actual: "+e)}


try{var z=x%=1;throw new Test262Error("#1.1: x %= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x %= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.2.js


try{var x=1,z=x/=y;throw new Test262Error("#1.1: var x = 1; x /= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x /= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x/=y;throw new Test262Error("#1.1: var x = 1; x /= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x /= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.11.js


try{var z=x|=1;throw new Test262Error("#1.1: x |= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x |= 1 throw ReferenceError. Actual: "+e)}


try{var z=x|=1;throw new Test262Error("#1.1: x |= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x |= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.7.js


try{var z=x>>=1;throw new Test262Error("#1.1: x >>= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >>= 1 throw ReferenceError. Actual: "+e)}


try{var z=x>>=1;throw new Test262Error("#1.1: x >>= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >>= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.6.js


try{var x=1,z=x<<=y;throw new Test262Error("#1.1: var x = 1; x <<= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x <<= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x<<=y;throw new Test262Error("#1.1: var x = 1; x <<= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x <<= y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Number/prototype/toString/numeric-literal-tostring-radix-poisoned.js


var poisoned={valueOf(){throw new Test262Error}};assert.throws(Test262Error,()=>{0 .toString(poisoned)});assert.throws(Test262Error,()=>{1 .toString(poisoned)});assert.throws(Test262Error,()=>{NaN.toString(poisoned)});assert.throws(Test262Error,()=>{Infinity.toString(poisoned)});


var poisoned={valueOf(){throw new Test262Error}};assert.throws(Test262Error,()=>{0 .toString(poisoned)}),assert.throws(Test262Error,()=>{1 .toString(poisoned)}),assert.throws(Test262Error,()=>{NaN.toString(poisoned)}),assert.throws(Test262Error,()=>{(1/0).toString(poisoned)});



test262/test/built-ins/Number/prototype/toString/numeric-literal-tostring-radix-37.js


assert.throws(RangeError,()=>{0 .toString(37)}),assert.throws(RangeError,()=>{1 .toString(37)}),assert.throws(RangeError,()=>{NaN.toString(37)}),assert.throws(RangeError,()=>{Infinity.toString(37)});


assert.throws(RangeError,()=>{0 .toString(37)}),assert.throws(RangeError,()=>{1 .toString(37)}),assert.throws(RangeError,()=>{NaN.toString(37)}),assert.throws(RangeError,()=>{(1/0).toString(37)});



test262/test/language/arguments-object/meth-args-trailing-comma-spread-operator.js


var arr=[2,3],callCount=0,obj={method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}};obj.method(42,...[1],...arr);var ref=obj.method;assert.sameValue(callCount,1,"method invoked exactly once");


var arr=[2,3],callCount=0,obj={method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}};obj.method(42,1,...arr);var ref=obj.method;assert.sameValue(callCount,1,"method invoked exactly once");



test262/test/built-ins/Number/prototype/toString/numeric-literal-tostring-radix-1.js


assert.throws(RangeError,()=>{0 .toString(1)}),assert.throws(RangeError,()=>{1 .toString(1)}),assert.throws(RangeError,()=>{NaN.toString(1)}),assert.throws(RangeError,()=>{Infinity.toString(1)});


assert.throws(RangeError,()=>{0 .toString(1)}),assert.throws(RangeError,()=>{1 .toString(1)}),assert.throws(RangeError,()=>{NaN.toString(1)}),assert.throws(RangeError,()=>{(1/0).toString(1)});



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.10.js


try{var z=x^=1;throw new Test262Error("#1.1: x ^= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x ^= 1 throw ReferenceError. Actual: "+e)}


try{var z=x^=1;throw new Test262Error("#1.1: x ^= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x ^= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.6.js


try{var z=x<<=1;throw new Test262Error("#1.1: x <<= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x <<= 1 throw ReferenceError. Actual: "+e)}


try{var z=x<<=1;throw new Test262Error("#1.1: x <<= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x <<= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.7.js


try{var x=1,z=x>>=y;throw new Test262Error("#1.1: var x = 1; x >>= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x >>= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x>>=y;throw new Test262Error("#1.1: var x = 1; x >>= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x >>= y throw ReferenceError. Actual: "+e)}



test262/test/language/statements/labeled/value-yield-non-strict-escaped.js


yield:;





test262/test/language/statements/labeled/value-yield-non-strict.js


yield:;





test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.2.js


try{var z=x/=1;throw new Test262Error("#1.1: x /= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x /= 1 throw ReferenceError. Actual: "+e)}


try{var z=x/=1;throw new Test262Error("#1.1: x /= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x /= 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Array/prototype/findLast/return-undefined-if-predicate-returns-false-value.js


var arr=["Shoes","Car","Bike"],called=0,result=arr.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times");assert.sameValue(result,void 0);result=arr.findLast(function(){return""});assert.sameValue(result,void 0,"coerced string");result=arr.findLast(function(){return});assert.sameValue(result,void 0,"coerced undefined");result=arr.findLast(function(){return null});assert.sameValue(result,void 0,"coerced null");result=arr.findLast(function(){return 0});assert.sameValue(result,void 0,"coerced 0");result=arr.findLast(function(){return NaN});assert.sameValue(result,void 0,"coerced NaN");


var arr=["Shoes","Car","Bike"],called=0,result=arr.findLast(function(){return called++,!1});assert.sameValue(called,3,"predicate was called three times"),assert.sameValue(result,void 0),result=arr.findLast(function(){return""}),assert.sameValue(result,void 0,"coerced string"),result=arr.findLast(function(){}),assert.sameValue(result,void 0,"coerced undefined"),result=arr.findLast(function(){return null}),assert.sameValue(result,void 0,"coerced null"),result=arr.findLast(function(){return 0}),assert.sameValue(result,void 0,"coerced 0"),result=arr.findLast(function(){return NaN}),assert.sameValue(result,void 0,"coerced NaN");



test262/test/built-ins/Array/prototype/findLast/callbackfn-resize-arraybuffer.js


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[];indices=[];arrays=[];result=Array.prototype.findLast.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch(_){secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,[0,secondElement,0],"elements (shrink)");assert.compareArray(indices,[2,1,0],"indices (shrink)");assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)");assert.sameValue(result,void 0,"result (shrink)");elements=[];indices=[];arrays=[];result=Array.prototype.findLast.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch(_){}elements.push(element);indices.push(index);arrays.push(array);return!1});assert.compareArray(elements,expectedElements,"elements (grow)");assert.compareArray(indices,expectedIndices,"indices (grow)");assert.compareArray(arrays,expectedArrays,"arrays (grow)");assert.sameValue(result,void 0,"result (grow)")});


assert.sameValue(typeof ArrayBuffer.prototype.resize,"function"),testWithTypedArrayConstructors(function(TA){var BPE=TA.BYTES_PER_ELEMENT,buffer=new ArrayBuffer(BPE*3,{maxByteLength:BPE*4}),sample=new TA(buffer),secondElement,expectedElements,expectedIndices,expectedArrays,elements,indices,arrays,result;elements=[],indices=[],arrays=[],result=Array.prototype.findLast.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(BPE),secondElement=void 0,expectedElements=[0],expectedIndices=[0],expectedArrays=[sample]}catch{secondElement=0,expectedElements=[0,0,0],expectedIndices=[2,1,0],expectedArrays=[sample,sample,sample]}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,[0,secondElement,0],"elements (shrink)"),assert.compareArray(indices,[2,1,0],"indices (shrink)"),assert.compareArray(arrays,[sample,sample,sample],"arrays (shrink)"),assert.sameValue(result,void 0,"result (shrink)"),elements=[],indices=[],arrays=[],result=Array.prototype.findLast.call(sample,function(element,index,array){if(elements.length===0)try{buffer.resize(4*BPE)}catch{}return elements.push(element),indices.push(index),arrays.push(array),!1}),assert.compareArray(elements,expectedElements,"elements (grow)"),assert.compareArray(indices,expectedIndices,"indices (grow)"),assert.compareArray(arrays,expectedArrays,"arrays (grow)"),assert.sameValue(result,void 0,"result (grow)")});



test262/test/language/expressions/object/method-definition/generator-prop-name-eval-error.js


assert.throws(Test262Error,function(){({*[function(){throw new Test262Error}()](){}})});


assert.throws(Test262Error,function(){(function(){throw new Test262Error})()+""});



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.3.js


try{var x=1,z=x%=y;throw new Test262Error("#1.1: var x = 1; x %= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x %= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x%=y;throw new Test262Error("#1.1: var x = 1; x %= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x %= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/method-definition/generator-return.js


var result,obj={*g1(){return},*g2(){return 1}};result=obj.g1().next();assert.sameValue(result.value,void 0);assert.sameValue(result.done,!0);result=obj.g2().next();assert.sameValue(result.value,1);assert.sameValue(result.done,!0);


var result,obj={*g1(){},*g2(){return 1}};result=obj.g1().next(),assert.sameValue(result.value,void 0),assert.sameValue(result.done,!0),result=obj.g2().next(),assert.sameValue(result.value,1),assert.sameValue(result.done,!0);



test262/test/built-ins/Number/prototype/toExponential/nan.js


assert.sameValue(NaN.toExponential(Infinity),"NaN","NaN value");var n=new Number(NaN);assert.sameValue(n.toExponential(NaN),"NaN","NaN obj");


assert.sameValue(NaN.toExponential(1/0),"NaN","NaN value");var n=new Number(NaN);assert.sameValue(n.toExponential(NaN),"NaN","NaN obj");



test262/test/language/expressions/object/method-definition/yield-return.js


var obj={*foo(a){yield a+1;return}},g=obj.foo(3);assert.sameValue(g.next().value,4);assert.sameValue(g.next().done,!0);


var obj={*foo(a){yield a+1}},g=obj.foo(3);assert.sameValue(g.next().value,4),assert.sameValue(g.next().done,!0);



test262/test/built-ins/Number/string-numeric-separator-literal-dot-dds-nsl-dd-ep.js


assert.sameValue(Number(".10_1e2"),NaN,".10_1e2");


assert.sameValue(+".10_1e2",NaN,".10_1e2");



test262/test/built-ins/Number/string-numeric-separator-literal-nzd-nsl-dd.js


assert.sameValue(Number("1_1"),NaN,"1_1");


assert.sameValue(+"1_1",NaN,"1_1");



test262/test/built-ins/Number/S9.3.1_A7.js


assert.sameValue(Number("1234.5678"),1234.5678,'Number("1234.5678") must return Number("1234") + (+("5678") * 1e-4)');


assert.sameValue(+"1234.5678",1234.5678,'Number("1234.5678") must return Number("1234") + (+("5678") * 1e-4)');



test262/test/language/arguments-object/async-gen-meth-args-trailing-comma-spread-operator.js


var arr=[2,3],callCount=0,obj={async*method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}},ref=obj.method;ref(42,...[1],...arr).next().then(()=>{assert.sameValue(callCount,1,"generator method invoked exactly once")}).then($DONE,$DONE);


var arr=[2,3],callCount=0,obj={async*method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}},ref=obj.method;ref(42,1,...arr).next().then(()=>{assert.sameValue(callCount,1,"generator method invoked exactly once")}).then($DONE,$DONE);



test262/test/built-ins/Number/string-numeric-separator-literal-dds-dot-dd-nsl-dd-ep-dd.js


assert.sameValue(Number("10.00_01e2"),NaN,"10.00_01e2");


assert.sameValue(+"10.00_01e2",NaN,"10.00_01e2");



test262/test/language/expressions/strict-does-not-equals/S11.9.5_A1.js


if(eval("1	!==	1"))throw new Test262Error("#1: 1\\u0009!==\\u00091");if(eval("1\v!==\v1"))throw new Test262Error("#2: 1\\u000B!==\\u000B1");if(eval("1\f!==\f1"))throw new Test262Error("#3: 1\\u000C!==\\u000C1");if(eval("1 !== 1"))throw new Test262Error("#4: 1\\u0020!==\\u00201");if(eval("1\xA0!==\xA01"))throw new Test262Error("#5: 1\\u00A0!==\\u00A01");if(eval("1\n!==\n1"))throw new Test262Error("#6: 1\\u000A!==\\u000A1");if(eval("1\r!==\r1"))throw new Test262Error("#7: 1\\u000D!==\\u000D1");if(eval("1\u2028!==\u20281"))throw new Test262Error("#8: 1\\u2028!==\\u20281");if(eval("1\u2029!==\u20291"))throw new Test262Error("#9: 1\\u2029!==\\u20291");if(eval("1	\v\f \xA0\n\r\u2028\u2029!==	\v\f \xA0\n\r\u2028\u20291"))throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029!==\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291");


if(eval("1	!==	1"))throw new Test262Error("#1: 1\\u0009!==\\u00091");if(eval("1\v!==\v1"))throw new Test262Error("#2: 1\\u000B!==\\u000B1");if(eval("1\f!==\f1"))throw new Test262Error("#3: 1\\u000C!==\\u000C1");if(eval("1 !== 1"))throw new Test262Error("#4: 1\\u0020!==\\u00201");if(eval("1\xA0!==\xA01"))throw new Test262Error("#5: 1\\u00A0!==\\u00A01");if(eval(`1
!==
1`))throw new Test262Error("#6: 1\\u000A!==\\u000A1");if(eval("1\r!==\r1"))throw new Test262Error("#7: 1\\u000D!==\\u000D1");if(eval("1\u2028!==\u20281"))throw new Test262Error("#8: 1\\u2028!==\\u20281");if(eval("1\u2029!==\u20291"))throw new Test262Error("#9: 1\\u2029!==\\u20291");if(eval(`1	\v\f \xA0
\r\u2028\u2029!==	\v\f \xA0
\r\u2028\u20291`))throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029!==\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291");



test262/test/language/expressions/strict-does-not-equals/S11.9.5_A2.1_T3.js


try{throw 1!==y,new Test262Error("#1.1: 1 !== y throw ReferenceError. Actual: "+(1!==y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 !== y throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: 1 !== y throw ReferenceError. Actual: "+(y!==1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 !== y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/strict-does-not-equals/S11.9.5_A2.1_T2.js


try{throw x!==1,new Test262Error("#1.1: x !== 1 throw ReferenceError. Actual: "+(x!==1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x !== 1 throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: x !== 1 throw ReferenceError. Actual: "+(x!==1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x !== 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/strict-does-not-equals/S11.9.5_A2.4_T3.js


try{throw x!==(x=1),new Test262Error("#1.1: x !== (x = 1) throw ReferenceError. Actual: "+(x!==(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x !== (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x,x=1,new Test262Error("#1.1: x !== (x = 1) throw ReferenceError. Actual: "+(x!==(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x !== (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A2.4_T1.js


var x=0;if((x=1)>>>x!==0)throw new Test262Error("#1: var x = 0; (x = 1) >>> x === 0. Actual: "+((x=1)>>>x));var x=-4;if(x>>>(x=1)!==2147483646)throw new Test262Error("#2: var x = -4; x >>> (x = 1) === 2147483646. Actual: "+(x>>>(x=1)));


var x=0;if((x=1)>>>x)throw new Test262Error("#1: var x = 0; (x = 1) >>> x === 0. Actual: "+((x=1)>>>x));var x=-4;if(x>>>(x=1)!==2147483646)throw new Test262Error("#2: var x = -4; x >>> (x = 1) === 2147483646. Actual: "+(x>>>(x=1)));



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A3_T2.4.js


if(1>>>void 0!==1)throw new Test262Error("#1: 1 >>> undefined === 1. Actual: "+(1>>>void 0));if(void 0>>>1!==0)throw new Test262Error("#2: undefined >>> 1 === 0. Actual: "+(void 0>>>1));if(new Number(1)>>>void 0!==1)throw new Test262Error("#3: new Number(1) >>> undefined === 1. Actual: "+(new Number(1)>>>void 0));if(void 0>>>new Number(1)!==0)throw new Test262Error("#4: undefined >>> new Number(1) === 0. Actual: "+(void 0>>>new Number(1)));


if(1>>>void 0!==1)throw new Test262Error("#1: 1 >>> undefined === 1. Actual: "+(1>>>void 0));if(void 0>>>1)throw new Test262Error("#2: undefined >>> 1 === 0. Actual: "+(void 0>>>1));if(new Number(1)>>>void 0!==1)throw new Test262Error("#3: new Number(1) >>> undefined === 1. Actual: "+(new Number(1)>>>void 0));if(void 0>>>new Number(1))throw new Test262Error("#4: undefined >>> new Number(1) === 0. Actual: "+(void 0>>>new Number(1)));



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A2.4_T4.js


if((y=1)>>>y!==0)throw new Test262Error("#1: (y = 1) >>> y === 0. Actual: "+((y=1)>>>y));


if((y=1)>>>y)throw new Test262Error("#1: (y = 1) >>> y === 0. Actual: "+((y=1)>>>y));



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A3_T2.6.js


if("1">>>void 0!==1)throw new Test262Error('#1: "1" >>> undefined === 1. Actual: '+("1">>>void 0));if(void 0>>>"1"!==0)throw new Test262Error('#2: undefined >>> "1" === 0. Actual: '+(void 0>>>"1"));if(new String("1")>>>void 0!==1)throw new Test262Error('#3: new String("1") >>> undefined === 1. Actual: '+(new String("1")>>>void 0));if(void 0>>>new String("1")!==0)throw new Test262Error('#4: undefined >>> new String("1") === 0. Actual: '+(void 0>>>new String("1")));


if("1">>>void 0!==1)throw new Test262Error('#1: "1" >>> undefined === 1. Actual: '+("1">>>void 0));if(void 0>>>"1")throw new Test262Error('#2: undefined >>> "1" === 0. Actual: '+(void 0>>>"1"));if(new String("1")>>>void 0!==1)throw new Test262Error('#3: new String("1") >>> undefined === 1. Actual: '+(new String("1")>>>void 0));if(void 0>>>new String("1"))throw new Test262Error('#4: undefined >>> new String("1") === 0. Actual: '+(void 0>>>new String("1")));



test262/test/built-ins/Number/isFinite/infinity.js


assert.sameValue(Number.isFinite(Infinity),!1,"+Infinity"),assert.sameValue(Number.isFinite(-1/0),!1,"-Infinity");


assert.sameValue(Number.isFinite(1/0),!1,"+Infinity"),assert.sameValue(Number.isFinite(-1/0),!1,"-Infinity");



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A2.4_T3.js


try{throw x>>>(x=1),new Test262Error("#1.1: x >>> (x = 1) throw ReferenceError. Actual: "+(x>>>(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >>> (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x>>>(x=1),new Test262Error("#1.1: x >>> (x = 1) throw ReferenceError. Actual: "+(x>>>(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >>> (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/intl402/Temporal/ZonedDateTime/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/object/method-definition/async-gen-yield-star-getiter-async-undefined-sync-get-abrupt.js


var calls=0,reason={},obj={get[Symbol.iterator](){throw reason},get[Symbol.asyncIterator](){calls+=1;return}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v,reason,"reject reason"),assert.sameValue(calls,1),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE);assert.sameValue(callCount,1);


var calls=0,reason={},obj={get[Symbol.iterator](){throw reason},get[Symbol.asyncIterator](){calls+=1}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v,reason,"reject reason"),assert.sameValue(calls,1),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE),assert.sameValue(callCount,1);



test262/test/built-ins/Number/string-numeric-separator-literal-dd-dot-dd-ep-sign-plus-dd-nsl-dd.js


assert.sameValue(Number("1.0e+1_0"),NaN,"1.0e+1_0");


assert.sameValue(+"1.0e+1_0",NaN,"1.0e+1_0");



test262/test/language/expressions/unsigned-right-shift/bigint-and-number.js


assert.throws(TypeError,function(){1n>>>1},"1n >>> 1 throws TypeError"),assert.throws(TypeError,function(){1>>>1n},"1 >>> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>>1},"Object(1n) >>> 1 throws TypeError"),assert.throws(TypeError,function(){1>>>Object(1n)},"1 >>> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>>Object(1)},"1n >>> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>>1n},"Object(1) >>> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>>Object(1)},"Object(1n) >>> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>>Object(1n)},"Object(1) >>> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>>NaN},"1n >>> NaN throws TypeError"),assert.throws(TypeError,function(){NaN>>>1n},"NaN >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>Infinity},"1n >>> Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity>>>1n},"Infinity >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>1},"1n >>> true throws TypeError"),assert.throws(TypeError,function(){!0>>>1n},"true >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>"1"},'1n >>> "1" throws TypeError'),assert.throws(TypeError,function(){"1">>>1n},'"1" >>> 1n throws TypeError'),assert.throws(TypeError,function(){1n>>>null},"1n >>> null throws TypeError"),assert.throws(TypeError,function(){null>>>1n},"null >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>void 0},"1n >>> undefined throws TypeError"),assert.throws(TypeError,function(){void 0>>>1n},"undefined >>> 1n throws TypeError");


assert.throws(TypeError,function(){1n>>>1},"1n >>> 1 throws TypeError"),assert.throws(TypeError,function(){1>>>1n},"1 >>> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>>1},"Object(1n) >>> 1 throws TypeError"),assert.throws(TypeError,function(){1>>>Object(1n)},"1 >>> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>>Object(1)},"1n >>> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>>1n},"Object(1) >>> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>>Object(1)},"Object(1n) >>> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>>Object(1n)},"Object(1) >>> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>>NaN},"1n >>> NaN throws TypeError"),assert.throws(TypeError,function(){NaN>>>1n},"NaN >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>1/0},"1n >>> Infinity throws TypeError"),assert.throws(TypeError,function(){1/0>>>1n},"Infinity >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>!0},"1n >>> true throws TypeError"),assert.throws(TypeError,function(){!0>>>1n},"true >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>"1"},'1n >>> "1" throws TypeError'),assert.throws(TypeError,function(){"1">>>1n},'"1" >>> 1n throws TypeError'),assert.throws(TypeError,function(){1n>>>null},"1n >>> null throws TypeError"),assert.throws(TypeError,function(){null>>>1n},"null >>> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>>void 0},"1n >>> undefined throws TypeError"),assert.throws(TypeError,function(){void 0>>>1n},"undefined >>> 1n throws TypeError");



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A2.1_T2.js


try{throw x>>>1,new Test262Error("#1.1: x >>> 1 throw ReferenceError. Actual: "+(x>>>1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >>> 1 throw ReferenceError. Actual: "+e)}


try{throw x>>>1,new Test262Error("#1.1: x >>> 1 throw ReferenceError. Actual: "+(x>>>1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >>> 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/new/S11.2.2_A3_T2.js


try{throw new 1,new Test262Error("#1: new 1 throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new 1 throw TypeError")}try{var x=1;new x;throw new Test262Error("#2: var x = 1; new x throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: var x = 1; new x throw TypeError")}try{var x=1;new x;throw new Test262Error("#3: var x = 1; new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = 1; new x() throw TypeError")}


try{throw new 1,new Test262Error("#1: new 1 throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new 1 throw TypeError")}try{var x=1;throw new x,new Test262Error("#2: var x = 1; new x throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: var x = 1; new x throw TypeError")}try{var x=1;throw new x,new Test262Error("#3: var x = 1; new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = 1; new x() throw TypeError")}



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A3_T2.8.js


if(!0>>>void 0!==1)throw new Test262Error("#1: true >>> undefined === 1. Actual: "+(!0>>>void 0));if(void 0>>>1!==0)throw new Test262Error("#2: undefined >>> true === 0. Actual: "+(void 0>>>1));if(new Boolean(!0)>>>void 0!==1)throw new Test262Error("#3: new Boolean(true) >>> undefined === 1. Actual: "+(new Boolean(!0)>>>void 0));if(void 0>>>new Boolean(!0)!==0)throw new Test262Error("#4: undefined >>> new Boolean(true) === 0. Actual: "+(void 0>>>new Boolean(!0)));


if(!0>>>void 0!==1)throw new Test262Error("#1: true >>> undefined === 1. Actual: "+(!0>>>void 0));if(void 0>>>!0)throw new Test262Error("#2: undefined >>> true === 0. Actual: "+(void 0>>>!0));if(new Boolean(!0)>>>void 0!==1)throw new Test262Error("#3: new Boolean(true) >>> undefined === 1. Actual: "+(new Boolean(!0)>>>void 0));if(void 0>>>new Boolean(!0))throw new Test262Error("#4: undefined >>> new Boolean(true) === 0. Actual: "+(void 0>>>new Boolean(!0)));



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A2.1_T3.js


try{throw 1>>>y,new Test262Error("#1.1: 1 >>> y throw ReferenceError. Actual: "+(1>>>y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 >>> y throw ReferenceError. Actual: "+e)}


try{throw 1>>>y,new Test262Error("#1.1: 1 >>> y throw ReferenceError. Actual: "+(1>>>y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 >>> y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/new/spread-sngl-empty.js


var callCount=0;new function(){assert.sameValue(arguments.length,0),callCount+=1}(...[]);assert.sameValue(callCount,1);


var callCount=0;new function(){assert.sameValue(arguments.length,0),callCount+=1},assert.sameValue(callCount,1);



test262/test/language/arguments-object/gen-meth-args-trailing-comma-spread-operator.js


var arr=[2,3],callCount=0,obj={*method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}};obj.method(42,...[1],...arr).next();var ref=obj.method;assert.sameValue(callCount,1,"generator method invoked exactly once");


var arr=[2,3],callCount=0,obj={*method(){assert.sameValue(arguments.length,4),assert.sameValue(arguments[0],42),assert.sameValue(arguments[1],1),assert.sameValue(arguments[2],2),assert.sameValue(arguments[3],3),callCount=callCount+1}};obj.method(42,1,...arr).next();var ref=obj.method;assert.sameValue(callCount,1,"generator method invoked exactly once");



test262/test/intl402/Temporal/ZonedDateTime/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/new/S11.2.2_A1.2.js


if(eval("new	Number()")!=0)throw new Test262Error("#1: new\\u0009Number == 0");if(eval("new\vNumber()")!=0)throw new Test262Error("#2: new\\u000BNumber == 0");if(eval("new\fNumber()")!=0)throw new Test262Error("#3: new\\u000CNumber == 0");if(eval("new Number()")!=0)throw new Test262Error("#4: new\\u0020Number == 0");if(eval("new\xA0Number()")!=0)throw new Test262Error("#5: new\\u00A0Number == 0");if(eval("new\nNumber()")!=0)throw new Test262Error("#6: new\\u000ANumber == 0");if(eval("new\rNumber()")!=0)throw new Test262Error("#7: new\\u000DNumber == 0");if(eval("new\u2028Number()")!=0)throw new Test262Error("#8: new\\u2028Number == 0");if(eval("new\u2029Number()")!=0)throw new Test262Error("#9: new\\u2029Number == 0");if(eval("new	\v\f \xA0\n\r\u2028\u2029Number()")!=0)throw new Test262Error("#10: new\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number == 0");


if(eval("new	Number()")!=0)throw new Test262Error("#1: new\\u0009Number == 0");if(eval("new\vNumber()")!=0)throw new Test262Error("#2: new\\u000BNumber == 0");if(eval("new\fNumber()")!=0)throw new Test262Error("#3: new\\u000CNumber == 0");if(eval("new Number()")!=0)throw new Test262Error("#4: new\\u0020Number == 0");if(eval("new\xA0Number()")!=0)throw new Test262Error("#5: new\\u00A0Number == 0");if(eval(`new
Number()`)!=0)throw new Test262Error("#6: new\\u000ANumber == 0");if(eval("new\rNumber()")!=0)throw new Test262Error("#7: new\\u000DNumber == 0");if(eval("new\u2028Number()")!=0)throw new Test262Error("#8: new\\u2028Number == 0");if(eval("new\u2029Number()")!=0)throw new Test262Error("#9: new\\u2029Number == 0");if(eval(`new	\v\f \xA0
\r\u2028\u2029Number()`)!=0)throw new Test262Error("#10: new\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number == 0");



test262/test/language/expressions/new/spread-mult-literal.js


var callCount=0;new function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1}(5,...[6,7,8],9);assert.sameValue(callCount,1);


var callCount=0;new function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1}(5,6,7,8,9),assert.sameValue(callCount,1);



test262/test/language/expressions/unsigned-right-shift/S11.7.3_A1.js


if(eval("-4	>>>	1")!==2147483646)throw new Test262Error("#1: -4\\u0009>>>\\u00091 === 2147483646");if(eval("-4\v>>>\v1")!==2147483646)throw new Test262Error("#2: -4\\u000B>>>\\u000B1 === 2147483646");if(eval("-4\f>>>\f1")!==2147483646)throw new Test262Error("#3: -4\\u000C>>>\\u000C1 === 2147483646");if(eval("-4 >>> 1")!==2147483646)throw new Test262Error("#4: -4\\u0020>>>\\u00201 === 2147483646");if(eval("-4\xA0>>>\xA01")!==2147483646)throw new Test262Error("#5: -4\\u00A0>>>\\u00A01 === 2147483646");if(eval("-4\n>>>\n1")!==2147483646)throw new Test262Error("#6: -4\\u000A>>>\\u000A1 === 2147483646");if(eval("-4\r>>>\r1")!==2147483646)throw new Test262Error("#7: -4\\u000D>>>\\u000D1 === 2147483646");if(eval("-4\u2028>>>\u20281")!==2147483646)throw new Test262Error("#8: -4\\u2028>>>\\u20281 === 2147483646");if(eval("-4\u2029>>>\u20291")!==2147483646)throw new Test262Error("#9: -4\\u2029>>>\\u20291 === 2147483646");if(eval("-4	\v\f \xA0\n\r\u2028\u2029>>>	\v\f \xA0\n\r\u2028\u20291")!==2147483646)throw new Test262Error("#10: -4\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>>>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2147483646");


if(eval("-4	>>>	1")!==2147483646)throw new Test262Error("#1: -4\\u0009>>>\\u00091 === 2147483646");if(eval("-4\v>>>\v1")!==2147483646)throw new Test262Error("#2: -4\\u000B>>>\\u000B1 === 2147483646");if(eval("-4\f>>>\f1")!==2147483646)throw new Test262Error("#3: -4\\u000C>>>\\u000C1 === 2147483646");if(eval("-4 >>> 1")!==2147483646)throw new Test262Error("#4: -4\\u0020>>>\\u00201 === 2147483646");if(eval("-4\xA0>>>\xA01")!==2147483646)throw new Test262Error("#5: -4\\u00A0>>>\\u00A01 === 2147483646");if(eval(`-4
>>>
1`)!==2147483646)throw new Test262Error("#6: -4\\u000A>>>\\u000A1 === 2147483646");if(eval("-4\r>>>\r1")!==2147483646)throw new Test262Error("#7: -4\\u000D>>>\\u000D1 === 2147483646");if(eval("-4\u2028>>>\u20281")!==2147483646)throw new Test262Error("#8: -4\\u2028>>>\\u20281 === 2147483646");if(eval("-4\u2029>>>\u20291")!==2147483646)throw new Test262Error("#9: -4\\u2029>>>\\u20291 === 2147483646");if(eval(`-4	\v\f \xA0
\r\u2028\u2029>>>	\v\f \xA0
\r\u2028\u20291`)!==2147483646)throw new Test262Error("#10: -4\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>>>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 2147483646");



test262/test/built-ins/Number/isInteger/infinity.js


assert.sameValue(Number.isInteger(Infinity),!1,"Infinity"),assert.sameValue(Number.isInteger(-1/0),!1,"-Infinity");


assert.sameValue(Number.isInteger(1/0),!1,"Infinity"),assert.sameValue(Number.isInteger(-1/0),!1,"-Infinity");



test262/test/language/expressions/new/spread-obj-undefined.js


var callCount=0;new function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}({...void 0});assert.sameValue(callCount,1);


var callCount=0;new function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}({}),assert.sameValue(callCount,1);



test262/test/language/expressions/new/spread-obj-null.js


var callCount=0;new function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}({...null});assert.sameValue(callCount,1);


var callCount=0;new function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1}({}),assert.sameValue(callCount,1);



test262/test/language/expressions/equals/S11.9.1_A2.1_T3.js


try{throw 1==y,new Test262Error("#1.1: 1 == y throw ReferenceError. Actual: "+(1==y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 == y throw ReferenceError. Actual: "+e)}


try{throw y==1,new Test262Error("#1.1: 1 == y throw ReferenceError. Actual: "+(y==1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 == y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/equals/S11.9.1_A2.1_T2.js


try{throw x==1,new Test262Error("#1.1: x == 1 throw ReferenceError. Actual: "+(x==1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x == 1 throw ReferenceError. Actual: "+e)}


try{throw x==1,new Test262Error("#1.1: x == 1 throw ReferenceError. Actual: "+(x==1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x == 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/new/S11.2.2_A3_T3.js


try{throw new 1,new Test262Error('#1: new "1" throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1: new "1" throw TypeError')}try{var x="1";new x;throw new Test262Error('#2: var x = "1"; new x throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2: var x = "1"; new x throw TypeError')}try{var x="1";new x;throw new Test262Error('#3: var x = "1"; new x() throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#3: var x = "1"; new x() throw TypeError')}


try{throw new 1,new Test262Error('#1: new "1" throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1: new "1" throw TypeError')}try{var x="1";throw new x,new Test262Error('#2: var x = "1"; new x throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2: var x = "1"; new x throw TypeError')}try{var x="1";throw new x,new Test262Error('#3: var x = "1"; new x() throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#3: var x = "1"; new x() throw TypeError')}



test262/test/built-ins/Number/string-numeric-separator-literal-dd-dot-dd-ep-sign-plus-dds-nsl-dd.js


assert.sameValue(Number("1.0e+10_0"),NaN,"1.0e+10_0");


assert.sameValue(+"1.0e+10_0",NaN,"1.0e+10_0");



test262/test/language/expressions/new/spread-mult-obj-null.js


var callCount=0;new function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}({a:1,b:2,...null});assert.sameValue(callCount,1);


var callCount=0;new function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}({a:1,b:2}),assert.sameValue(callCount,1);



test262/test/language/expressions/new/S11.2.2_A4_T3.js


try{throw new new String("1"),new Test262Error('#1: new new String("1") throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1: new new String("1") throw TypeError')}try{var x=new String("1");new x;throw new Test262Error('#2: var x = new String("1"); new x throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2: var x = new String("1"); new x throw TypeError')}try{var x=new String("1");new x;throw new Test262Error('#3: var x = new String("1"); new x() throw TypeError')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#3: var x = new String("1"); new x() throw TypeError')}


try{throw new new String("1"),new Test262Error('#1: new new String("1") throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1: new new String("1") throw TypeError')}try{var x=new String("1");throw new x,new Test262Error('#2: var x = new String("1"); new x throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2: var x = new String("1"); new x throw TypeError')}try{var x=new String("1");throw new x,new Test262Error('#3: var x = new String("1"); new x() throw TypeError')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#3: var x = new String("1"); new x() throw TypeError')}



test262/test/language/expressions/new/spread-sngl-literal.js


var callCount=0;new function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1}(...[3,4,5]);assert.sameValue(callCount,1);


var callCount=0;new function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1}(3,4,5),assert.sameValue(callCount,1);



test262/test/language/expressions/object/ident-name-method-def-package-escaped.js


var obj={package(){return 42}};assert.sameValue(obj["package"](),42,"property exists");


var obj={package(){return 42}};assert.sameValue(obj.package(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-case-escaped.js


var obj={case(){return 42}};assert.sameValue(obj["case"](),42,"property exists");


var obj={case(){return 42}};assert.sameValue(obj.case(),42,"property exists");



test262/test/language/expressions/new/spread-mult-obj-undefined.js


var callCount=0;new function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}({a:1,b:2,...void 0});assert.sameValue(callCount,1);


var callCount=0;new function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1}({a:1,b:2}),assert.sameValue(callCount,1);



test262/test/language/expressions/equals/S11.9.1_A1.js


if(eval("true	==	1")!==!0)throw new Test262Error("#1: (true\\u0009==\\u00091) === true");if(eval("true\v==\v1")!==!0)throw new Test262Error("#2: (true\\u000B==\\u000B1) === true");if(eval("true\f==\f1")!==!0)throw new Test262Error("#3: (true\\u000C==\\u000C1) === true");if(eval("true == 1")!==!0)throw new Test262Error("#4: (true\\u0020==\\u00201) === true");if(eval("true\xA0==\xA01")!==!0)throw new Test262Error("#5: (true\\u00A0==\\u00A01) === true");if(eval("true\n==\n1")!==!0)throw new Test262Error("#6: (true\\u000A==\\u000A1) === true");if(eval("true\r==\r1")!==!0)throw new Test262Error("#7: (true\\u000D==\\u000D1) === true");if(eval("true\u2028==\u20281")!==!0)throw new Test262Error("#8: (true\\u2028==\\u20281) === true");if(eval("true\u2029==\u20291")!==!0)throw new Test262Error("#9: (true\\u2029==\\u20291) === true");if(eval("true	\v\f \xA0\n\r\u2028\u2029==	\v\f \xA0\n\r\u2028\u20291")!==!0)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029==\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");


if(eval("true	==	1")!==!0)throw new Test262Error("#1: (true\\u0009==\\u00091) === true");if(eval("true\v==\v1")!==!0)throw new Test262Error("#2: (true\\u000B==\\u000B1) === true");if(eval("true\f==\f1")!==!0)throw new Test262Error("#3: (true\\u000C==\\u000C1) === true");if(eval("true == 1")!==!0)throw new Test262Error("#4: (true\\u0020==\\u00201) === true");if(eval("true\xA0==\xA01")!==!0)throw new Test262Error("#5: (true\\u00A0==\\u00A01) === true");if(eval(`true
==
1`)!==!0)throw new Test262Error("#6: (true\\u000A==\\u000A1) === true");if(eval("true\r==\r1")!==!0)throw new Test262Error("#7: (true\\u000D==\\u000D1) === true");if(eval("true\u2028==\u20281")!==!0)throw new Test262Error("#8: (true\\u2028==\\u20281) === true");if(eval("true\u2029==\u20291")!==!0)throw new Test262Error("#9: (true\\u2029==\\u20291) === true");if(eval(`true	\v\f \xA0
\r\u2028\u2029==	\v\f \xA0
\r\u2028\u20291`)!==!0)throw new Test262Error("#10: (true\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029==\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");



test262/test/built-ins/Number/string-numeric-separator-literal-dot-dd-nsl-dd-ep.js


assert.sameValue(Number(".0_1e2"),NaN,".0_1e2");


assert.sameValue(+".0_1e2",NaN,".0_1e2");



test262/test/built-ins/Object/getOwnPropertyDescriptors/primitive-numbers.js


assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(0)).length,0,"0 has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(-0)).length,0,"-0 has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(Infinity)).length,0,"Infinity has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(-1/0)).length,0,"-Infinity has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(NaN)).length,0,"NaN has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(Math.PI)).length,0,"Math.PI has zero descriptors");


assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(0)).length,0,"0 has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(-0)).length,0,"-0 has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(1/0)).length,0,"Infinity has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(-1/0)).length,0,"-Infinity has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(NaN)).length,0,"NaN has zero descriptors"),assert.sameValue(Object.keys(Object.getOwnPropertyDescriptors(Math.PI)).length,0,"Math.PI has zero descriptors");



test262/test/language/expressions/object/ident-name-prop-name-literal-private-escaped.js


var obj={private:42};assert.sameValue(obj["private"],42,"property exists");


var obj={private:42};assert.sameValue(obj.private,42,"property exists");



test262/test/language/expressions/equals/S11.9.1_A2.4_T3.js


try{throw x==(x=1),new Test262Error("#1.1: x == (x = 1) throw ReferenceError. Actual: "+(x==(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x == (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x==(x=1),new Test262Error("#1.1: x == (x = 1) throw ReferenceError. Actual: "+(x==(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x == (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Number/string-numeric-separator-literal-dd-dot-dd-ep-sign-minus-dds-nsl-dd.js


assert.sameValue(Number("1.0e-10_0"),NaN,"1.0e-10_0");


assert.sameValue(+"1.0e-10_0",NaN,"1.0e-10_0");



test262/test/intl402/Temporal/ZonedDateTime/prototype/toString/calendarname-critical.js


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC][!u-ca=iso8601]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args),result=date.toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC][!u-ca=iso8601]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args).toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}



test262/test/intl402/Temporal/ZonedDateTime/prototype/toString/calendarname-always.js


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=iso8601]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args),result=date.toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=iso8601]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args).toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}



test262/test/intl402/Temporal/ZonedDateTime/prototype/toString/calendarname-never.js


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args),result=date.toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args).toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}



test262/test/intl402/Temporal/ZonedDateTime/prototype/toString/calendarname-auto.js


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args),result=date.toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}


const tests=[[[],"1970-01-01T01:01:01.987654321+00:00[UTC]","built-in ISO"],[["gregory"],"1970-01-01T01:01:01.987654321+00:00[UTC][u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.ZonedDateTime(3661987654321n,"UTC",...args).toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}



test262/test/built-ins/Number/S9.3.1_A2_U180E.js


assert.sameValue(Number("᠎"),NaN,'Number("\\u180E") === NaN. Actual: '+Number("᠎"));


assert.sameValue(+"\u180E",NaN,'Number("\\u180E") === NaN. Actual: '+ +"\u180E");



test262/test/language/expressions/equals/S11.9.1_A2.4_T4.js


if((y=1)==y!==!0)throw new Test262Error("#1: ((y = 1) == y) === true");


if((y=1)!=y)throw new Test262Error("#1: ((y = 1) == y) === true");



test262/test/language/expressions/new/S11.2.2_A4_T2.js


try{throw new new Number(1),new Test262Error("#1: new new Number(1) throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new new Number(1) throw TypeError")}try{var x=new Number(1);new x;throw new Test262Error("#2: var x = new Number(1); new x throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: var x = new Number(1); new x throw TypeError")}try{var x=new Number(1);new x;throw new Test262Error("#3: var x = new Number(1); new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = new Number(1); new x() throw TypeError")}


try{throw new new Number(1),new Test262Error("#1: new new Number(1) throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new new Number(1) throw TypeError")}try{var x=new Number(1);throw new x,new Test262Error("#2: var x = new Number(1); new x throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: var x = new Number(1); new x throw TypeError")}try{var x=new Number(1);throw new x,new Test262Error("#3: var x = new Number(1); new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = new Number(1); new x() throw TypeError")}



test262/test/language/expressions/new/S11.2.2_A4_T5.js


try{throw new Math,new Test262Error("#1: new Math throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new Math throw TypeError")}try{throw new new Math(),new Test262Error("#2: new new Math() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: new new Math() throw TypeError")}try{var x=new Math;new x;throw new Test262Error("#3: var x = new Math(); new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = new Math(); new x() throw TypeError")}


try{throw new Math,new Test262Error("#1: new Math throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new Math throw TypeError")}try{throw new new Math(),new Test262Error("#2: new new Math() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: new new Math() throw TypeError")}try{var x=new Math;throw new x,new Test262Error("#3: var x = new Math(); new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = new Math(); new x() throw TypeError")}



test262/test/language/expressions/equals/S11.9.1_A2.4_T1.js


var x=0;if((x=1)==x!==!0)throw new Test262Error("#1: var x = 0; ((x = 1) == x) === true");var x=0;if(x==(x=1)!==!1)throw new Test262Error("#2: var x = 0; (x == (x = 1)) === false");


var x=0;if((x=1)!=x)throw new Test262Error("#1: var x = 0; ((x = 1) == x) === true");var x=0;if(x==(x=1))throw new Test262Error("#2: var x = 0; (x == (x = 1)) === false");



test262/test/language/expressions/new/S11.2.2_A4_T1.js


try{throw new new Boolean(!0),new Test262Error("#1: new new Boolean(true) throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new new Boolean(true) throw TypeError")}try{var x=new Boolean(!0);new x;throw new Test262Error("#2: var x = new Boolean(true); new x throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: var x = new Boolean(true); new x throw TypeError")}try{var x=new Boolean(!0);new x;throw new Test262Error("#3: var x = new Boolean(true); new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = new Boolean(true); new x() throw TypeError")}


try{throw new new Boolean(!0),new Test262Error("#1: new new Boolean(true) throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new new Boolean(true) throw TypeError")}try{var x=new Boolean(!0);throw new x,new Test262Error("#2: var x = new Boolean(true); new x throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: var x = new Boolean(true); new x throw TypeError")}try{var x=new Boolean(!0);throw new x,new Test262Error("#3: var x = new Boolean(true); new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = new Boolean(true); new x() throw TypeError")}



test262/test/language/expressions/equals/S11.9.1_A2.1_T1.js


var x=1;if(x==1!==!0)throw new Test262Error("#2: var x = 1; (x == 1) === true");var y=1;if(1==y!==!0)throw new Test262Error("#3: var y = 1; (1 == y) === true");var x=1,y=1;if(x==y!==!0)throw new Test262Error("#4: var x = 1; var y = 1; (x == y) === true");var objectx={},objecty={};objectx.prop=1;objecty.prop=1;if(objectx.prop==objecty.prop!==!0)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop == objecty.prop) === true");


var x=1;if(x!=1)throw new Test262Error("#2: var x = 1; (x == 1) === true");var y=1;if(y!=1)throw new Test262Error("#3: var y = 1; (1 == y) === true");var x=1,y=1;if(x!=y)throw new Test262Error("#4: var x = 1; var y = 1; (x == y) === true");var objectx=new Object,objecty=new Object;if(objectx.prop=1,objecty.prop=1,objectx.prop!=objecty.prop)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop == objecty.prop) === true");



test262/test/language/expressions/new/S11.2.2_A4_T4.js


try{throw new this,new Test262Error("#1: new this throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new this throw TypeError")}try{throw new this,new Test262Error("#2: new this() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: new this() throw TypeError")}


try{throw new this,new Test262Error("#1: new this throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new this throw TypeError")}try{throw new this,new Test262Error("#2: new this() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: new this() throw TypeError")}



test262/test/language/expressions/new/S11.2.2_A2.js


try{throw new x,new Test262Error("#1.1: new x throw ReferenceError. Actual: "+new x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: new x throw ReferenceError. Actual: "+e)}try{throw new x,new Test262Error("#2: new x() throw ReferenceError")}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#2: new x() throw ReferenceError")}


try{throw new x,new Test262Error("#1.1: new x throw ReferenceError. Actual: "+new x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: new x throw ReferenceError. Actual: "+e)}try{throw new x,new Test262Error("#2: new x() throw ReferenceError")}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#2: new x() throw ReferenceError")}



test262/test/language/expressions/equals/S11.9.1_A6.1.js


if(void 0==eval("var x")!==!0)throw new Test262Error('#3: (undefined == eval("var x")) === true');


if(eval("var x")!=null)throw new Test262Error('#3: (undefined == eval("var x")) === true');



test262/test/intl402/Temporal/ZonedDateTime/compare/infinity-throws-rangeerror.js


const other=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,eraYear:obj1},other));assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,eraYear:obj2}));assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const other=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare({...base,eraYear:obj1},other)),assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.compare(other,{...base,eraYear:obj2})),assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/logical-not/S9.2_A1_T2.js


if(!eval("var x")!==!0)throw new Test262Error('#3: !(eval("var x")) === true. Actual: '+!eval("var x"));


if(eval("var x"))throw new Test262Error('#3: !(eval("var x")) === true. Actual: '+!eval("var x"));



test262/test/language/expressions/logical-not/S9.2_A4_T2.js


if(!Number.NaN!==!0)throw new Test262Error("#3: !(Number.NaN) === true. Actual: "+!Number.NaN);


if(Number.NaN)throw new Test262Error("#3: !(Number.NaN) === true. Actual: "+!Number.NaN);



test262/test/language/expressions/new/S11.2.2_A3_T1.js


try{throw new(!0),new Test262Error("#1: new true throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new true throw TypeError")}try{var x=!0;new x;throw new Test262Error("#2: var x = true; new x throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: var x = true; new x throw TypeError")}try{var x=!0;new x;throw new Test262Error("#3: var x = true; new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = true; new x() throw TypeError")}


try{throw new(!0),new Test262Error("#1: new true throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new true throw TypeError")}try{var x=!0;throw new x,new Test262Error("#2: var x = true; new x throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: var x = true; new x throw TypeError")}try{var x=!0;throw new x,new Test262Error("#3: var x = true; new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = true; new x() throw TypeError")}



test262/test/language/expressions/logical-not/S11.4.9_A2.1_T2.js


try{throw!x,new Test262Error("#1.1: !x throw ReferenceError. Actual: "+!x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: !x throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: !x throw ReferenceError. Actual: "+!x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: !x throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/logical-not/S11.4.9_A1.js


if(eval("!	true")!==!1)throw new Test262Error("#true: !\\u0009true === false");if(eval("!\vtrue")!==!1)throw new Test262Error("#2: !\\u000Btrue === false");if(eval("!\ftrue")!==!1)throw new Test262Error("#3: !\\u000Ctrue === false");if(eval("! true")!==!1)throw new Test262Error("#4: !\\u0020 === false");if(eval("!\xA0true")!==!1)throw new Test262Error("#5: !\\u00A0true === false");if(eval("!\ntrue")!==!1)throw new Test262Error("#6: !\\u000Atrue === false");if(eval("!\rtrue")!==!1)throw new Test262Error("#7: !\\u000Dtrue === false");if(eval("!\u2028true")!==!1)throw new Test262Error("#8: !\\u2028true === false");if(eval("!\u2029true")!==!1)throw new Test262Error("#9: !\\u2029true === false");if(eval("!	\v\f \xA0\n\r\u2028\u2029true")!==!1)throw new Test262Error("#10: !\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true === false");


if(eval("!	true")!==!1)throw new Test262Error("#true: !\\u0009true === false");if(eval("!\vtrue")!==!1)throw new Test262Error("#2: !\\u000Btrue === false");if(eval("!\ftrue")!==!1)throw new Test262Error("#3: !\\u000Ctrue === false");if(eval("! true")!==!1)throw new Test262Error("#4: !\\u0020 === false");if(eval("!\xA0true")!==!1)throw new Test262Error("#5: !\\u00A0true === false");if(eval(`!
true`)!==!1)throw new Test262Error("#6: !\\u000Atrue === false");if(eval("!\rtrue")!==!1)throw new Test262Error("#7: !\\u000Dtrue === false");if(eval("!\u2028true")!==!1)throw new Test262Error("#8: !\\u2028true === false");if(eval("!\u2029true")!==!1)throw new Test262Error("#9: !\\u2029true === false");if(eval(`!	\v\f \xA0
\r\u2028\u2029true`)!==!1)throw new Test262Error("#10: !\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true === false");



test262/test/language/expressions/super/prop-expr-obj-ref-strict.js


var caught,obj={method(){super["x"]=8;Object.freeze(obj);try{super["y"]=9}catch(err){caught=err}}};obj.method();assert.sameValue(typeof caught,"object");assert.sameValue(caught.constructor,TypeError);


var caught,obj={method(){super.x=8,Object.freeze(obj);try{super.y=9}catch(err){caught=err}}};obj.method(),assert.sameValue(typeof caught,"object"),assert.sameValue(caught.constructor,TypeError);



test262/test/language/expressions/new/S11.2.2_A1.1.js


if(eval("new	Number")!=0)throw new Test262Error("#1: new\\u0009Number == 0");if(eval("new\vNumber")!=0)throw new Test262Error("#2: new\\u000BNumber == 0");if(eval("new\fNumber")!=0)throw new Test262Error("#3: new\\u000CNumber == 0");if(eval("new Number")!=0)throw new Test262Error("#4: new\\u0020Number == 0");if(eval("new\xA0Number")!=0)throw new Test262Error("#5: new\\u00A0Number == 0");if(eval("new\nNumber")!=0)throw new Test262Error("#6: new\\u000ANumber == 0");if(eval("new\rNumber")!=0)throw new Test262Error("#7: new\\u000DNumber == 0");if(eval("new\u2028Number")!=0)throw new Test262Error("#8: new\\u2028Number == 0");if(eval("new\u2029Number")!=0)throw new Test262Error("#9: new\\u2029Number == 0");if(eval("new	\v\f \xA0\n\r\u2028\u2029Number")!=0)throw new Test262Error("#10: new\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number == 0");


if(eval("new	Number")!=0)throw new Test262Error("#1: new\\u0009Number == 0");if(eval("new\vNumber")!=0)throw new Test262Error("#2: new\\u000BNumber == 0");if(eval("new\fNumber")!=0)throw new Test262Error("#3: new\\u000CNumber == 0");if(eval("new Number")!=0)throw new Test262Error("#4: new\\u0020Number == 0");if(eval("new\xA0Number")!=0)throw new Test262Error("#5: new\\u00A0Number == 0");if(eval(`new
Number`)!=0)throw new Test262Error("#6: new\\u000ANumber == 0");if(eval("new\rNumber")!=0)throw new Test262Error("#7: new\\u000DNumber == 0");if(eval("new\u2028Number")!=0)throw new Test262Error("#8: new\\u2028Number == 0");if(eval("new\u2029Number")!=0)throw new Test262Error("#9: new\\u2029Number == 0");if(eval(`new	\v\f \xA0
\r\u2028\u2029Number`)!=0)throw new Test262Error("#10: new\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029Number == 0");



test262/test/language/expressions/logical-not/S11.4.9_A2.1_T1.js


var x=!0;if(!x!==!1)throw new Test262Error("#3: var x = true; !x === false");var x=!0;if(!!x!==!0)throw new Test262Error("#4: var x = true; !(!x) === true");var object={};object.prop=!0;if(!object.prop!==!1)throw new Test262Error("#5: var object = new Object(); object.prop = true; !object.prop === false");


var x=!0;if(!x)throw new Test262Error("#3: var x = true; !x === false");var x=!0;if(!x)throw new Test262Error("#4: var x = true; !(!x) === true");var object=new Object;if(object.prop=!0,!object.prop)throw new Test262Error("#5: var object = new Object(); object.prop = true; !object.prop === false");



test262/test/language/expressions/new/S11.2.2_A3_T5.js


try{throw new null,new Test262Error("#1: new null throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1: new null throw TypeError")}try{var x=null;new x;throw new Test262Error("#2: var x = null; new x throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2: var x = null; new x throw TypeError")}try{var x=null;new x;throw new Test262Error("#3: var x = null; new x() throw TypeError")}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#3: var x = null; new x() throw TypeError")}


try{throw new null,new Test262Error("#1: new null throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1: new null throw TypeError")}try{var x=null;throw new x,new Test262Error("#2: var x = null; new x throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2: var x = null; new x throw TypeError")}try{var x=null;throw new x,new Test262Error("#3: var x = null; new x() throw TypeError")}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#3: var x = null; new x() throw TypeError")}



test262/test/language/expressions/new/spread-mult-empty.js


var callCount=0;new function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1}(1,2,3,...[]);assert.sameValue(callCount,1);


var callCount=0;new function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1}(1,2,3),assert.sameValue(callCount,1);



test262/test/built-ins/Object/S15.2.2.1_A6_T3.js


var obj=new Object((null,2,3),1,2);assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number");assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"');assert(obj==3,"The result of evaluating (obj == 3) is expected to be true");assert.notSameValue(obj,3,"The value of obj is not 3");


var obj=new Object(3,1,2);assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number"),assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"'),assert(obj==3,"The result of evaluating (obj == 3) is expected to be true"),assert.notSameValue(obj,3,"The value of obj is not 3");



test262/test/intl402/Temporal/PlainDate/from/infinity-throws-rangeerror.js


const base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,eraYear:obj},{overflow}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});


const base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.from({...base,eraYear:obj},{overflow})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});



test262/test/language/expressions/super/prop-expr-obj-ref-non-strict.js


var obj={method(){super["x"]=8,Object.freeze(obj),super["y"]=9}};obj.method();assert(Object.prototype.hasOwnProperty.call(obj,"x"),"x is defined as an own property");assert(!Object.prototype.hasOwnProperty.call(obj,"y"),"y is not defined as an own property after the object is frozen");


var obj={method(){super.x=8,Object.freeze(obj),super.y=9}};obj.method(),assert(Object.prototype.hasOwnProperty.call(obj,"x"),"x is defined as an own property"),assert(!Object.prototype.hasOwnProperty.call(obj,"y"),"y is not defined as an own property after the object is frozen");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.4.js


try{var x=1,z=x+=y;throw new Test262Error("#1.1: var x = 1; x += y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x += y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x+=y;throw new Test262Error("#1.1: var x = 1; x += y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x += y throw ReferenceError. Actual: "+e)}



test262/test/language/import/import-attributes/json-named-bindings.js


$DONOTEVALUATE();import{name}from"./json-named-bindings_FIXTURE.json"with{type:"json"};


$DONOTEVALUATE();import"./json-named-bindings_FIXTURE.json"with{type:"json"};



test262/test/language/expressions/bitwise-xor/S11.10.2_A2.4_T1.js


var x=1;if(((x=0)^x)!==0)throw new Test262Error("#1: var x = 0; ((x = 1) ^ x) === 0. Actual: "+((x=1)^x));var x=0;if((x^(x=1))!==1)throw new Test262Error("#2: var x = 0; (x ^ (x = 1)) === 1. Actual: "+(x^(x=1)));


var x=1;if((x=0)^x)throw new Test262Error("#1: var x = 0; ((x = 1) ^ x) === 0. Actual: "+((x=1)^x));var x=0;if((x^(x=1))!==1)throw new Test262Error("#2: var x = 0; (x ^ (x = 1)) === 1. Actual: "+(x^(x=1)));



test262/test/language/expressions/bitwise-xor/S11.10.2_A2.1_T1.js


var x=1;if((x^1)!==0)throw new Test262Error("#2: var x = 1; (x ^ 1) === 0. Actual: "+(x^1));var y=1;if((1^y)!==0)throw new Test262Error("#3: var y = 1; (1 ^ y) === 0. Actual: "+(1^y));var x=1,y=1;if((x^y)!==0)throw new Test262Error("#4: var x = 1; var y = 1; (x ^ y) === 0. Actual: "+(x^y));var objectx={},objecty={};objectx.prop=1;objecty.prop=1;if((objectx.prop^objecty.prop)!==0)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop ^ objecty.prop) === 0. Actual: "+(objectx.prop^objecty.prop));


var x=1;if(x^1)throw new Test262Error("#2: var x = 1; (x ^ 1) === 0. Actual: "+(x^1));var y=1;if(1^y)throw new Test262Error("#3: var y = 1; (1 ^ y) === 0. Actual: "+(1^y));var x=1,y=1;if(x^y)throw new Test262Error("#4: var x = 1; var y = 1; (x ^ y) === 0. Actual: "+(x^y));var objectx=new Object,objecty=new Object;if(objectx.prop=1,objecty.prop=1,objectx.prop^objecty.prop)throw new Test262Error("#5: var objectx = new Object(); var objecty = new Object(); objectx.prop = 1; objecty.prop = 1; (objectx.prop ^ objecty.prop) === 0. Actual: "+(objectx.prop^objecty.prop));



test262/test/intl402/Temporal/PlainDate/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/bitwise-xor/S11.10.2_A2.1_T3.js


try{throw 1^y,new Test262Error("#1.1: 1 ^ y throw ReferenceError. Actual: "+(1^y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 ^ y throw ReferenceError. Actual: "+e)}


try{throw 1^y,new Test262Error("#1.1: 1 ^ y throw ReferenceError. Actual: "+(1^y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 ^ y throw ReferenceError. Actual: "+e)}



test262/test/intl402/Temporal/PlainDate/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/bitwise-xor/S11.10.2_A2.1_T2.js


try{throw x^1,new Test262Error("#1.1: x ^ 1 throw ReferenceError. Actual: "+(x^1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x ^ 1 throw ReferenceError. Actual: "+e)}


try{throw x^1,new Test262Error("#1.1: x ^ 1 throw ReferenceError. Actual: "+(x^1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x ^ 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/bitwise-xor/bigint-and-number.js


assert.throws(TypeError,function(){1n^1},"1n ^ 1 throws TypeError"),assert.throws(TypeError,function(){1^1n},"1 ^ 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)^1},"Object(1n) ^ 1 throws TypeError"),assert.throws(TypeError,function(){1^Object(1n)},"1 ^ Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n^Object(1)},"1n ^ Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)^1n},"Object(1) ^ 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)^Object(1)},"Object(1n) ^ Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)^Object(1n)},"Object(1) ^ Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n^NaN},"1n ^ NaN throws TypeError"),assert.throws(TypeError,function(){NaN^1n},"NaN ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^Infinity},"1n ^ Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity^1n},"Infinity ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^1},"1n ^ true throws TypeError"),assert.throws(TypeError,function(){!0^1n},"true ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^"1"},'1n ^ "1" throws TypeError'),assert.throws(TypeError,function(){"1"^1n},'"1" ^ 1n throws TypeError'),assert.throws(TypeError,function(){1n^null},"1n ^ null throws TypeError"),assert.throws(TypeError,function(){null^1n},"null ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^void 0},"1n ^ undefined throws TypeError"),assert.throws(TypeError,function(){void 0^1n},"undefined ^ 1n throws TypeError");


assert.throws(TypeError,function(){1n^1},"1n ^ 1 throws TypeError"),assert.throws(TypeError,function(){1^1n},"1 ^ 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)^1},"Object(1n) ^ 1 throws TypeError"),assert.throws(TypeError,function(){1^Object(1n)},"1 ^ Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n^Object(1)},"1n ^ Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)^1n},"Object(1) ^ 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)^Object(1)},"Object(1n) ^ Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)^Object(1n)},"Object(1) ^ Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n^NaN},"1n ^ NaN throws TypeError"),assert.throws(TypeError,function(){NaN^1n},"NaN ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^1/0},"1n ^ Infinity throws TypeError"),assert.throws(TypeError,function(){1/0^1n},"Infinity ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^!0},"1n ^ true throws TypeError"),assert.throws(TypeError,function(){!0^1n},"true ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^"1"},'1n ^ "1" throws TypeError'),assert.throws(TypeError,function(){"1"^1n},'"1" ^ 1n throws TypeError'),assert.throws(TypeError,function(){1n^null},"1n ^ null throws TypeError"),assert.throws(TypeError,function(){null^1n},"null ^ 1n throws TypeError"),assert.throws(TypeError,function(){1n^void 0},"1n ^ undefined throws TypeError"),assert.throws(TypeError,function(){void 0^1n},"undefined ^ 1n throws TypeError");



test262/test/intl402/Temporal/PlainDate/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/super/prop-expr-obj-val.js


var fromA,fromB,A={fromA:"a",fromB:"a"},B={fromB:"b"};Object.setPrototypeOf(B,A);var obj={fromA:"c",fromB:"c",method(){fromA=super["fromA"],fromB=super["fromB"]}};Object.setPrototypeOf(obj,B);obj.method();assert.sameValue(fromA,"a");assert.sameValue(fromB,"b");


var fromA,fromB,A={fromA:"a",fromB:"a"},B={fromB:"b"};Object.setPrototypeOf(B,A);var obj={fromA:"c",fromB:"c",method(){fromA=super.fromA,fromB=super.fromB}};Object.setPrototypeOf(obj,B),obj.method(),assert.sameValue(fromA,"a"),assert.sameValue(fromB,"b");



test262/test/language/expressions/bitwise-xor/S11.10.2_A1.js


if(eval("1	^	1")!==0)throw new Test262Error("#1: (1\\u0009^\\u00091) === 0");if(eval("1\v^\v1")!==0)throw new Test262Error("#2: (1\\u000B^\\u000B1) === 0");if(eval("1\f^\f1")!==0)throw new Test262Error("#3: (1\\u000C^\\u000C1) === 0");if(eval("1 ^ 1")!==0)throw new Test262Error("#4: (1\\u0020^\\u00201) === 0");if(eval("1\xA0^\xA01")!==0)throw new Test262Error("#5: (1\\u00A0^\\u00A01) === 0");if(eval("1\n^\n1")!==0)throw new Test262Error("#6: (1\\u000A^\\u000A1) === 0");if(eval("1\r^\r1")!==0)throw new Test262Error("#7: (1\\u000D^\\u000D1) === 0");if(eval("1\u2028^\u20281")!==0)throw new Test262Error("#8: (1\\u2028^\\u20281) === 0");if(eval("1\u2029^\u20291")!==0)throw new Test262Error("#9: (1\\u2029^\\u20291) === 0");if(eval("1	\v\f \xA0\n\r\u2028\u2029^	\v\f \xA0\n\r\u2028\u20291")!==0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029^\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 0");


if(eval("1	^	1")!==0)throw new Test262Error("#1: (1\\u0009^\\u00091) === 0");if(eval("1\v^\v1")!==0)throw new Test262Error("#2: (1\\u000B^\\u000B1) === 0");if(eval("1\f^\f1")!==0)throw new Test262Error("#3: (1\\u000C^\\u000C1) === 0");if(eval("1 ^ 1")!==0)throw new Test262Error("#4: (1\\u0020^\\u00201) === 0");if(eval("1\xA0^\xA01")!==0)throw new Test262Error("#5: (1\\u00A0^\\u00A01) === 0");if(eval(`1
^
1`)!==0)throw new Test262Error("#6: (1\\u000A^\\u000A1) === 0");if(eval("1\r^\r1")!==0)throw new Test262Error("#7: (1\\u000D^\\u000D1) === 0");if(eval("1\u2028^\u20281")!==0)throw new Test262Error("#8: (1\\u2028^\\u20281) === 0");if(eval("1\u2029^\u20291")!==0)throw new Test262Error("#9: (1\\u2029^\\u20291) === 0");if(eval(`1	\v\f \xA0
\r\u2028\u2029^	\v\f \xA0
\r\u2028\u20291`)!==0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029^\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 0");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.1.js


try{var z=x*=1;throw new Test262Error("#1.1: x *= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x *= 1 throw ReferenceError. Actual: "+e)}


try{var z=x*=1;throw new Test262Error("#1.1: x *= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x *= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/super/prop-expr-obj-null-proto.js


var caught,obj={method(){try{super["x"]}catch(err){caught=err}}};Object.setPrototypeOf(obj,null);obj.method();assert.sameValue(typeof caught,"object");assert.sameValue(caught.constructor,TypeError);


var caught,obj={method(){try{super.x}catch(err){caught=err}}};Object.setPrototypeOf(obj,null),obj.method(),assert.sameValue(typeof caught,"object"),assert.sameValue(caught.constructor,TypeError);



test262/test/language/expressions/bitwise-xor/S11.10.2_A2.4_T3.js


try{throw x^(x=1),new Test262Error("#1.1: x ^ (x = 1) throw ReferenceError. Actual: "+(x^(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x ^ (x = 1) throw ReferenceError. Actual: "+e)}if(((y=1)^y)!==0)throw new Test262Error("#2: ((y = 1) ^ y) === 0. Actual: "+((y=1)^y));


try{throw x^(x=1),new Test262Error("#1.1: x ^ (x = 1) throw ReferenceError. Actual: "+(x^(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x ^ (x = 1) throw ReferenceError. Actual: "+e)}if((y=1)^y)throw new Test262Error("#2: ((y = 1) ^ y) === 0. Actual: "+((y=1)^y));



test262/test/intl402/Temporal/PlainDate/prototype/toString/calendarname-critical.js


const tests=[[[],"2000-05-02[!u-ca=iso8601]","built-in ISO"],[["gregory"],"2000-05-02[!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDate(2e3,5,2,...args),result=date.toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}


const tests=[[[],"2000-05-02[!u-ca=iso8601]","built-in ISO"],[["gregory"],"2000-05-02[!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDate(2e3,5,2,...args).toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}



test262/test/intl402/Temporal/PlainDate/prototype/toString/calendarname-always.js


const tests=[[[],"2000-05-02[u-ca=iso8601]","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDate(2e3,5,2,...args),result=date.toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}


const tests=[[[],"2000-05-02[u-ca=iso8601]","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDate(2e3,5,2,...args).toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}



test262/test/intl402/Temporal/PlainDate/prototype/toString/calendarname-never.js


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDate(2e3,5,2,...args),result=date.toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDate(2e3,5,2,...args).toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}



test262/test/intl402/Temporal/PlainDate/prototype/toString/calendarname-auto.js


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDate(2e3,5,2,...args),result=date.toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDate(2e3,5,2,...args).toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}



test262/test/language/expressions/call/S11.2.3_A3_T2.js


try{throw 1(),new Test262Error("#1.1: 1() throw TypeError. Actual: "+1())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: 1() throw TypeError. Actual: "+e)}try{var x=1;x();throw new Test262Error("#2.1: var x = 1; x() throw TypeError. Actual: "+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: var x = 1; x() throw TypeError. Actual: "+e)}


try{throw 1(),new Test262Error("#1.1: 1() throw TypeError. Actual: "+1())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: 1() throw TypeError. Actual: "+e)}try{var x=1;throw x(),new Test262Error("#2.1: var x = 1; x() throw TypeError. Actual: "+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: var x = 1; x() throw TypeError. Actual: "+e)}



test262/test/language/expressions/call/S11.2.3_A1.js


if(eval("Number	()")!==0)throw new Test262Error("#1: Number\\u0009() === 0");if(eval("Number\v()")!==0)throw new Test262Error("#2: Number\\u000B() === 0");if(eval("Number\f()")!==0)throw new Test262Error("#3: Number\\u000C() === 0");if(eval("Number ()")!==0)throw new Test262Error("#4: Number\\u0020 === 0");if(eval("Number\xA0()")!==0)throw new Test262Error("#5: Number\\u00A0() === 0");if(eval("Number\n()")!==0)throw new Test262Error("#6: Number\\u000A() === 0");if(eval("Number\r()")!==0)throw new Test262Error("#7: Number\\u000D() === 0");if(eval("Number\u2028()")!==0)throw new Test262Error("#8: Number\\u2028() === 0");if(eval("Number\u2029()")!==0)throw new Test262Error("#9: Number\\u2029() === 0");if(eval("Number	\v\f \xA0\n\r\u2028\u2029()")!==0)throw new Test262Error("#10: Number\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029() === 0");


if(eval("Number	()")!==0)throw new Test262Error("#1: Number\\u0009() === 0");if(eval("Number\v()")!==0)throw new Test262Error("#2: Number\\u000B() === 0");if(eval("Number\f()")!==0)throw new Test262Error("#3: Number\\u000C() === 0");if(eval("Number ()")!==0)throw new Test262Error("#4: Number\\u0020 === 0");if(eval("Number\xA0()")!==0)throw new Test262Error("#5: Number\\u00A0() === 0");if(eval(`Number
()`)!==0)throw new Test262Error("#6: Number\\u000A() === 0");if(eval("Number\r()")!==0)throw new Test262Error("#7: Number\\u000D() === 0");if(eval("Number\u2028()")!==0)throw new Test262Error("#8: Number\\u2028() === 0");if(eval("Number\u2029()")!==0)throw new Test262Error("#9: Number\\u2029() === 0");if(eval(`Number	\v\f \xA0
\r\u2028\u2029()`)!==0)throw new Test262Error("#10: Number\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029() === 0");



test262/test/intl402/Temporal/PlainDate/prototype/toString/calendarname-undefined.js


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDate(2e3,5,2,...args),result=date.toString({calendarName:void 0});assert.sameValue(result,expected,`default calendarName option is auto with ${description} calendar`)}


const tests=[[[],"2000-05-02","built-in ISO"],[["gregory"],"2000-05-02[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDate(2e3,5,2,...args).toString({calendarName:void 0});assert.sameValue(result,expected,`default calendarName option is auto with ${description} calendar`)}



test262/test/language/expressions/call/spread-sngl-empty.js


var callCount=0;(function(){assert.sameValue(arguments.length,0),callCount+=1})(...[]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,0),callCount+=1})(),assert.sameValue(callCount,1);



test262/test/intl402/Temporal/PlainDate/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,eraYear:obj1},other));assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,eraYear:obj2}));assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const other=new Temporal.PlainDate(2e3,5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.compare({...base,eraYear:obj1},other)),assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDate.compare(other,{...base,eraYear:obj2})),assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/reserved-words/ident-name-reserved-word-literal-memberexpr-str.js


var tokenCodes={};tokenCodes["null"]="null";tokenCodes["true"]="true";tokenCodes["false"]="false";for(var arr=["null","true","false"],i=0;i<arr.length;++i){var propertyName=arr[i];assert(tokenCodes.hasOwnProperty(propertyName),'Property "'+propertyName+'" found');assert.sameValue(tokenCodes[propertyName],propertyName,'Property "'+propertyName+'" has correct value')}


var tokenCodes={};tokenCodes.null="null",tokenCodes.true="true",tokenCodes.false="false";for(var arr=["null","true","false"],i=0;i<arr.length;++i){var propertyName=arr[i];assert(tokenCodes.hasOwnProperty(propertyName),'Property "'+propertyName+'" found'),assert.sameValue(tokenCodes[propertyName],propertyName,'Property "'+propertyName+'" has correct value')}



test262/test/language/expressions/call/spread-mult-literal.js


var callCount=0;(function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1})(5,...[6,7,8],9);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,5),assert.sameValue(arguments[0],5),assert.sameValue(arguments[1],6),assert.sameValue(arguments[2],7),assert.sameValue(arguments[3],8),assert.sameValue(arguments[4],9),callCount+=1})(5,6,7,8,9),assert.sameValue(callCount,1);



test262/test/language/expressions/bitwise-or/S11.10.3_A2.1_T2.js


try{throw x|1,new Test262Error("#1.1: x | 1 throw ReferenceError. Actual: "+(x|1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x | 1 throw ReferenceError. Actual: "+e)}


try{throw x|1,new Test262Error("#1.1: x | 1 throw ReferenceError. Actual: "+(x|1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x | 1 throw ReferenceError. Actual: "+e)}



test262/test/intl402/Temporal/Duration/prototype/total/relativeto-infinity-throws-rangeerror.js


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,eraYear:inf}}),`eraYear property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,eraYear:obj}}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,eraYear:inf}}),`eraYear property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.total({unit:"seconds",relativeTo:{...base,eraYear:obj}})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/bitwise-or/S11.10.3_A2.1_T3.js


try{throw 1|y,new Test262Error("#1.1: 1 | y throw ReferenceError. Actual: "+(1|y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 | y throw ReferenceError. Actual: "+e)}


try{throw 1|y,new Test262Error("#1.1: 1 | y throw ReferenceError. Actual: "+(1|y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 | y throw ReferenceError. Actual: "+e)}



test262/test/language/reserved-words/ident-name-global-property-memberexpr-str.js


var tokenCodes={};tokenCodes["undefined"]="undefined";tokenCodes["NaN"]="NaN";tokenCodes["Infinity"]="Infinity";for(var arr=["undefined","NaN","Infinity"],i=0;i<arr.length;++i){var propertyName=arr[i];assert(tokenCodes.hasOwnProperty(propertyName),'Property "'+propertyName+'" found');assert.sameValue(tokenCodes[propertyName],propertyName,'Property "'+propertyName+'" has correct value')}


var tokenCodes={};tokenCodes.undefined="undefined",tokenCodes.NaN="NaN",tokenCodes.Infinity="Infinity";for(var arr=["undefined","NaN","Infinity"],i=0;i<arr.length;++i){var propertyName=arr[i];assert(tokenCodes.hasOwnProperty(propertyName),'Property "'+propertyName+'" found'),assert.sameValue(tokenCodes[propertyName],propertyName,'Property "'+propertyName+'" has correct value')}



test262/test/language/expressions/call/spread-obj-undefined.js


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1})({...void 0});assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1})({}),assert.sameValue(callCount,1);



test262/test/intl402/Temporal/Duration/prototype/round/relativeto-infinity-throws-rangeerror.js


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,eraYear:inf}}),`eraYear property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,eraYear:obj}}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.Duration(1,2,3,4,5,6,7,987,654,321),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,eraYear:inf}}),`eraYear property cannot be ${inf} in relativeTo`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.round({smallestUnit:"seconds",relativeTo:{...base,eraYear:obj}})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/call/spread-obj-null.js


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1})({...null});assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(Object.keys(obj).length,0),callCount+=1})({}),assert.sameValue(callCount,1);



test262/test/language/expressions/bitwise-or/S11.10.3_A2.4_T3.js


try{throw x|(x=1),new Test262Error("#1.1: x | (x = 1) throw ReferenceError. Actual: "+(x|(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x | (x = 1) throw ReferenceError. Actual: "+e)}if(((y=1)|y)!==1)throw new Test262Error("#2: ((y = 1) | y) === 1. Actual: "+((y=1)|y));


try{throw x|(x=1),new Test262Error("#1.1: x | (x = 1) throw ReferenceError. Actual: "+(x|(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x | (x = 1) throw ReferenceError. Actual: "+e)}if(((y=1)|y)!==1)throw new Test262Error("#2: ((y = 1) | y) === 1. Actual: "+((y=1)|y));



test262/test/language/expressions/call/S11.2.3_A3_T3.js


try{throw"1"(),new Test262Error('#1.1: "1"() throw TypeError. Actual: '+"1"())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.2: "1"() throw TypeError. Actual: '+e)}try{var x="1";x();throw new Test262Error('#2.1: var x = "1"; x() throw TypeError. Actual: '+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2.2: var x = "1"; x() throw TypeError. Actual: '+e)}


try{throw"1"(),new Test262Error('#1.1: "1"() throw TypeError. Actual: '+"1"())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.2: "1"() throw TypeError. Actual: '+e)}try{var x="1";throw x(),new Test262Error('#2.1: var x = "1"; x() throw TypeError. Actual: '+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2.2: var x = "1"; x() throw TypeError. Actual: '+e)}



test262/test/language/expressions/call/spread-mult-obj-null.js


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1})({a:1,b:2,...null});assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1})({a:1,b:2}),assert.sameValue(callCount,1);



test262/test/language/expressions/bitwise-or/S11.10.3_A1.js


if(eval("0	|	1")!==1)throw new Test262Error("#1: (0\\u0009|\\u00091) === 1");if(eval("0\v|\v1")!==1)throw new Test262Error("#2: (0\\u000B|\\u000B1) === 1");if(eval("0\f|\f1")!==1)throw new Test262Error("#3: (0\\u000C|\\u000C1) === 1");if(eval("0 | 1")!==1)throw new Test262Error("#4: (0\\u0020|\\u00201) === 1");if(eval("0\xA0|\xA01")!==1)throw new Test262Error("#5: (0\\u00A0|\\u00A01) === 1");if(eval("0\n|\n1")!==1)throw new Test262Error("#6: (0\\u000A|\\u000A1) === 1");if(eval("0\r|\r1")!==1)throw new Test262Error("#7: (0\\u000D|\\u000D1) === 1");if(eval("0\u2028|\u20281")!==1)throw new Test262Error("#8: (0\\u2028|\\u20281) === 1");if(eval("0\u2029|\u20291")!==1)throw new Test262Error("#9: (0\\u2029|\\u20291) === 1");if(eval("0	\v\f \xA0\n\r\u2028\u2029|	\v\f \xA0\n\r\u2028\u20291")!==1)throw new Test262Error("#10: (0\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029|\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 1");


if(eval("0	|	1")!==1)throw new Test262Error("#1: (0\\u0009|\\u00091) === 1");if(eval("0\v|\v1")!==1)throw new Test262Error("#2: (0\\u000B|\\u000B1) === 1");if(eval("0\f|\f1")!==1)throw new Test262Error("#3: (0\\u000C|\\u000C1) === 1");if(eval("0 | 1")!==1)throw new Test262Error("#4: (0\\u0020|\\u00201) === 1");if(eval("0\xA0|\xA01")!==1)throw new Test262Error("#5: (0\\u00A0|\\u00A01) === 1");if(eval(`0
|
1`)!==1)throw new Test262Error("#6: (0\\u000A|\\u000A1) === 1");if(eval("0\r|\r1")!==1)throw new Test262Error("#7: (0\\u000D|\\u000D1) === 1");if(eval("0\u2028|\u20281")!==1)throw new Test262Error("#8: (0\\u2028|\\u20281) === 1");if(eval("0\u2029|\u20291")!==1)throw new Test262Error("#9: (0\\u2029|\\u20291) === 1");if(eval(`0	\v\f \xA0
\r\u2028\u2029|	\v\f \xA0
\r\u2028\u20291`)!==1)throw new Test262Error("#10: (0\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029|\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 1");



test262/test/language/expressions/bitwise-or/S11.10.3_A2.4_T1.js


var x=1;if(((x=0)|x)!==0)throw new Test262Error("#1: var x = 1; ((x = 0) | x) === 0. Actual: "+((x=0)|x));var x=1;if((x|(x=0))!==1)throw new Test262Error("#2: var x = 1; (x | (x = 0)) === 1. Actual: "+(x|(x=0)));


var x=1;if((x=0)|x)throw new Test262Error("#1: var x = 1; ((x = 0) | x) === 0. Actual: "+((x=0)|x));var x=1;if((x|(x=0))!==1)throw new Test262Error("#2: var x = 1; (x | (x = 0)) === 1. Actual: "+(x|(x=0)));



test262/test/language/expressions/call/S11.2.3_A4_T3.js


try{throw new String("1")(),new Test262Error('#1.1: new String("1")() throw TypeError. Actual: '+new String("1")())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.2: new String("1")() throw TypeError. Actual: '+e)}try{var x=new String("1");x();throw new Test262Error('#2.1: var x = new String("1"); x() throw TypeError. Actual: '+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#2.2: var x = new String("1"); x() throw TypeError. Actual: '+e)}


try{throw new String("1")(),new Test262Error('#1.1: new String("1")() throw TypeError. Actual: '+new String("1")())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.2: new String("1")() throw TypeError. Actual: '+e)}try{var x=new String("1");throw x(),new Test262Error('#2.1: var x = new String("1"); x() throw TypeError. Actual: '+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#2.2: var x = new String("1"); x() throw TypeError. Actual: '+e)}



test262/test/language/expressions/call/spread-sngl-literal.js


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1})(...[3,4,5]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],3),assert.sameValue(arguments[1],4),assert.sameValue(arguments[2],5),callCount+=1})(3,4,5),assert.sameValue(callCount,1);



test262/test/language/expressions/bitwise-or/bigint-and-number.js


assert.throws(TypeError,function(){1n|1},"1n | 1 throws TypeError"),assert.throws(TypeError,function(){1|1n},"1 | 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)|1},"Object(1n) | 1 throws TypeError"),assert.throws(TypeError,function(){1|Object(1n)},"1 | Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n|Object(1)},"1n | Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)|1n},"Object(1) | 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)|Object(1)},"Object(1n) | Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)|Object(1n)},"Object(1) | Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n|NaN},"1n | NaN throws TypeError"),assert.throws(TypeError,function(){NaN|1n},"NaN | 1n throws TypeError"),assert.throws(TypeError,function(){1n|Infinity},"1n | Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity|1n},"Infinity | 1n throws TypeError"),assert.throws(TypeError,function(){1n|1},"1n | true throws TypeError"),assert.throws(TypeError,function(){!0|1n},"true | 1n throws TypeError"),assert.throws(TypeError,function(){1n|"1"},'1n | "1" throws TypeError'),assert.throws(TypeError,function(){"1"|1n},'"1" | 1n throws TypeError'),assert.throws(TypeError,function(){1n|null},"1n | null throws TypeError"),assert.throws(TypeError,function(){null|1n},"null | 1n throws TypeError"),assert.throws(TypeError,function(){1n|void 0},"1n | undefined throws TypeError"),assert.throws(TypeError,function(){void 0|1n},"undefined | 1n throws TypeError");


assert.throws(TypeError,function(){1n|1},"1n | 1 throws TypeError"),assert.throws(TypeError,function(){1|1n},"1 | 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)|1},"Object(1n) | 1 throws TypeError"),assert.throws(TypeError,function(){1|Object(1n)},"1 | Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n|Object(1)},"1n | Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)|1n},"Object(1) | 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)|Object(1)},"Object(1n) | Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)|Object(1n)},"Object(1) | Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n|NaN},"1n | NaN throws TypeError"),assert.throws(TypeError,function(){NaN|1n},"NaN | 1n throws TypeError"),assert.throws(TypeError,function(){1n|1/0},"1n | Infinity throws TypeError"),assert.throws(TypeError,function(){1/0|1n},"Infinity | 1n throws TypeError"),assert.throws(TypeError,function(){1n|!0},"1n | true throws TypeError"),assert.throws(TypeError,function(){!0|1n},"true | 1n throws TypeError"),assert.throws(TypeError,function(){1n|"1"},'1n | "1" throws TypeError'),assert.throws(TypeError,function(){"1"|1n},'"1" | 1n throws TypeError'),assert.throws(TypeError,function(){1n|null},"1n | null throws TypeError"),assert.throws(TypeError,function(){null|1n},"null | 1n throws TypeError"),assert.throws(TypeError,function(){1n|void 0},"1n | undefined throws TypeError"),assert.throws(TypeError,function(){void 0|1n},"undefined | 1n throws TypeError");



test262/test/built-ins/Iterator/prototype/every/iterator-has-no-return.js


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.every(v=>v<4);assert.sameValue(ret,!1);let{done,value}=iterator.next();assert.sameValue(done,!1);assert.sameValue(value,5);({done,value}=iterator.next());assert.sameValue(done,!0);assert.sameValue(value,void 0);


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.every(v=>v<4);assert.sameValue(ret,!1);let{done,value}=iterator.next();assert.sameValue(done,!1),assert.sameValue(value,5),{done,value}=iterator.next(),assert.sameValue(done,!0),assert.sameValue(value,void 0);



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.1.js


try{var x=1,z=x*=y;throw new Test262Error("#1.1: var x = 1; x *= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x *= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x*=y;throw new Test262Error("#1.1: var x = 1; x *= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x *= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/call/spread-mult-obj-undefined.js


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1})({a:1,b:2,...void 0});assert.sameValue(callCount,1);


var callCount=0;(function(obj){assert.sameValue(obj.a,1),assert.sameValue(obj.b,2),assert.sameValue(Object.keys(obj).length,2),callCount+=1})({a:1,b:2}),assert.sameValue(callCount,1);



test262/test/language/expressions/void/S11.4.2_A2_T2.js


assert.throws(ReferenceError,function(){void x});


assert.throws(ReferenceError,function(){x});



test262/test/language/expressions/call/S11.2.3_A4_T2.js


try{throw new Number(1)(),new Test262Error("#1.1: new Number(1)() throw TypeError. Actual: "+new Number(1)())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new Number(1)() throw TypeError. Actual: "+e)}try{var x=new Number(1);x();throw new Test262Error("#2.1: var x = new Number(1); x() throw TypeError. Actual: "+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: var x = new Number(1); x() throw TypeError. Actual: "+e)}


try{throw new Number(1)(),new Test262Error("#1.1: new Number(1)() throw TypeError. Actual: "+new Number(1)())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new Number(1)() throw TypeError. Actual: "+e)}try{var x=new Number(1);throw x(),new Test262Error("#2.1: var x = new Number(1); x() throw TypeError. Actual: "+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: var x = new Number(1); x() throw TypeError. Actual: "+e)}



test262/test/language/expressions/void/S11.4.2_A1.js


if(eval("void	0")!==void 0)throw new Test262Error("#1: void\\u00090 === undefined");if(eval("void\v0")!==void 0)throw new Test262Error("#2: void\\u000B0 === undefined");if(eval("void\f0")!==void 0)throw new Test262Error("#3: void\\u000C0 === undefined");if(eval("void 0")!==void 0)throw new Test262Error("#4: void\\u00200 === undefined");if(eval("void\xA00")!==void 0)throw new Test262Error("#5: void\\u00A00 === undefined");if(eval("void\n0")!==void 0)throw new Test262Error("#6: void\\u000A0 === undefined");if(eval("void\r0")!==void 0)throw new Test262Error("#7: void\\u000D0 === undefined");if(eval("void\u20280")!==void 0)throw new Test262Error("#8: void\\u20280 === undefined");if(eval("void\u20290")!==void 0)throw new Test262Error("#9: void\\u20290 === undefined");if(eval("void	\v\f \xA0\n\r\u2028\u20290")!==void 0)throw new Test262Error("#10: void\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290 === undefined");


if(eval("void	0")!==void 0)throw new Test262Error("#1: void\\u00090 === undefined");if(eval("void\v0")!==void 0)throw new Test262Error("#2: void\\u000B0 === undefined");if(eval("void\f0")!==void 0)throw new Test262Error("#3: void\\u000C0 === undefined");if(eval("void 0")!==void 0)throw new Test262Error("#4: void\\u00200 === undefined");if(eval("void\xA00")!==void 0)throw new Test262Error("#5: void\\u00A00 === undefined");if(eval(`void
0`)!==void 0)throw new Test262Error("#6: void\\u000A0 === undefined");if(eval("void\r0")!==void 0)throw new Test262Error("#7: void\\u000D0 === undefined");if(eval("void\u20280")!==void 0)throw new Test262Error("#8: void\\u20280 === undefined");if(eval("void\u20290")!==void 0)throw new Test262Error("#9: void\\u20290 === undefined");if(eval(`void	\v\f \xA0
\r\u2028\u20290`)!==void 0)throw new Test262Error("#10: void\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290 === undefined");



test262/test/language/expressions/call/S11.2.3_A4_T5.js


try{throw Math(),new Test262Error("#1.1: Math() throw TypeError. Actual: "+Math())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: Math() throw TypeError. Actual: "+e)}


try{throw Math(),new Test262Error("#1.1: Math() throw TypeError. Actual: "+Math())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: Math() throw TypeError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A2.4_T3.js


try{throw x<=(x=1),new Test262Error("#1.1: x <= (x = 1) throw ReferenceError. Actual: "+(x<=(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x <= (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x<=(x=1),new Test262Error("#1.1: x <= (x = 1) throw ReferenceError. Actual: "+(x<=(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x <= (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.4.js


try{var z=x+=1;throw new Test262Error("#1.1: x += 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x += 1 throw ReferenceError. Actual: "+e)}


try{var z=x+=1;throw new Test262Error("#1.1: x += 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x += 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/call/S11.2.3_A4_T1.js


try{throw new Boolean(!0)(),new Test262Error("#1.1: new Boolean(true)() throw TypeError. Actual: "+new Boolean(!0)())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new Boolean(true)() throw TypeError. Actual: "+e)}try{var x=new Boolean(!0);x();throw new Test262Error("#2.1: var x = new Boolean(true); x() throw TypeError. Actual: "+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: var x = new Boolean(true); x() throw TypeError. Actual: "+e)}


try{throw new Boolean(!0)(),new Test262Error("#1.1: new Boolean(true)() throw TypeError. Actual: "+new Boolean(!0)())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new Boolean(true)() throw TypeError. Actual: "+e)}try{var x=new Boolean(!0);throw x(),new Test262Error("#2.1: var x = new Boolean(true); x() throw TypeError. Actual: "+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: var x = new Boolean(true); x() throw TypeError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.5.js


try{var x=1,z=x-=y;throw new Test262Error("#1.1: var x = 1; x -= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x -= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x-=y;throw new Test262Error("#1.1: var x = 1; x -= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x -= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A1.js


if(eval("1	<=	1")!==!0)throw new Test262Error("#1: (1\\u0009<=\\u00091) === true");if(eval("1\v<=\v1")!==!0)throw new Test262Error("#2: (1\\u000B<=\\u000B1) === true");if(eval("1\f<=\f1")!==!0)throw new Test262Error("#3: (1\\u000C<=\\u000C1) === true");if(eval("1 <= 1")!==!0)throw new Test262Error("#4: (1\\u0020<=\\u00201) === true");if(eval("1\xA0<=\xA01")!==!0)throw new Test262Error("#5: (1\\u00A0<=\\u00A01) === true");if(eval("1\n<=\n1")!==!0)throw new Test262Error("#6: (1\\u000A<=\\u000A1) === true");if(eval("1\r<=\r1")!==!0)throw new Test262Error("#7: (1\\u000D<=\\u000D1) === true");if(eval("1\u2028<=\u20281")!==!0)throw new Test262Error("#8: (1\\u2028<=\\u20281) === true");if(eval("1\u2029<=\u20291")!==!0)throw new Test262Error("#9: (1\\u2029<=\\u20291) === true");if(eval("1	\v\f \xA0\n\r\u2028\u2029>	\v\f \xA0\n\r\u2028\u20290")!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290) === true");


if(eval("1	<=	1")!==!0)throw new Test262Error("#1: (1\\u0009<=\\u00091) === true");if(eval("1\v<=\v1")!==!0)throw new Test262Error("#2: (1\\u000B<=\\u000B1) === true");if(eval("1\f<=\f1")!==!0)throw new Test262Error("#3: (1\\u000C<=\\u000C1) === true");if(eval("1 <= 1")!==!0)throw new Test262Error("#4: (1\\u0020<=\\u00201) === true");if(eval("1\xA0<=\xA01")!==!0)throw new Test262Error("#5: (1\\u00A0<=\\u00A01) === true");if(eval(`1
<=
1`)!==!0)throw new Test262Error("#6: (1\\u000A<=\\u000A1) === true");if(eval("1\r<=\r1")!==!0)throw new Test262Error("#7: (1\\u000D<=\\u000D1) === true");if(eval("1\u2028<=\u20281")!==!0)throw new Test262Error("#8: (1\\u2028<=\\u20281) === true");if(eval("1\u2029<=\u20291")!==!0)throw new Test262Error("#9: (1\\u2029<=\\u20291) === true");if(eval(`1	\v\f \xA0
\r\u2028\u2029>	\v\f \xA0
\r\u2028\u20290`)!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290) === true");



test262/test/language/expressions/less-than-or-equal/S11.8.3_A2.1_T2.js


try{throw x<=1,new Test262Error("#1.1: x <= 1 throw ReferenceError. Actual: "+(x<=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x <= 1 throw ReferenceError. Actual: "+e)}


try{throw x<=1,new Test262Error("#1.1: x <= 1 throw ReferenceError. Actual: "+(x<=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x <= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A4.10.js


var x="x";if(x+"y"<=x!==!1)throw new Test262Error('#6: var x = "x"; (x + "y" <= x) === false');


var x="x";if(x+"y"<=x)throw new Test262Error('#6: var x = "x"; (x + "y" <= x) === false');



test262/test/language/expressions/call/S11.2.3_A4_T4.js


try{throw this(),new Test262Error("#1.1: this() throw TypeError. Actual: "+this())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: this() throw TypeError. Actual: "+e)}


try{throw this(),new Test262Error("#1.1: this() throw TypeError. Actual: "+this())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: this() throw TypeError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A4.11.js


var x="x";if(x<=x+"y"!==!0)throw new Test262Error('#6: var x = "x"; (x <= x + "y") === true');


var x="x";if(!(x<=x+"y"))throw new Test262Error('#6: var x = "x"; (x <= x + "y") === true');



test262/test/language/expressions/less-than-or-equal/S11.8.3_A3.2_T1.1.js


if(new String("1")<="1"!==!0)throw new Test262Error('#2: new String("1") <= "1" === true');if("1"<=new String("1")!==!0)throw new Test262Error('#3: "1" <= new String("1") === true');if(new String("1")<=new String("1")!==!0)throw new Test262Error('#4: new String("1") <= new String("1") === true');


if(!(new String("1")<="1"))throw new Test262Error('#2: new String("1") <= "1" === true');if(!("1"<=new String("1")))throw new Test262Error('#3: "1" <= new String("1") === true');if(!(new String("1")<=new String("1")))throw new Test262Error('#4: new String("1") <= new String("1") === true');



test262/test/language/expressions/less-than-or-equal/S11.8.3_A2.1_T3.js


try{throw 1<=y,new Test262Error("#1.1: 1 <= y throw ReferenceError. Actual: "+(1<=y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 <= y throw ReferenceError. Actual: "+e)}


try{throw 1<=y,new Test262Error("#1.1: 1 <= y throw ReferenceError. Actual: "+(1<=y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 <= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A3.2_T1.2.js


if({}<=function(){return 1}!=={}.toString()<=function(){return 1}.toString())throw new Test262Error("#1: ({} <= function(){return 1}) === ({}.toString() <= function(){return 1}.toString())");if(function(){return 1}<={}!==function(){return 1}.toString()<={}.toString())throw new Test262Error("#2: (function(){return 1} <= {}) === (function(){return 1}.toString() <= {}.toString())");if(function(){return 1}<=function(){return 1}!==function(){return 1}.toString()<=function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} <= function(){return 1}) === (function(){return 1}.toString() <= function(){return 1}.toString())");if({}<={}!=={}.toString()<={}.toString())throw new Test262Error("#4: ({} <= {}) === ({}.toString() <= {}.toString())");


if({}<=function(){return 1}!={}.toString()<=function(){return 1}.toString())throw new Test262Error("#1: ({} <= function(){return 1}) === ({}.toString() <= function(){return 1}.toString())");if(function(){return 1}<={}!=function(){return 1}.toString()<={}.toString())throw new Test262Error("#2: (function(){return 1} <= {}) === (function(){return 1}.toString() <= {}.toString())");if(function(){return 1}<=function(){return 1}!=function(){return 1}.toString()<=function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} <= function(){return 1}) === (function(){return 1}.toString() <= function(){return 1}.toString())");if({}<={}!={}.toString()<={}.toString())throw new Test262Error("#4: ({} <= {}) === ({}.toString() <= {}.toString())");



test262/test/language/expressions/less-than-or-equal/S11.8.3_A4.9.js


if(Number.MAX_VALUE/2<=Number.MAX_VALUE!==!0)throw new Test262Error("#7: (Number.MAX_VALUE/2 <= Number.MAX_VALUE) === true");if(Number.MIN_VALUE<=Number.MIN_VALUE*2!==!0)throw new Test262Error("#8: (Number.MIN_VALUE <= Number.MIN_VALUE*2) === true");


if(!(Number.MAX_VALUE/2<=Number.MAX_VALUE))throw new Test262Error("#7: (Number.MAX_VALUE/2 <= Number.MAX_VALUE) === true");if(!(Number.MIN_VALUE<=Number.MIN_VALUE*2))throw new Test262Error("#8: (Number.MIN_VALUE <= Number.MIN_VALUE*2) === true");



test262/test/language/expressions/less-than-or-equal/bigint-and-bigint.js


assert.sameValue(0n<=0n,!0,"The result of (0n <= 0n) is true"),assert.sameValue(1n<=1n,!0,"The result of (1n <= 1n) is true"),assert.sameValue(-1n<=-1n,!0,"The result of (-1n <= -1n) is true"),assert.sameValue(0n<=0n,!0,"The result of (0n <= -0n) is true"),assert.sameValue(0n<=0n,!0,"The result of (-0n <= 0n) is true"),assert.sameValue(0n<=1n,!0,"The result of (0n <= 1n) is true"),assert.sameValue(1n<=0n,!1,"The result of (1n <= 0n) is false"),assert.sameValue(0n<=-1n,!1,"The result of (0n <= -1n) is false"),assert.sameValue(-1n<=0n,!0,"The result of (-1n <= 0n) is true"),assert.sameValue(1n<=-1n,!1,"The result of (1n <= -1n) is false"),assert.sameValue(-1n<=1n,!0,"The result of (-1n <= 1n) is true"),assert.sameValue(0x1fffffffffffff01n<=0x1fffffffffffff02n,!0,"The result of (0x1fffffffffffff01n <= 0x1fffffffffffff02n) is true"),assert.sameValue(0x1fffffffffffff02n<=0x1fffffffffffff01n,!1,"The result of (0x1fffffffffffff02n <= 0x1fffffffffffff01n) is false"),assert.sameValue(-2305843009213693697n<=-2305843009213693698n,!1,"The result of (-0x1fffffffffffff01n <= -0x1fffffffffffff02n) is false"),assert.sameValue(-2305843009213693698n<=-2305843009213693697n,!0,"The result of (-0x1fffffffffffff02n <= -0x1fffffffffffff01n) is true"),assert.sameValue(0x10000000000000000n<=0n,!1,"The result of (0x10000000000000000n <= 0n) is false"),assert.sameValue(0n<=0x10000000000000000n,!0,"The result of (0n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<=1n,!1,"The result of (0x10000000000000000n <= 1n) is false"),assert.sameValue(1n<=0x10000000000000000n,!0,"The result of (1n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<=-1n,!1,"The result of (0x10000000000000000n <= -1n) is false"),assert.sameValue(-1n<=0x10000000000000000n,!0,"The result of (-1n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000001n<=0n,!1,"The result of (0x10000000000000001n <= 0n) is false"),assert.sameValue(0n<=0x10000000000000001n,!0,"The result of (0n <= 0x10000000000000001n) is true"),assert.sameValue(-18446744073709551616n<=0n,!0,"The result of (-0x10000000000000000n <= 0n) is true"),assert.sameValue(0n<=-18446744073709551616n,!1,"The result of (0n <= -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551616n<=1n,!0,"The result of (-0x10000000000000000n <= 1n) is true"),assert.sameValue(1n<=-18446744073709551616n,!1,"The result of (1n <= -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551616n<=-1n,!0,"The result of (-0x10000000000000000n <= -1n) is true"),assert.sameValue(-1n<=-18446744073709551616n,!1,"The result of (-1n <= -0x10000000000000000n) is false"),assert.sameValue(-18446744073709551617n<=0n,!0,"The result of (-0x10000000000000001n <= 0n) is true"),assert.sameValue(0n<=-18446744073709551617n,!1,"The result of (0n <= -0x10000000000000001n) is false"),assert.sameValue(0x10000000000000000n<=0x100000000n,!1,"The result of (0x10000000000000000n <= 0x100000000n) is false"),assert.sameValue(0x100000000n<=0x10000000000000000n,!0,"The result of (0x100000000n <= 0x10000000000000000n) is true");


assert.sameValue(0n<=0n,!0,"The result of (0n <= 0n) is true"),assert.sameValue(1n<=1n,!0,"The result of (1n <= 1n) is true"),assert.sameValue(-1n<=-1n,!0,"The result of (-1n <= -1n) is true"),assert.sameValue(0n<=-0n,!0,"The result of (0n <= -0n) is true"),assert.sameValue(-0n<=0n,!0,"The result of (-0n <= 0n) is true"),assert.sameValue(0n<=1n,!0,"The result of (0n <= 1n) is true"),assert.sameValue(1n<=0n,!1,"The result of (1n <= 0n) is false"),assert.sameValue(0n<=-1n,!1,"The result of (0n <= -1n) is false"),assert.sameValue(-1n<=0n,!0,"The result of (-1n <= 0n) is true"),assert.sameValue(1n<=-1n,!1,"The result of (1n <= -1n) is false"),assert.sameValue(-1n<=1n,!0,"The result of (-1n <= 1n) is true"),assert.sameValue(0x1fffffffffffff01n<=0x1fffffffffffff02n,!0,"The result of (0x1fffffffffffff01n <= 0x1fffffffffffff02n) is true"),assert.sameValue(0x1fffffffffffff02n<=0x1fffffffffffff01n,!1,"The result of (0x1fffffffffffff02n <= 0x1fffffffffffff01n) is false"),assert.sameValue(-0x1fffffffffffff01n<=-0x1fffffffffffff02n,!1,"The result of (-0x1fffffffffffff01n <= -0x1fffffffffffff02n) is false"),assert.sameValue(-0x1fffffffffffff02n<=-0x1fffffffffffff01n,!0,"The result of (-0x1fffffffffffff02n <= -0x1fffffffffffff01n) is true"),assert.sameValue(0x10000000000000000n<=0n,!1,"The result of (0x10000000000000000n <= 0n) is false"),assert.sameValue(0n<=0x10000000000000000n,!0,"The result of (0n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<=1n,!1,"The result of (0x10000000000000000n <= 1n) is false"),assert.sameValue(1n<=0x10000000000000000n,!0,"The result of (1n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000000n<=-1n,!1,"The result of (0x10000000000000000n <= -1n) is false"),assert.sameValue(-1n<=0x10000000000000000n,!0,"The result of (-1n <= 0x10000000000000000n) is true"),assert.sameValue(0x10000000000000001n<=0n,!1,"The result of (0x10000000000000001n <= 0n) is false"),assert.sameValue(0n<=0x10000000000000001n,!0,"The result of (0n <= 0x10000000000000001n) is true"),assert.sameValue(-0x10000000000000000n<=0n,!0,"The result of (-0x10000000000000000n <= 0n) is true"),assert.sameValue(0n<=-0x10000000000000000n,!1,"The result of (0n <= -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000000n<=1n,!0,"The result of (-0x10000000000000000n <= 1n) is true"),assert.sameValue(1n<=-0x10000000000000000n,!1,"The result of (1n <= -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000000n<=-1n,!0,"The result of (-0x10000000000000000n <= -1n) is true"),assert.sameValue(-1n<=-0x10000000000000000n,!1,"The result of (-1n <= -0x10000000000000000n) is false"),assert.sameValue(-0x10000000000000001n<=0n,!0,"The result of (-0x10000000000000001n <= 0n) is true"),assert.sameValue(0n<=-0x10000000000000001n,!1,"The result of (0n <= -0x10000000000000001n) is false"),assert.sameValue(0x10000000000000000n<=0x100000000n,!1,"The result of (0x10000000000000000n <= 0x100000000n) is false"),assert.sameValue(0x100000000n<=0x10000000000000000n,!0,"The result of (0x100000000n <= 0x10000000000000000n) is true");



test262/test/language/expressions/call/S11.2.3_A3_T1.js


try{throw(!0)(),new Test262Error("#1.1: true() throw TypeError. Actual: "+(!0)())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: true() throw TypeError. Actual: "+e)}try{var x=!0;x();throw new Test262Error("#2.1: var x = true; x() throw TypeError. Actual: "+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: var x = true; x() throw TypeError. Actual: "+e)}


try{throw(!0)(),new Test262Error("#1.1: true() throw TypeError. Actual: "+(!0)())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: true() throw TypeError. Actual: "+e)}try{var x=!0;throw x(),new Test262Error("#2.1: var x = true; x() throw TypeError. Actual: "+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: var x = true; x() throw TypeError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A2.4_T1.js


var x=0;if((x=1)<=x!==!0)throw new Test262Error("#1: var x = 0; (x = 1) <= x === true");var x=1;if(x<=(x=0)!==!1)throw new Test262Error("#2: var x = 1; x <= (x = 0) === false");


var x=0;if(!((x=1)<=x))throw new Test262Error("#1: var x = 0; (x = 1) <= x === true");var x=1;if(x<=(x=0))throw new Test262Error("#2: var x = 1; x <= (x = 0) === false");



test262/test/language/expressions/call/S11.2.3_A2.js


try{throw x(),new Test262Error("#1.1: x() throw ReferenceError. Actual: "+x())}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x() throw ReferenceError. Actual: "+e)}try{throw x(1,2,3),new Test262Error("#2.1: x(1,2,3) throw ReferenceError. Actual: "+x(1,2,3))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#2.2: x(1,2,3) throw ReferenceError. Actual: "+e)}


try{throw x(),new Test262Error("#1.1: x() throw ReferenceError. Actual: "+x())}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x() throw ReferenceError. Actual: "+e)}try{throw x(1,2,3),new Test262Error("#2.1: x(1,2,3) throw ReferenceError. Actual: "+x(1,2,3))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#2.2: x(1,2,3) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A4.3.js


if(Number.NEGATIVE_INFINITY<=Number.NEGATIVE_INFINITY!==!0)throw new Test262Error("#4: (-Infinity <= -Infinity) === true");if(Number.POSITIVE_INFINITY<=Number.POSITIVE_INFINITY!==!0)throw new Test262Error("#5: (+Infinity <= +Infinity) === true");if(Number.MAX_VALUE<=Number.MAX_VALUE!==!0)throw new Test262Error("#6: (Number.MAX_VALUE <= Number.MAX_VALUE) === true");if(Number.MIN_VALUE<=Number.MIN_VALUE!==!0)throw new Test262Error("#7: (Number.MIN_VALUE <= Number.MIN_VALUE) === true");


if(!(Number.NEGATIVE_INFINITY<=Number.NEGATIVE_INFINITY))throw new Test262Error("#4: (-Infinity <= -Infinity) === true");if(!(Number.POSITIVE_INFINITY<=Number.POSITIVE_INFINITY))throw new Test262Error("#5: (+Infinity <= +Infinity) === true");if(!(Number.MAX_VALUE<=Number.MAX_VALUE))throw new Test262Error("#6: (Number.MAX_VALUE <= Number.MAX_VALUE) === true");if(!(Number.MIN_VALUE<=Number.MIN_VALUE))throw new Test262Error("#7: (Number.MIN_VALUE <= Number.MIN_VALUE) === true");



test262/test/language/expressions/less-than-or-equal/S11.8.3_A3.1_T1.2.js


if(new Number(1)<=1!==!0)throw new Test262Error("#2: new Number(1) <= 1 === true");if(1<=new Number(1)!==!0)throw new Test262Error("#3: 1 <= new Number(1) === true");if(new Number(1)<=new Number(1)!==!0)throw new Test262Error("#4: new Number(1) <= new Number(1) === true");


if(!(new Number(1)<=1))throw new Test262Error("#2: new Number(1) <= 1 === true");if(!(1<=new Number(1)))throw new Test262Error("#3: 1 <= new Number(1) === true");if(!(new Number(1)<=new Number(1)))throw new Test262Error("#4: new Number(1) <= new Number(1) === true");



test262/test/built-ins/Iterator/prototype/reduce/reducer-memo-can-be-any-type.js


const values=[void 0,null,!0,!1,0,-0,1,NaN,Infinity,"string",Symbol(),0n,{},[],()=>{}];let iter=values[Symbol.iterator](),assertionCount=0,initialValue={},result=iter.reduce((memo,v,count)=>(count==0?assert.sameValue(memo,initialValue):assert.sameValue(memo,values[count-1]),++assertionCount,v),initialValue);assert.sameValue(result,values[values.length-1]);assert.sameValue(assertionCount,values.length);


const values=[void 0,null,!0,!1,0,-0,1,NaN,1/0,"string",Symbol(),0n,{},[],()=>{}];let iter=values[Symbol.iterator](),assertionCount=0,initialValue={},result=iter.reduce((memo,v,count)=>(count==0?assert.sameValue(memo,initialValue):assert.sameValue(memo,values[count-1]),++assertionCount,v),initialValue);assert.sameValue(result,values[values.length-1]),assert.sameValue(assertionCount,values.length);



test262/test/language/expressions/call/S11.2.3_A3_T5.js


try{throw null(),new Test262Error("#1.1: null() throw TypeError. Actual: "+null())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: null() throw TypeError. Actual: "+e)}try{var x=null;x();throw new Test262Error("#2.1: var x = null; x() throw TypeError. Actual: "+x())}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#2.2: var x = null; x() throw TypeError. Actual: "+e)}


try{throw null(),new Test262Error("#1.1: null() throw TypeError. Actual: "+null())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: null() throw TypeError. Actual: "+e)}try{var x=null;throw x(),new Test262Error("#2.1: var x = null; x() throw TypeError. Actual: "+x())}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#2.2: var x = null; x() throw TypeError. Actual: "+e)}



test262/test/language/expressions/less-than-or-equal/S11.8.3_A2.4_T4.js


if((y=1)<=y!==!0)throw new Test262Error("#1: (y = 1) <= y === true");


if(!((y=1)<=y))throw new Test262Error("#1: (y = 1) <= y === true");



test262/test/language/expressions/object/ident-name-method-def-public-escaped.js


var obj={public(){return 42}};assert.sameValue(obj["public"](),42,"property exists");


var obj={public(){return 42}};assert.sameValue(obj.public(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-this-escaped.js


var obj={this:42};assert.sameValue(obj["this"],42,"property exists");


var obj={this:42};assert.sameValue(obj.this,42,"property exists");



test262/test/language/expressions/call/spread-mult-empty.js


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1})(1,2,3,...[]);assert.sameValue(callCount,1);


var callCount=0;(function(){assert.sameValue(arguments.length,3),assert.sameValue(arguments[0],1),assert.sameValue(arguments[1],2),assert.sameValue(arguments[2],3),callCount+=1})(1,2,3),assert.sameValue(callCount,1);



test262/test/language/expressions/object/method-definition/async-gen-yield-star-getiter-async-returns-undefined-throw.js


var obj={get[Symbol.iterator](){throw new Test262Error("it should not get Symbol.iterator")},[Symbol.asyncIterator](){return}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v.constructor,TypeError,"TypeError"),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE);assert.sameValue(callCount,1);


var obj={get[Symbol.iterator](){throw new Test262Error("it should not get Symbol.iterator")},[Symbol.asyncIterator](){}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v.constructor,TypeError,"TypeError"),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE),assert.sameValue(callCount,1);



test262/test/language/expressions/strict-equals/S11.9.4_A1.js


if(!eval("1	===	1"))throw new Test262Error("#1: 1\\u0009===\\u00091");if(!eval("1\v===\v1"))throw new Test262Error("#2: 1\\u000B===\\u000B1");if(!eval("1\f===\f1"))throw new Test262Error("#3: 1\\u000C===\\u000C1");if(!eval("1 === 1"))throw new Test262Error("#4: 1\\u0020===\\u00201");if(!eval("1\xA0===\xA01"))throw new Test262Error("#5: 1\\u00A0===\\u00A01");if(!eval("1\n===\n1"))throw new Test262Error("#6: 1\\u000A===\\u000A1");if(!eval("1\r===\r1"))throw new Test262Error("#7: 1\\u000D===\\u000D1");if(!eval("1\u2028===\u20281"))throw new Test262Error("#8: 1\\u2028===\\u20281");if(!eval("1\u2029===\u20291"))throw new Test262Error("#9: 1\\u2029===\\u20291");if(!eval("1	\v\f \xA0\n\r\u2028\u2029===	\v\f \xA0\n\r\u2028\u20291"))throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029===\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291");


if(!eval("1	===	1"))throw new Test262Error("#1: 1\\u0009===\\u00091");if(!eval("1\v===\v1"))throw new Test262Error("#2: 1\\u000B===\\u000B1");if(!eval("1\f===\f1"))throw new Test262Error("#3: 1\\u000C===\\u000C1");if(!eval("1 === 1"))throw new Test262Error("#4: 1\\u0020===\\u00201");if(!eval("1\xA0===\xA01"))throw new Test262Error("#5: 1\\u00A0===\\u00A01");if(!eval(`1
===
1`))throw new Test262Error("#6: 1\\u000A===\\u000A1");if(!eval("1\r===\r1"))throw new Test262Error("#7: 1\\u000D===\\u000D1");if(!eval("1\u2028===\u20281"))throw new Test262Error("#8: 1\\u2028===\\u20281");if(!eval("1\u2029===\u20291"))throw new Test262Error("#9: 1\\u2029===\\u20291");if(!eval(`1	\v\f \xA0
\r\u2028\u2029===	\v\f \xA0
\r\u2028\u20291`))throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029===\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291");



test262/test/language/expressions/strict-equals/S11.9.4_A2.1_T2.js


try{throw x===1,new Test262Error("#1.1: x === 1 throw ReferenceError. Actual: "+(x===1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x === 1 throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: x === 1 throw ReferenceError. Actual: "+(x===1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x === 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/strict-equals/S11.9.4_A2.1_T3.js


try{throw 1===y,new Test262Error("#1.1: 1 === y throw ReferenceError. Actual: "+(1===y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 === y throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: 1 === y throw ReferenceError. Actual: "+(y===1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 === y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/strict-equals/S11.9.4_A2.4_T3.js


try{throw x===(x=1),new Test262Error("#1.1: x === (x = 1) throw ReferenceError. Actual: "+(x===(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x === (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x,x=1,new Test262Error("#1.1: x === (x = 1) throw ReferenceError. Actual: "+(x===(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x === (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Iterator/prototype/drop/underlying-iterator-advanced-in-parallel.js


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),dropped=iterator.drop(2),{value,done}=iterator.next();assert.sameValue(value,0);assert.sameValue(done,!1);({value,done}=dropped.next());assert.sameValue(value,3);assert.sameValue(done,!1);({value,done}=dropped.next());assert.sameValue(value,4);assert.sameValue(done,!1);({value,done}=dropped.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),dropped=iterator.drop(2),{value,done}=iterator.next();assert.sameValue(value,0),assert.sameValue(done,!1),{value,done}=dropped.next(),assert.sameValue(value,3),assert.sameValue(done,!1),{value,done}=dropped.next(),assert.sameValue(value,4),assert.sameValue(done,!1),{value,done}=dropped.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/method-definition/async-gen-yield-star-getiter-sync-returns-undefined-throw.js


var obj={[Symbol.iterator](){return}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v.constructor,TypeError,"TypeError"),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE);assert.sameValue(callCount,1);


var obj={[Symbol.iterator](){}},callCount=0,gen={async*method(){throw callCount+=1,yield*obj,new Test262Error("abrupt completion closes iter")}}.method,iter=gen();iter.next().then(()=>{throw new Test262Error("Promise incorrectly fulfilled.")},v=>{assert.sameValue(v.constructor,TypeError,"TypeError"),iter.next().then(({done,value})=>{assert.sameValue(done,!0,"the iterator is completed"),assert.sameValue(value,void 0,"value is undefined")}).then($DONE,$DONE)}).catch($DONE),assert.sameValue(callCount,1);



test262/test/built-ins/Object/fromEntries/string-entry-string-object-succeeds.js


var result=Object.fromEntries([new String("ab")]);assert.sameValue(result["a"],"b");


var result=Object.fromEntries([new String("ab")]);assert.sameValue(result.a,"b");



test262/test/language/expressions/greater-than/S11.8.2_A1.js


if(eval("0	>	1")!==!1)throw new Test262Error("#1: 0\\u0009>\\u00091) === false");if(eval("0\v>\v1")!==!1)throw new Test262Error("#2: 0\\u000B>\\u000B1) === false");if(eval("0\f>\f1")!==!1)throw new Test262Error("#3: (0\\u000C>\\u000C1) === false");if(eval("0 > 1")!==!1)throw new Test262Error("#4: (0\\u0020>\\u00201) === false");if(eval("0\xA0>\xA01")!==!1)throw new Test262Error("#5: (0\\u00A0>\\u00A01) === false");if(eval("0\n>\n1")!==!1)throw new Test262Error("#6: (0\\u000A>\\u000A1) === false");if(eval("0\r>\r1")!==!1)throw new Test262Error("#7: (0\\u000D>\\u000D1) === false");if(eval("0\u2028>\u20281")!==!1)throw new Test262Error("#8: (0\\u2028>\\u20281) === false");if(eval("0\u2029>\u20291")!==!1)throw new Test262Error("#9: (0\\u2029>\\u20291) === false");if(eval("1	\v\f \xA0\n\r\u2028\u2029>=	\v\f \xA0\n\r\u2028\u20291")!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");


if(eval("0	>	1")!==!1)throw new Test262Error("#1: 0\\u0009>\\u00091) === false");if(eval("0\v>\v1")!==!1)throw new Test262Error("#2: 0\\u000B>\\u000B1) === false");if(eval("0\f>\f1")!==!1)throw new Test262Error("#3: (0\\u000C>\\u000C1) === false");if(eval("0 > 1")!==!1)throw new Test262Error("#4: (0\\u0020>\\u00201) === false");if(eval("0\xA0>\xA01")!==!1)throw new Test262Error("#5: (0\\u00A0>\\u00A01) === false");if(eval(`0
>
1`)!==!1)throw new Test262Error("#6: (0\\u000A>\\u000A1) === false");if(eval("0\r>\r1")!==!1)throw new Test262Error("#7: (0\\u000D>\\u000D1) === false");if(eval("0\u2028>\u20281")!==!1)throw new Test262Error("#8: (0\\u2028>\\u20281) === false");if(eval("0\u2029>\u20291")!==!1)throw new Test262Error("#9: (0\\u2029>\\u20291) === false");if(eval(`1	\v\f \xA0
\r\u2028\u2029>=	\v\f \xA0
\r\u2028\u20291`)!==!0)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === true");



test262/test/built-ins/Object/fromEntries/string-entry-object-succeeds.js


var result=Object.fromEntries([Object("ab")]);assert.sameValue(result["a"],"b");


var result=Object.fromEntries([Object("ab")]);assert.sameValue(result.a,"b");



test262/test/built-ins/Object/S15.2.1.1_A2_T12.js


var obj=Object(1.1*([].length+{q:1}["q"]));assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"');assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number");assert(obj==1.1,"The result of evaluating (obj == 1.1) is expected to be true");assert.notSameValue(obj,1.1,"The value of obj is not 1.1");


var obj=Object(1.1*([].length+1));assert.sameValue(typeof obj,"object",'The value of `typeof obj` is expected to be "object"'),assert.sameValue(obj.constructor,Number,"The value of obj.constructor is expected to equal the value of Number"),assert(obj==1.1,"The result of evaluating (obj == 1.1) is expected to be true"),assert.notSameValue(obj,1.1,"The value of obj is not 1.1");



test262/test/language/expressions/greater-than/S11.8.2_A2.4_T4.js


if((y=1)>y!==!1)throw new Test262Error("#1: (y = 1) > y === false");


if((y=1)>y)throw new Test262Error("#1: (y = 1) > y === false");



test262/test/language/expressions/greater-than/S11.8.2_A4.10.js


var x="x";if(x>x+"y"!==!1)throw new Test262Error('#6: var x = "x"; (x > x + "y") === false');


var x="x";if(x>x+"y")throw new Test262Error('#6: var x = "x"; (x > x + "y") === false');



test262/test/language/expressions/greater-than/S11.8.2_A2.4_T1.js


var x=0;if((x=1)>x!==!1)throw new Test262Error("#1: var x = 0; (x = 1) > x === false");var x=1;if(x>(x=0)!==!0)throw new Test262Error("#2: var x = 1; x > (x = 0) === true");


var x=0;if((x=1)>x)throw new Test262Error("#1: var x = 0; (x = 1) > x === false");var x=1;if(!(x>(x=0)))throw new Test262Error("#2: var x = 1; x > (x = 0) === true");



test262/test/language/expressions/greater-than/S11.8.2_A4.11.js


var x="x";if(x+"y">x!==!0)throw new Test262Error('#6: var x = "x"; (x + "y" > x) === true');


var x="x";if(!(x+"y">x))throw new Test262Error('#6: var x = "x"; (x + "y" > x) === true');



test262/test/language/expressions/object/method-definition/name-prop-name-eval-error.js


assert.throws(Test262Error,function(){({[function(){throw new Test262Error}()](){}})});


assert.throws(Test262Error,function(){(function(){throw new Test262Error})()+""});



test262/test/built-ins/Iterator/prototype/map/iterator-already-exhausted.js


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0);assert.sameValue(done,!0);iterator=iterator.map(()=>0);({value,done}=iterator.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0),assert.sameValue(done,!0),iterator=iterator.map(()=>0),{value,done}=iterator.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/greater-than/bigint-and-bigint.js


assert.sameValue(0n>0n,!1,"The result of (0n > 0n) is false"),assert.sameValue(1n>1n,!1,"The result of (1n > 1n) is false"),assert.sameValue(-1n>-1n,!1,"The result of (-1n > -1n) is false"),assert.sameValue(0n>0n,!1,"The result of (0n > -0n) is false"),assert.sameValue(0n>0n,!1,"The result of (-0n > 0n) is false"),assert.sameValue(0n>1n,!1,"The result of (0n > 1n) is false"),assert.sameValue(1n>0n,!0,"The result of (1n > 0n) is true"),assert.sameValue(0n>-1n,!0,"The result of (0n > -1n) is true"),assert.sameValue(-1n>0n,!1,"The result of (-1n > 0n) is false"),assert.sameValue(1n>-1n,!0,"The result of (1n > -1n) is true"),assert.sameValue(-1n>1n,!1,"The result of (-1n > 1n) is false"),assert.sameValue(0x1fffffffffffff01n>0x1fffffffffffff02n,!1,"The result of (0x1fffffffffffff01n > 0x1fffffffffffff02n) is false"),assert.sameValue(0x1fffffffffffff02n>0x1fffffffffffff01n,!0,"The result of (0x1fffffffffffff02n > 0x1fffffffffffff01n) is true"),assert.sameValue(-2305843009213693697n>-2305843009213693698n,!0,"The result of (-0x1fffffffffffff01n > -0x1fffffffffffff02n) is true"),assert.sameValue(-2305843009213693698n>-2305843009213693697n,!1,"The result of (-0x1fffffffffffff02n > -0x1fffffffffffff01n) is false"),assert.sameValue(0x10000000000000000n>0n,!0,"The result of (0x10000000000000000n > 0n) is true"),assert.sameValue(0n>0x10000000000000000n,!1,"The result of (0n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>1n,!0,"The result of (0x10000000000000000n > 1n) is true"),assert.sameValue(1n>0x10000000000000000n,!1,"The result of (1n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>-1n,!0,"The result of (0x10000000000000000n > -1n) is true"),assert.sameValue(-1n>0x10000000000000000n,!1,"The result of (-1n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000001n>0n,!0,"The result of (0x10000000000000001n > 0n) is true"),assert.sameValue(0n>0x10000000000000001n,!1,"The result of (0n > 0x10000000000000001n) is false"),assert.sameValue(-18446744073709551616n>0n,!1,"The result of (-0x10000000000000000n > 0n) is false"),assert.sameValue(0n>-18446744073709551616n,!0,"The result of (0n > -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551616n>1n,!1,"The result of (-0x10000000000000000n > 1n) is false"),assert.sameValue(1n>-18446744073709551616n,!0,"The result of (1n > -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551616n>-1n,!1,"The result of (-0x10000000000000000n > -1n) is false"),assert.sameValue(-1n>-18446744073709551616n,!0,"The result of (-1n > -0x10000000000000000n) is true"),assert.sameValue(-18446744073709551617n>0n,!1,"The result of (-0x10000000000000001n > 0n) is false"),assert.sameValue(0n>-18446744073709551617n,!0,"The result of (0n > -0x10000000000000001n) is true"),assert.sameValue(0x10000000000000000n>0x100000000n,!0,"The result of (0x10000000000000000n > 0x100000000n) is true"),assert.sameValue(0x100000000n>0x10000000000000000n,!1,"The result of (0x100000000n > 0x10000000000000000n) is false");


assert.sameValue(0n>0n,!1,"The result of (0n > 0n) is false"),assert.sameValue(1n>1n,!1,"The result of (1n > 1n) is false"),assert.sameValue(-1n>-1n,!1,"The result of (-1n > -1n) is false"),assert.sameValue(0n>-0n,!1,"The result of (0n > -0n) is false"),assert.sameValue(-0n>0n,!1,"The result of (-0n > 0n) is false"),assert.sameValue(0n>1n,!1,"The result of (0n > 1n) is false"),assert.sameValue(1n>0n,!0,"The result of (1n > 0n) is true"),assert.sameValue(0n>-1n,!0,"The result of (0n > -1n) is true"),assert.sameValue(-1n>0n,!1,"The result of (-1n > 0n) is false"),assert.sameValue(1n>-1n,!0,"The result of (1n > -1n) is true"),assert.sameValue(-1n>1n,!1,"The result of (-1n > 1n) is false"),assert.sameValue(0x1fffffffffffff01n>0x1fffffffffffff02n,!1,"The result of (0x1fffffffffffff01n > 0x1fffffffffffff02n) is false"),assert.sameValue(0x1fffffffffffff02n>0x1fffffffffffff01n,!0,"The result of (0x1fffffffffffff02n > 0x1fffffffffffff01n) is true"),assert.sameValue(-0x1fffffffffffff01n>-0x1fffffffffffff02n,!0,"The result of (-0x1fffffffffffff01n > -0x1fffffffffffff02n) is true"),assert.sameValue(-0x1fffffffffffff02n>-0x1fffffffffffff01n,!1,"The result of (-0x1fffffffffffff02n > -0x1fffffffffffff01n) is false"),assert.sameValue(0x10000000000000000n>0n,!0,"The result of (0x10000000000000000n > 0n) is true"),assert.sameValue(0n>0x10000000000000000n,!1,"The result of (0n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>1n,!0,"The result of (0x10000000000000000n > 1n) is true"),assert.sameValue(1n>0x10000000000000000n,!1,"The result of (1n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000000n>-1n,!0,"The result of (0x10000000000000000n > -1n) is true"),assert.sameValue(-1n>0x10000000000000000n,!1,"The result of (-1n > 0x10000000000000000n) is false"),assert.sameValue(0x10000000000000001n>0n,!0,"The result of (0x10000000000000001n > 0n) is true"),assert.sameValue(0n>0x10000000000000001n,!1,"The result of (0n > 0x10000000000000001n) is false"),assert.sameValue(-0x10000000000000000n>0n,!1,"The result of (-0x10000000000000000n > 0n) is false"),assert.sameValue(0n>-0x10000000000000000n,!0,"The result of (0n > -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000000n>1n,!1,"The result of (-0x10000000000000000n > 1n) is false"),assert.sameValue(1n>-0x10000000000000000n,!0,"The result of (1n > -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000000n>-1n,!1,"The result of (-0x10000000000000000n > -1n) is false"),assert.sameValue(-1n>-0x10000000000000000n,!0,"The result of (-1n > -0x10000000000000000n) is true"),assert.sameValue(-0x10000000000000001n>0n,!1,"The result of (-0x10000000000000001n > 0n) is false"),assert.sameValue(0n>-0x10000000000000001n,!0,"The result of (0n > -0x10000000000000001n) is true"),assert.sameValue(0x10000000000000000n>0x100000000n,!0,"The result of (0x10000000000000000n > 0x100000000n) is true"),assert.sameValue(0x100000000n>0x10000000000000000n,!1,"The result of (0x100000000n > 0x10000000000000000n) is false");



test262/test/built-ins/Object/create/15.2.3.5-4-178.js


var newObj=Object.create({},{prop:{writable:!0}}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var newObj=Object.create({},{prop:{writable:!0}}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/greater-than/S11.8.2_A3.2_T1.2.js


if({}>function(){return 1}!=={}.toString()>function(){return 1}.toString())throw new Test262Error("#1: ({} > function(){return 1}) === ({}.toString() > function(){return 1}.toString())");if(function(){return 1}>{}!==function(){return 1}.toString()>{}.toString())throw new Test262Error("#2: (function(){return 1} > {}) === (function(){return 1}.toString() > {}.toString())");if(function(){return 1}>function(){return 1}!==function(){return 1}.toString()>function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} > function(){return 1}) === (function(){return 1}.toString() > function(){return 1}.toString())");if({}>{}!=={}.toString()>{}.toString())throw new Test262Error("#4: ({} > {}) === ({}.toString() > {}.toString())");


if({}>function(){return 1}!={}.toString()>function(){return 1}.toString())throw new Test262Error("#1: ({} > function(){return 1}) === ({}.toString() > function(){return 1}.toString())");if(function(){return 1}>{}!=function(){return 1}.toString()>{}.toString())throw new Test262Error("#2: (function(){return 1} > {}) === (function(){return 1}.toString() > {}.toString())");if(function(){return 1}>function(){return 1}!=function(){return 1}.toString()>function(){return 1}.toString())throw new Test262Error("#3: (function(){return 1} > function(){return 1}) === (function(){return 1}.toString() > function(){return 1}.toString())");if({}>{}!={}.toString()>{}.toString())throw new Test262Error("#4: ({} > {}) === ({}.toString() > {}.toString())");



test262/test/language/expressions/greater-than/S11.8.2_A2.4_T3.js


try{throw x>(x=1),new Test262Error("#1.1: x > (x = 1) throw ReferenceError. Actual: "+(x>(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x > (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x>(x=1),new Test262Error("#1.1: x > (x = 1) throw ReferenceError. Actual: "+(x>(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x > (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Iterator/prototype/map/underlying-iterator-advanced-in-parallel.js


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),mapped=iterator.map(x=>x),{value,done}=iterator.next();assert.sameValue(value,0);assert.sameValue(done,!1);iterator.next();iterator.next();({value,done}=mapped.next());assert.sameValue(value,3);assert.sameValue(done,!1);({value,done}=mapped.next());assert.sameValue(value,4);assert.sameValue(done,!1);({value,done}=mapped.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),mapped=iterator.map(x=>x),{value,done}=iterator.next();assert.sameValue(value,0),assert.sameValue(done,!1),iterator.next(),iterator.next(),{value,done}=mapped.next(),assert.sameValue(value,3),assert.sameValue(done,!1),{value,done}=mapped.next(),assert.sameValue(value,4),assert.sameValue(done,!1),{value,done}=mapped.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/greater-than/S11.8.2_A4.9.js


if(Number.MAX_VALUE>Number.MAX_VALUE/2!==!0)throw new Test262Error("#7: (Number.MAX_VALUE > Number.MAX_VALUE/2) === true");if(Number.MIN_VALUE*2>Number.MIN_VALUE!==!0)throw new Test262Error("#8: (Number.MIN_VALUE*2 > Number.MIN_VALUE) === true");


if(!(Number.MAX_VALUE>Number.MAX_VALUE/2))throw new Test262Error("#7: (Number.MAX_VALUE > Number.MAX_VALUE/2) === true");if(!(Number.MIN_VALUE*2>Number.MIN_VALUE))throw new Test262Error("#8: (Number.MIN_VALUE*2 > Number.MIN_VALUE) === true");



test262/test/intl402/Locale/invalid-tag-throws-number.js


assert.sameValue(typeof Intl.Locale,"function"),assert.throws(TypeError,function(){new Intl.Locale(0)},"0 is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(1)},"1 is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(Infinity)},"Infinity is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(NaN)},"NaN is an invalid tag value");


assert.sameValue(typeof Intl.Locale,"function"),assert.throws(TypeError,function(){new Intl.Locale(0)},"0 is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(1)},"1 is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(1/0)},"Infinity is an invalid tag value"),assert.throws(TypeError,function(){new Intl.Locale(NaN)},"NaN is an invalid tag value");



test262/test/language/expressions/greater-than/S11.8.2_A2.1_T3.js


try{throw 1>y,new Test262Error("#1.1: 1 > y throw ReferenceError. Actual: "+(1>y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 > y throw ReferenceError. Actual: "+e)}


try{throw 1>y,new Test262Error("#1.1: 1 > y throw ReferenceError. Actual: "+(1>y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 > y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/greater-than/S11.8.2_A2.1_T2.js


try{throw x>1,new Test262Error("#1.1: x > 1 throw ReferenceError. Actual: "+(x>1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x > 1 throw ReferenceError. Actual: "+e)}


try{throw x>1,new Test262Error("#1.1: x > 1 throw ReferenceError. Actual: "+(x>1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x > 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.9.js


try{var z=x&=1;throw new Test262Error("#1.1: x &= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x &= 1 throw ReferenceError. Actual: "+e)}


try{var z=x&=1;throw new Test262Error("#1.1: x &= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x &= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-let-escaped.js


var obj={let(){return 42}};assert.sameValue(obj["let"](),42,"property exists");


var obj={let(){return 42}};assert.sameValue(obj.let(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-finally-escaped.js


var obj={finally:42};assert.sameValue(obj["finally"],42,"property exists");


var obj={finally:42};assert.sameValue(obj.finally,42,"property exists");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.11.js


try{var x=1,z=x|=y;throw new Test262Error("#1.1: var x = 1; x |= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x |= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x|=y;throw new Test262Error("#1.1: var x = 1; x |= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x |= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-extends.js


var obj={extends(){return 42}};assert.sameValue(obj["extends"](),42,"property exists");


var obj={extends(){return 42}};assert.sameValue(obj.extends(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-default.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-extends-escaped-ext.js


var obj={extends(){return 42}};assert.sameValue(obj["extends"](),42,"property exists");


var obj={extends(){return 42}};assert.sameValue(obj.extends(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-do-escaped.js


var obj={do:42};assert.sameValue(obj["do"],42,"property exists");


var obj={do:42};assert.sameValue(obj.do,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-default-escaped.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-new-escaped.js


var obj={new(){return 42}};assert.sameValue(obj["new"](),42,"property exists");


var obj={new(){return 42}};assert.sameValue(obj.new(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-while-escaped.js


var obj={while:42};assert.sameValue(obj["while"],42,"property exists");


var obj={while:42};assert.sameValue(obj.while,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-extends-escaped-ext.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-const-escaped.js


var obj={const(){return 42}};assert.sameValue(obj["const"](),42,"property exists");


var obj={const(){return 42}};assert.sameValue(obj.const(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-instanceof-escaped.js


var obj={instanceof:42};assert.sameValue(obj["instanceof"],42,"property exists");


var obj={instanceof:42};assert.sameValue(obj.instanceof,42,"property exists");



test262/test/built-ins/Iterator/prototype/flatMap/iterator-already-exhausted.js


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0);assert.sameValue(done,!0);iterator=iterator.flatMap(x=>[x]);({value,done}=iterator.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0),assert.sameValue(done,!0),iterator=iterator.flatMap(x=>[x]),{value,done}=iterator.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/ident-name-method-def-switch-escaped.js


var obj={switch(){return 42}};assert.sameValue(obj["switch"](),42,"property exists");


var obj={switch(){return 42}};assert.sameValue(obj.switch(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-case-escaped.js


var obj={case:42};assert.sameValue(obj["case"],42,"property exists");


var obj={case:42};assert.sameValue(obj.case,42,"property exists");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.8.js


try{var x=1,z=x>>>=y;throw new Test262Error("#1.1: var x = 1; x >>>= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x >>>= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x>>>=y;throw new Test262Error("#1.1: var x = 1; x >>>= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x >>>= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-method-def-import-escaped.js


var obj={import(){return 42}};assert.sameValue(obj["import"](),42,"property exists");


var obj={import(){return 42}};assert.sameValue(obj.import(),42,"property exists");



test262/test/language/expressions/object/accessor-name-literal-numeric-hex.js


var stringSet,obj={get[16](){return"get string"},set[16](param){stringSet=param}};assert.sameValue(obj["16"],"get string");obj["16"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get 16(){return"get string"},set 16(param){stringSet=param}};assert.sameValue(obj[16],"get string"),obj[16]="set string",assert.sameValue(stringSet,"set string");



test262/test/built-ins/Iterator/prototype/flatMap/underlying-iterator-advanced-in-parallel.js


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),mapped=iterator.flatMap(x=>[x]),{value,done}=iterator.next();assert.sameValue(value,0);assert.sameValue(done,!1);iterator.next();iterator.next();({value,done}=mapped.next());assert.sameValue(value,3);assert.sameValue(done,!1);({value,done}=mapped.next());assert.sameValue(value,4);assert.sameValue(done,!1);({value,done}=mapped.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),mapped=iterator.flatMap(x=>[x]),{value,done}=iterator.next();assert.sameValue(value,0),assert.sameValue(done,!1),iterator.next(),iterator.next(),{value,done}=mapped.next(),assert.sameValue(value,3),assert.sameValue(done,!1),{value,done}=mapped.next(),assert.sameValue(value,4),assert.sameValue(done,!1),{value,done}=mapped.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-catch-escaped.js


var obj={catch:42};assert.sameValue(obj["catch"],42,"property exists");


var obj={catch:42};assert.sameValue(obj.catch,42,"property exists");



test262/test/language/expressions/object/prop-def-id-get-error.js


assert.throws(ReferenceError,function(){({unresolvable})});


assert.throws(ReferenceError,function(){unresolvable});



test262/test/language/expressions/object/ident-name-method-def-extends-escaped.js


var obj={extends(){return 42}};assert.sameValue(obj["extends"](),42,"property exists");


var obj={extends(){return 42}};assert.sameValue(obj.extends(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-if-escaped.js


var obj={if:42};assert.sameValue(obj["if"],42,"property exists");


var obj={if:42};assert.sameValue(obj.if,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-with-escaped.js


var obj={with:42};assert.sameValue(obj["with"],42,"property exists");


var obj={with:42};assert.sameValue(obj.with,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-var-escaped.js


var obj={var:42};assert.sameValue(obj["var"],42,"property exists");


var obj={var:42};assert.sameValue(obj.var,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-implements-escaped.js


var obj={implements(){return 42}};assert.sameValue(obj["implements"](),42,"property exists");


var obj={implements(){return 42}};assert.sameValue(obj.implements(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-return-escaped.js


var obj={return(){return 42}};assert.sameValue(obj["return"](),42,"property exists");


var obj={return(){return 42}};assert.sameValue(obj.return(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-try-escaped.js


var obj={try:42};assert.sameValue(obj["try"],42,"property exists");


var obj={try:42};assert.sameValue(obj.try,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-var-escaped.js


var obj={var:42};assert.sameValue(obj["var"],42,"property exists");


var obj={var:42};assert.sameValue(obj.var,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-typeof-escaped.js


var obj={typeof:42};assert.sameValue(obj["typeof"],42,"property exists");


var obj={typeof:42};assert.sameValue(obj.typeof,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-195.js


var numObj=new Number(123);numObj.writable=!0;var newObj=Object.create({},{prop:numObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var numObj=new Number(123);numObj.writable=!0;var newObj=Object.create({},{prop:numObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/ident-name-prop-name-literal-try-escaped.js


var obj={try:42};assert.sameValue(obj["try"],42,"property exists");


var obj={try:42};assert.sameValue(obj.try,42,"property exists");



test262/test/intl402/DurationFormat/prototype/resolvedOptions/throw-invoked-as-func.js


const df=new Intl.DurationFormat;let f=df["resolvedOptions"];assert.sameValue(typeof f,"function");assert.throws(TypeError,()=>{f()});


const df=new Intl.DurationFormat;let f=df.resolvedOptions;assert.sameValue(typeof f,"function"),assert.throws(TypeError,()=>{f()});



test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-string-literal.js


let o={["1"]:"2"};assert.sameValue(o["1"],"2");assert.sameValue(o["1"],"2");


let o={1:"2"};assert.sameValue(o[1],"2"),assert.sameValue(o[1],"2");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-extends-escaped.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-delete-escaped.js


var obj={delete:42};assert.sameValue(obj["delete"],42,"property exists");


var obj={delete:42};assert.sameValue(obj.delete,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-protected-escaped.js


var obj={protected:42};assert.sameValue(obj["protected"],42,"property exists");


var obj={protected:42};assert.sameValue(obj.protected,42,"property exists");



test262/test/built-ins/Iterator/prototype/take/underlying-iterator-advanced-in-parallel.js


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),taken=iterator.take(2),{value,done}=iterator.next();assert.sameValue(value,0);assert.sameValue(done,!1);({value,done}=taken.next());assert.sameValue(value,1);assert.sameValue(done,!1);({value,done}=taken.next());assert.sameValue(value,2);assert.sameValue(done,!1);({value,done}=taken.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),taken=iterator.take(2),{value,done}=iterator.next();assert.sameValue(value,0),assert.sameValue(done,!1),{value,done}=taken.next(),assert.sameValue(value,1),assert.sameValue(done,!1),{value,done}=taken.next(),assert.sameValue(value,2),assert.sameValue(done,!1),{value,done}=taken.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/ident-name-prop-name-literal-catch-escaped.js


var obj={catch:42};assert.sameValue(obj["catch"],42,"property exists");


var obj={catch:42};assert.sameValue(obj.catch,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-enum-escaped.js


var obj={enum:42};assert.sameValue(obj["enum"],42,"property exists");


var obj={enum:42};assert.sameValue(obj.enum,42,"property exists");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T3.8.js


try{var z=x>>>=1;throw new Test262Error("#1.1: x >>>= 1 throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >>>= 1 throw ReferenceError. Actual: "+e)}


try{var z=x>>>=1;throw new Test262Error("#1.1: x >>>= 1 throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >>>= 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/ident-name-prop-name-literal-while-escaped.js


var obj={while:42};assert.sameValue(obj["while"],42,"property exists");


var obj={while:42};assert.sameValue(obj.while,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-200.js


var errorObj=new Error;errorObj.writable=!0;var newObj=Object.create({},{prop:errorObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var errorObj=new Error;errorObj.writable=!0;var newObj=Object.create({},{prop:errorObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/ident-name-prop-name-literal-else-escaped.js


var obj={else:42};assert.sameValue(obj["else"],42,"property exists");


var obj={else:42};assert.sameValue(obj.else,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-public-escaped.js


var obj={public:42};assert.sameValue(obj["public"],42,"property exists");


var obj={public:42};assert.sameValue(obj.public,42,"property exists");



test262/test/intl402/DurationFormat/prototype/formatToParts/throw-invoked-as-func.js


const df=new Intl.DurationFormat;let f=df["formatToParts"];assert.sameValue(typeof f,"function");assert.throws(TypeError,()=>{f({hours:1,minutes:46,seconds:40})});


const df=new Intl.DurationFormat;let f=df.formatToParts;assert.sameValue(typeof f,"function"),assert.throws(TypeError,()=>{f({hours:1,minutes:46,seconds:40})});



test262/test/language/expressions/object/ident-name-prop-name-literal-in-escaped.js


var obj={in:42};assert.sameValue(obj["in"],42,"property exists");


var obj={in:42};assert.sameValue(obj.in,42,"property exists");



test262/test/language/expressions/compound-assignment/S11.13.2_A2.1_T2.10.js


try{var x=1,z=x^=y;throw new Test262Error("#1.1: var x = 1; x ^= y throw ReferenceError. Actual: "+z)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: var x = 1; x ^= y throw ReferenceError. Actual: "+e)}


try{var x=1,z=x^=y;throw new Test262Error("#1.1: var x = 1; x ^= y throw ReferenceError. Actual: "+z)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: var x = 1; x ^= y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/object/accessor-name-literal-string-empty.js


var stringSet,obj={get[""](){return"get string"},set[""](param){stringSet=param}};assert.sameValue(obj[""],"get string");obj[""]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get""(){return"get string"},set""(param){stringSet=param}};assert.sameValue(obj[""],"get string"),obj[""]="set string",assert.sameValue(stringSet,"set string");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-void-escaped.js


var obj={void:42};assert.sameValue(obj["void"],42,"property exists");


var obj={void:42};assert.sameValue(obj.void,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-199.js


JSON.writable=!0;var newObj=Object.create({},{prop:JSON}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


JSON.writable=!0;var newObj=Object.create({},{prop:JSON}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-interface-escaped.js


var obj={interface:42};assert.sameValue(obj["interface"],42,"property exists");


var obj={interface:42};assert.sameValue(obj.interface,42,"property exists");



test262/test/language/function-code/10.4.3-1-44gs.js


if(!function(){"use strict";return function(){return typeof this}()==="undefined"&&typeof this=="undefined"}())throw"'this' had incorrect value!";


if(!function(){"use strict";return function(){return typeof this}()==="undefined"&&typeof this>"u"}())throw"'this' had incorrect value!";



test262/test/language/expressions/object/ident-name-prop-name-literal-package-escaped.js


var obj={package:42};assert.sameValue(obj["package"],42,"property exists");


var obj={package:42};assert.sameValue(obj.package,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-delete-escaped.js


var obj={delete:42};assert.sameValue(obj["delete"],42,"property exists");


var obj={delete:42};assert.sameValue(obj.delete,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-default-escaped-ext.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-180.js


var newObj=Object.create({},{prop:{writable:!0}}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var newObj=Object.create({},{prop:{writable:!0}}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/ident-name-method-def-private-escaped.js


var obj={private(){return 42}};assert.sameValue(obj["private"](),42,"property exists");


var obj={private(){return 42}};assert.sameValue(obj.private(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-debugger-escaped.js


var obj={debugger:42};assert.sameValue(obj["debugger"],42,"property exists");


var obj={debugger:42};assert.sameValue(obj.debugger,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-if-escaped.js


var obj={if(){return 42}};assert.sameValue(obj["if"](),42,"property exists");


var obj={if(){return 42}};assert.sameValue(obj.if(),42,"property exists");



test262/test/language/expressions/object/accessor-name-literal-string-char-escape.js


var stringSet,obj={get["character	escape"](){return"get string"},set["character	escape"](param){stringSet=param}};assert.sameValue(obj["character	escape"],"get string");obj["character	escape"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get"character	escape"(){return"get string"},set"character	escape"(param){stringSet=param}};assert.sameValue(obj["character	escape"],"get string"),obj["character	escape"]="set string",assert.sameValue(stringSet,"set string");



test262/test/built-ins/Object/create/15.2.3.5-4-201.js


var argObj=function(){return arguments}();argObj.writable=!0;var newObj=Object.create({},{prop:argObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var argObj=function(){return arguments}();argObj.writable=!0;var newObj=Object.create({},{prop:argObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/ident-name-method-def-static-escaped.js


var obj={static(){return 42}};assert.sameValue(obj["static"](),42,"property exists");


var obj={static(){return 42}};assert.sameValue(obj.static(),42,"property exists");



test262/test/language/expressions/object/S11.1.5_A1.2.js


var object={1:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {1 : true}; typeof object === "object". Actual: '+typeof object);if(object instanceof Object!==!0)throw new Test262Error("#2: var object = {1 : true}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {1 : true}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object[1]!==!0)throw new Test262Error("#4: var object = {1 : true}; object[1] === true");if(object["1"]!==!0)throw new Test262Error('#5: var object = {1 : true}; object["1"] === true');


var object={1:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {1 : true}; typeof object === "object". Actual: '+typeof object);if(!(object instanceof Object))throw new Test262Error("#2: var object = {1 : true}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {1 : true}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object[1]!==!0)throw new Test262Error("#4: var object = {1 : true}; object[1] === true");if(object[1]!==!0)throw new Test262Error('#5: var object = {1 : true}; object["1"] === true');



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-class-escaped.js


var obj={class:42};assert.sameValue(obj["class"],42,"property exists");


var obj={class:42};assert.sameValue(obj.class,42,"property exists");



test262/test/built-ins/Iterator/prototype/find/iterator-has-no-return.js


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.find(v=>v>3);assert.sameValue(ret,4);let{done,value}=iterator.next();assert.sameValue(done,!1);assert.sameValue(value,5);({done,value}=iterator.next());assert.sameValue(done,!0);assert.sameValue(value,void 0);


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.find(v=>v>3);assert.sameValue(ret,4);let{done,value}=iterator.next();assert.sameValue(done,!1),assert.sameValue(value,5),{done,value}=iterator.next(),assert.sameValue(done,!0),assert.sameValue(value,void 0);



test262/test/language/expressions/object/ident-name-prop-name-literal-continue-escaped.js


var obj={continue:42};assert.sameValue(obj["continue"],42,"property exists");


var obj={continue:42};assert.sameValue(obj.continue,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-default-escaped-ext.js


var obj={default(){return 42}};assert.sameValue(obj["default"](),42,"property exists");


var obj={default(){return 42}};assert.sameValue(obj.default(),42,"property exists");



test262/test/intl402/DurationFormat/prototype/format/rounding-mode-trunc-for-seconds.js


const durations=[{fractionalDigits:0,numericValue:1.5,duration:{seconds:1,milliseconds:500}},{fractionalDigits:3,numericValue:.0015,duration:{milliseconds:1,microseconds:500}},{fractionalDigits:6,numericValue:15e-7,duration:{microseconds:1,nanoseconds:500}}];for(const{numericValue,fractionalDigits,duration}of durations){const df=new Intl.DurationFormat("en",{seconds:"numeric",fractionalDigits}),nf=new Intl.NumberFormat("en",{maximumFractionDigits:fractionalDigits,roundingMode:"trunc"}),expected=nf.format(numericValue);assert.sameValue(df.format(duration),expected,'Intl.DurationFormat should format seconds, milliseconds and microseconds with `roundingMode: "trunc"`')}


const durations=[{fractionalDigits:0,numericValue:1.5,duration:{seconds:1,milliseconds:500}},{fractionalDigits:3,numericValue:.0015,duration:{milliseconds:1,microseconds:500}},{fractionalDigits:6,numericValue:15e-7,duration:{microseconds:1,nanoseconds:500}}];for(const{numericValue,fractionalDigits,duration}of durations){const df=new Intl.DurationFormat("en",{seconds:"numeric",fractionalDigits}),expected=new Intl.NumberFormat("en",{maximumFractionDigits:fractionalDigits,roundingMode:"trunc"}).format(numericValue);assert.sameValue(df.format(duration),expected,'Intl.DurationFormat should format seconds, milliseconds and microseconds with `roundingMode: "trunc"`')}



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-super-escaped.js


var obj={super:42};assert.sameValue(obj["super"],42,"property exists");


var obj={super:42};assert.sameValue(obj.super,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-debugger-escaped.js


var obj={debugger(){return 42}};assert.sameValue(obj["debugger"](),42,"property exists");


var obj={debugger(){return 42}};assert.sameValue(obj.debugger(),42,"property exists");



test262/test/intl402/DurationFormat/prototype/format/throw-invoked-as-func.js


const df=new Intl.DurationFormat;let f=df["format"];assert.sameValue(typeof f,"function");assert.throws(TypeError,()=>{f({hours:1,minutes:46,seconds:40})});


const df=new Intl.DurationFormat;let f=df.format;assert.sameValue(typeof f,"function"),assert.throws(TypeError,()=>{f({hours:1,minutes:46,seconds:40})});



test262/test/language/expressions/object/ident-name-method-def-function-escaped.js


var obj={function(){return 42}};assert.sameValue(obj["function"](),42,"property exists");


var obj={function(){return 42}};assert.sameValue(obj.function(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-else-escaped.js


var obj={else(){return 42}};assert.sameValue(obj["else"](),42,"property exists");


var obj={else(){return 42}};assert.sameValue(obj.else(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-break-escaped.js


var obj={break:42};assert.sameValue(obj["break"],42,"property exists");


var obj={break:42};assert.sameValue(obj.break,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-public-escaped.js


var obj={public:42};assert.sameValue(obj["public"],42,"property exists");


var obj={public:42};assert.sameValue(obj.public,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-do-escaped.js


var obj={do(){return 42}};assert.sameValue(obj["do"](),42,"property exists");


var obj={do(){return 42}};assert.sameValue(obj.do(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-function-escaped.js


var obj={function:42};assert.sameValue(obj["function"],42,"property exists");


var obj={function:42};assert.sameValue(obj.function,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-throw-escaped.js


var obj={throw:42};assert.sameValue(obj["throw"],42,"property exists");


var obj={throw:42};assert.sameValue(obj.throw,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-198.js


var regObj=new RegExp;regObj.writable=!0;var newObj=Object.create({},{prop:regObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var regObj=new RegExp;regObj.writable=!0;var newObj=Object.create({},{prop:regObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/intl402/DurationFormat/constructor-options-style-conflict.js


let invalidOptions={};for(const timeUnit of["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"])invalidOptions[timeUnit]="numeric";for(const timeUnit of["minutes","seconds","milliseconds","microseconds","nanoseconds"]){for(const invalidStyle of["long","short","narrow"])invalidOptions[timeUnit]=invalidStyle,assert.throws(RangeError,function(){new Intl.DurationFormat([],invalidOptions)},`${invalidStyle} is an invalid style option value when following a unit with \"numeric\" style`);invalidOptions[timeUnit]="numeric"}for(const timeUnit of["hours","minutes","seconds"])invalidOptions[timeUnit]="2-digit";for(const timeUnit of["minutes","seconds","milliseconds"]){for(const invalidStyle of["long","short","narrow"])invalidOptions[timeUnit]=invalidStyle,assert.throws(RangeError,function(){new Intl.DurationFormat([],invalidOptions)},`${invalidStyle} is an invalid style option value when following a unit with \"2-digit\" style`);invalidOptions[timeUnit]="2-digit"}


let invalidOptions={};for(const timeUnit of["hours","minutes","seconds","milliseconds","microseconds","nanoseconds"])invalidOptions[timeUnit]="numeric";for(const timeUnit of["minutes","seconds","milliseconds","microseconds","nanoseconds"]){for(const invalidStyle of["long","short","narrow"])invalidOptions[timeUnit]=invalidStyle,assert.throws(RangeError,function(){new Intl.DurationFormat([],invalidOptions)},`${invalidStyle} is an invalid style option value when following a unit with "numeric" style`);invalidOptions[timeUnit]="numeric"}for(const timeUnit of["hours","minutes","seconds"])invalidOptions[timeUnit]="2-digit";for(const timeUnit of["minutes","seconds","milliseconds"]){for(const invalidStyle of["long","short","narrow"])invalidOptions[timeUnit]=invalidStyle,assert.throws(RangeError,function(){new Intl.DurationFormat([],invalidOptions)},`${invalidStyle} is an invalid style option value when following a unit with "2-digit" style`);invalidOptions[timeUnit]="2-digit"}



test262/test/built-ins/Object/create/15.2.3.5-4-194.js


var booleanObj=new Boolean(!1);booleanObj.writable=!0;var newObj=Object.create({},{prop:booleanObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var booleanObj=new Boolean(!1);booleanObj.writable=!0;var newObj=Object.create({},{prop:booleanObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/intl402/DurationFormat/constructor-options-style-valid.js


const validOptions=[[void 0,"short"],["long","long"],["short","short"],["narrow","narrow"],["digital","digital"],[{toString(){return"short"}},"short"],[{toString(){return"long"}},"long"],[{toString(){return"narrow"}},"narrow"],[{toString(){return"digital"}},"digital"]];for(const[validOption,expected]of validOptions){const df=new Intl.DurationFormat([],{style:validOption}),resolvedOptions=df.resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}


const validOptions=[[void 0,"short"],["long","long"],["short","short"],["narrow","narrow"],["digital","digital"],[{toString(){return"short"}},"short"],[{toString(){return"long"}},"long"],[{toString(){return"narrow"}},"narrow"],[{toString(){return"digital"}},"digital"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.DurationFormat([],{style:validOption}).resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}



test262/test/language/expressions/object/ident-name-method-def-in-escaped.js


var obj={in(){return 42}};assert.sameValue(obj["in"](),42,"property exists");


var obj={in(){return 42}};assert.sameValue(obj.in(),42,"property exists");



test262/test/built-ins/Iterator/prototype/filter/iterator-already-exhausted.js


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0);assert.sameValue(done,!0);iterator=iterator.filter(()=>!0);({value,done}=iterator.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){}(),{value,done}=iterator.next();assert.sameValue(value,void 0),assert.sameValue(done,!0),iterator=iterator.filter(()=>!0),{value,done}=iterator.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/accessor-name-literal-numeric-leading-decimal.js


var stringSet,obj={get[.1](){return"get string"},set[.1](param){stringSet=param}};assert.sameValue(obj["0.1"],"get string");obj["0.1"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get .1(){return"get string"},set .1(param){stringSet=param}};assert.sameValue(obj["0.1"],"get string"),obj["0.1"]="set string",assert.sameValue(stringSet,"set string");



test262/test/built-ins/Iterator/prototype/filter/underlying-iterator-advanced-in-parallel.js


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),filtered=iterator.filter(()=>!0),{value,done}=iterator.next();assert.sameValue(value,0);assert.sameValue(done,!1);iterator.next();iterator.next();({value,done}=filtered.next());assert.sameValue(value,3);assert.sameValue(done,!1);({value,done}=filtered.next());assert.sameValue(value,4);assert.sameValue(done,!1);({value,done}=filtered.next());assert.sameValue(value,void 0);assert.sameValue(done,!0);


let iterator=function*(){for(let i=0;i<5;++i)yield i}(),filtered=iterator.filter(()=>!0),{value,done}=iterator.next();assert.sameValue(value,0),assert.sameValue(done,!1),iterator.next(),iterator.next(),{value,done}=filtered.next(),assert.sameValue(value,3),assert.sameValue(done,!1),{value,done}=filtered.next(),assert.sameValue(value,4),assert.sameValue(done,!1),{value,done}=filtered.next(),assert.sameValue(value,void 0),assert.sameValue(done,!0);



test262/test/language/expressions/object/ident-name-prop-name-literal-super-escaped.js


var obj={super:42};assert.sameValue(obj["super"],42,"property exists");


var obj={super:42};assert.sameValue(obj.super,42,"property exists");



test262/test/intl402/DateTimeFormat/constructor-options-dateStyle-valid.js


const validOptions=[[void 0,void 0],["full","full"],["long","long"],["medium","medium"],["short","short"],[{toString(){return"full"}},"full"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[dateStyle,expected]of validOptions){const dtf=new Intl.DateTimeFormat("en",{dateStyle}),options=dtf.resolvedOptions();assert.sameValue(options.dateStyle,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"dateStyle");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}


const validOptions=[[void 0,void 0],["full","full"],["long","long"],["medium","medium"],["short","short"],[{toString(){return"full"}},"full"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[dateStyle,expected]of validOptions){const options=new Intl.DateTimeFormat("en",{dateStyle}).resolvedOptions();assert.sameValue(options.dateStyle,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"dateStyle");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}



test262/test/language/function-code/10.4.3-1-35gs.js


if(!function(){return function(){return typeof this}()==="undefined"&&typeof this=="undefined"}())throw"'this' had incorrect value!";


if(!function(){return function(){return typeof this}()==="undefined"&&typeof this>"u"}())throw"'this' had incorrect value!";



test262/test/language/expressions/object/ident-name-prop-name-literal-class-escaped.js


var obj={class:42};assert.sameValue(obj["class"],42,"property exists");


var obj={class:42};assert.sameValue(obj.class,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-private-escaped.js


var obj={private:42};assert.sameValue(obj["private"],42,"property exists");


var obj={private:42};assert.sameValue(obj.private,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-extends.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-this-escaped.js


var obj={this:42};assert.sameValue(obj["this"],42,"property exists");


var obj={this:42};assert.sameValue(obj.this,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-export-escaped.js


var obj={export(){return 42}};assert.sameValue(obj["export"](),42,"property exists");


var obj={export(){return 42}};assert.sameValue(obj.export(),42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-193.js


var str=new String("abc");str.writable=!0;var newObj=Object.create({},{prop:str}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var str=new String("abc");str.writable=!0;var newObj=Object.create({},{prop:str}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/ident-name-method-def-with-escaped.js


var obj={with(){return 42}};assert.sameValue(obj["with"](),42,"property exists");


var obj={with(){return 42}};assert.sameValue(obj.with(),42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-instanceof-escaped.js


var obj={instanceof:42};assert.sameValue(obj["instanceof"],42,"property exists");


var obj={instanceof:42};assert.sameValue(obj.instanceof,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-for-escaped.js


var obj={for:42};assert.sameValue(obj["for"],42,"property exists");


var obj={for:42};assert.sameValue(obj.for,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-break-escaped.js


var obj={break:42};assert.sameValue(obj["break"],42,"property exists");


var obj={break:42};assert.sameValue(obj.break,42,"property exists");



test262/test/language/expressions/object/S11.1.5_A1.3.js


var object={x:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {"x" : true}; typeof object === "object". Actual: '+typeof object);if(object instanceof Object!==!0)throw new Test262Error('#2: var object = {"x" : true}; object instanceof Object === true');if(object.toString!==Object.prototype.toString)throw new Test262Error('#3: var object = {"x" : true}; object.toString === Object.prototype.toString. Actual: '+object.toString);if(object["x"]!==!0)throw new Test262Error('#4: var object = {"x" : true}; object["x"] === true');if(object.x!==!0)throw new Test262Error('#5: var object = {"x" : true}; object.x === true');


var object={x:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {"x" : true}; typeof object === "object". Actual: '+typeof object);if(!(object instanceof Object))throw new Test262Error('#2: var object = {"x" : true}; object instanceof Object === true');if(object.toString!==Object.prototype.toString)throw new Test262Error('#3: var object = {"x" : true}; object.toString === Object.prototype.toString. Actual: '+object.toString);if(object.x!==!0)throw new Test262Error('#4: var object = {"x" : true}; object["x"] === true');if(object.x!==!0)throw new Test262Error('#5: var object = {"x" : true}; object.x === true');



test262/test/language/expressions/object/ident-name-prop-name-literal-throw-escaped.js


var obj={throw:42};assert.sameValue(obj["throw"],42,"property exists");


var obj={throw:42};assert.sameValue(obj.throw,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-for-escaped.js


var obj={for:42};assert.sameValue(obj["for"],42,"property exists");


var obj={for:42};assert.sameValue(obj.for,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-typeof-escaped.js


var obj={typeof:42};assert.sameValue(obj["typeof"],42,"property exists");


var obj={typeof:42};assert.sameValue(obj.typeof,42,"property exists");



test262/test/harness/asyncHelpers-asyncTest-returns-undefined.js


var realDone=$DONE,doneCalls=0;globalThis.$DONE=function(){doneCalls++};(async function(){assert.sameValue(void 0,asyncTest({})),assert.sameValue(void 0,asyncTest(function(){return"non-thenable"})),assert.sameValue(void 0,asyncTest(function(){return Promise.resolve(!0)})),assert.sameValue(void 0,asyncTest(function(){return Promise.reject(new Test262Error("oh no"))}))})().then(()=>{assert.sameValue(doneCalls,4,"asyncTest must call $DONE")}).then(realDone,realDone);


var realDone=$DONE,doneCalls=0;globalThis.$DONE=function(){doneCalls++},async function(){assert.sameValue(void 0,asyncTest({})),assert.sameValue(void 0,asyncTest(function(){return"non-thenable"})),assert.sameValue(void 0,asyncTest(function(){return Promise.resolve(!0)})),assert.sameValue(void 0,asyncTest(function(){return Promise.reject(new Test262Error("oh no"))}))}().then(()=>{assert.sameValue(doneCalls,4,"asyncTest must call $DONE")}).then(realDone,realDone);



test262/test/language/expressions/object/ident-name-prop-name-literal-static-escaped.js


var obj={static:42};assert.sameValue(obj["static"],42,"property exists");


var obj={static:42};assert.sameValue(obj.static,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-with-escaped.js


var obj={with:42};assert.sameValue(obj["with"],42,"property exists");


var obj={with:42};assert.sameValue(obj.with,42,"property exists");



test262/test/language/expressions/object/accessor-name-literal-numeric-binary.js


var stringSet,obj={get[2](){return"get string"},set[2](param){stringSet=param}};assert.sameValue(obj["2"],"get string");obj["2"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get 2(){return"get string"},set 2(param){stringSet=param}};assert.sameValue(obj[2],"get string"),obj[2]="set string",assert.sameValue(stringSet,"set string");



test262/test/language/expressions/object/S11.1.5_A1.4.js


var object={prop:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {prop : true}; typeof object === "object". Actual: '+typeof object);if(object instanceof Object!==!0)throw new Test262Error("#2: var object = {prop : true}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {prop : true}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object["prop"]!==!0)throw new Test262Error('#4: var object = {prop : true}; object["prop"] === true');if(object.prop!==!0)throw new Test262Error("#5: var object = {prop : true}; object.prop === true");


var object={prop:!0};if(typeof object!="object")throw new Test262Error('#1: var object = {prop : true}; typeof object === "object". Actual: '+typeof object);if(!(object instanceof Object))throw new Test262Error("#2: var object = {prop : true}; object instanceof Object === true");if(object.toString!==Object.prototype.toString)throw new Test262Error("#3: var object = {prop : true}; object.toString === Object.prototype.toString. Actual: "+object.toString);if(object.prop!==!0)throw new Test262Error('#4: var object = {prop : true}; object["prop"] === true');if(object.prop!==!0)throw new Test262Error("#5: var object = {prop : true}; object.prop === true");



test262/test/language/expressions/object/ident-name-prop-name-literal-interface-escaped.js


var obj={interface:42};assert.sameValue(obj["interface"],42,"property exists");


var obj={interface:42};assert.sameValue(obj.interface,42,"property exists");



test262/test/built-ins/Iterator/prototype/some/iterator-has-no-return.js


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.some(v=>v>3);assert.sameValue(ret,!0);let{done,value}=iterator.next();assert.sameValue(done,!1);assert.sameValue(value,5);({done,value}=iterator.next());assert.sameValue(done,!0);assert.sameValue(value,void 0);


let iterator=[1,2,3,4,5][Symbol.iterator]();assert.sameValue(iterator.return,void 0);let ret=iterator.some(v=>v>3);assert.sameValue(ret,!0);let{done,value}=iterator.next();assert.sameValue(done,!1),assert.sameValue(value,5),{done,value}=iterator.next(),assert.sameValue(done,!0),assert.sameValue(value,void 0);



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-if-escaped.js


var obj={if:42};assert.sameValue(obj["if"],42,"property exists");


var obj={if:42};assert.sameValue(obj.if,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-finally-escaped.js


var obj={finally:42};assert.sameValue(obj["finally"],42,"property exists");


var obj={finally:42};assert.sameValue(obj.finally,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-197.js


var dateObj=new Date(0);dateObj.writable=!0;var newObj=Object.create({},{prop:dateObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var dateObj=new Date(0);dateObj.writable=!0;var newObj=Object.create({},{prop:dateObj}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-do-escaped.js


var obj={do:42};assert.sameValue(obj["do"],42,"property exists");


var obj={do:42};assert.sameValue(obj.do,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-default-escaped-ext.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-protected-escaped.js


var obj={protected:42};assert.sameValue(obj["protected"],42,"property exists");


var obj={protected:42};assert.sameValue(obj.protected,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-default-escaped.js


var obj={default:42};assert.sameValue(obj["default"],42,"property exists");


var obj={default:42};assert.sameValue(obj.default,42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-const-escaped.js


var obj={const:42};assert.sameValue(obj["const"],42,"property exists");


var obj={const:42};assert.sameValue(obj.const,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-while-escaped.js


var obj={while(){return 42}};assert.sameValue(obj["while"](),42,"property exists");


var obj={while(){return 42}};assert.sameValue(obj.while(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-catch-escaped.js


var obj={catch(){return 42}};assert.sameValue(obj["catch"](),42,"property exists");


var obj={catch(){return 42}};assert.sameValue(obj.catch(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-this-escaped.js


var obj={this(){return 42}};assert.sameValue(obj["this"](),42,"property exists");


var obj={this(){return 42}};assert.sameValue(obj.this(),42,"property exists");



test262/test/language/expressions/object/accessor-name-literal-numeric-non-canonical.js


var stringSet,obj={get[1e-7](){return"get string"},set[1e-7](param){stringSet=param}};assert.sameValue(obj["1e-7"],"get string");obj["1e-7"]="set string";assert.sameValue(stringSet,"set string");


var stringSet,obj={get 1e-7(){return"get string"},set 1e-7(param){stringSet=param}};assert.sameValue(obj["1e-7"],"get string"),obj["1e-7"]="set string",assert.sameValue(stringSet,"set string");



test262/test/language/expressions/object/ident-name-prop-name-literal-case-escaped.js


var obj={case:42};assert.sameValue(obj["case"],42,"property exists");


var obj={case:42};assert.sameValue(obj.case,42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-try-escaped.js


var obj={try(){return 42}};assert.sameValue(obj["try"](),42,"property exists");


var obj={try(){return 42}};assert.sameValue(obj.try(),42,"property exists");



test262/test/language/expressions/object/ident-name-method-def-default.js


var obj={default(){return 42}};assert.sameValue(obj["default"](),42,"property exists");


var obj={default(){return 42}};assert.sameValue(obj.default(),42,"property exists");



test262/test/language/expressions/object/covered-ident-name-prop-name-literal-else-escaped.js


var obj={else:42};assert.sameValue(obj["else"],42,"property exists");


var obj={else:42};assert.sameValue(obj.else,42,"property exists");



test262/test/language/expressions/object/ident-name-prop-name-literal-extends.js


var obj={extends:42};assert.sameValue(obj["extends"],42,"property exists");


var obj={extends:42};assert.sameValue(obj.extends,42,"property exists");



test262/test/built-ins/Object/create/15.2.3.5-4-196.js


Math.writable=!0;var newObj=Object.create({},{prop:Math}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


Math.writable=!0;var newObj=Object.create({},{prop:Math}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/language/expressions/generators/no-name.js


var a=[function*(a){yield a+1;return}],f=a[0];assert.sameValue(f.name,"");var g=f(3);assert.sameValue(g.next().value,4);assert.sameValue(g.next().done,!0);


var a=[function*(a2){yield a2+1}],f=a[0];assert.sameValue(f.name,"");var g=f(3);assert.sameValue(g.next().value,4),assert.sameValue(g.next().done,!0);



test262/test/built-ins/Object/create/15.2.3.5-4-203.js


this.writable=!0;var newObj=Object.create({},{prop:this}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


this.writable=!0;var newObj=Object.create({},{prop:this}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/built-ins/Object/create/15.2.3.5-4-192.js


var array=[1,2,3];array.writable=!0;var newObj=Object.create({},{prop:array}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop=="undefined";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite");assert.sameValue(afterWrite,!0,"afterWrite");


var array=[1,2,3];array.writable=!0;var newObj=Object.create({},{prop:array}),beforeWrite=newObj.hasOwnProperty("prop")&&typeof newObj.prop>"u";newObj.prop="isWritable";var afterWrite=newObj.prop==="isWritable";assert.sameValue(beforeWrite,!0,"beforeWrite"),assert.sameValue(afterWrite,!0,"afterWrite");



test262/test/harness/asyncHelpers-asyncTest-then-resolves.js


var doneCalls=0,realDone=$DONE;globalThis.$DONE=function(noError){doneCalls++,assert.sameValue(noError,void 0,"asyncTest should discard promise's resolved value")};(async function(){asyncTest(function(){return Promise.resolve(null)})})().then(()=>{assert.sameValue(doneCalls,1,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve({})})}).then(()=>{assert.sameValue(doneCalls,2,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve("hi")})}).then(()=>{assert.sameValue(doneCalls,3,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve(10)})}).then(()=>{assert.sameValue(doneCalls,4,"asyncTest called $DONE with undefined"),asyncTest(function(){return{then(res,rej){res(!0)}}})}).then(()=>{assert.sameValue(doneCalls,5,"asyncTest called $DONE with undefined")}).then(realDone,realDone);


var doneCalls=0,realDone=$DONE;globalThis.$DONE=function(noError){doneCalls++,assert.sameValue(noError,void 0,"asyncTest should discard promise's resolved value")},async function(){asyncTest(function(){return Promise.resolve(null)})}().then(()=>{assert.sameValue(doneCalls,1,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve({})})}).then(()=>{assert.sameValue(doneCalls,2,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve("hi")})}).then(()=>{assert.sameValue(doneCalls,3,"asyncTest called $DONE with undefined"),asyncTest(function(){return Promise.resolve(10)})}).then(()=>{assert.sameValue(doneCalls,4,"asyncTest called $DONE with undefined"),asyncTest(function(){return{then(res,rej){res(!0)}}})}).then(()=>{assert.sameValue(doneCalls,5,"asyncTest called $DONE with undefined")}).then(realDone,realDone);



test262/test/intl402/DateTimeFormat/prototype/formatToParts/offset-timezone-correct.js


let date=new Date("1995-12-17T03:24:56Z"),tests={"+0301":{hour:"6",minute:"25"},"+1412":{hour:"5",minute:"36"},"+02":{hour:"5",minute:"24"},"+13:49":{hour:"5",minute:"13"},"-07:56":{hour:"7",minute:"28"},"-12":{hour:"3",minute:"24"},"-0914":{hour:"6",minute:"10"},"-10:03":{hour:"5",minute:"21"},"-0509":{hour:"10",minute:"15"}};Object.entries(tests).forEach(([timeZone,expected])=>{let df=new Intl.DateTimeFormat("en",{timeZone,timeStyle:"short"}),res=df.formatToParts(date),hour=res.filter(t=>t.type==="hour")[0].value,minute=res.filter(t=>t.type==="minute")[0].value;assert.sameValue(hour,expected.hour,`hour in ${timeZone} time zone:`);assert.sameValue(minute,expected.minute,`minute in ${timeZone} time zone:`)});


let date=new Date("1995-12-17T03:24:56Z"),tests={"+0301":{hour:"6",minute:"25"},"+1412":{hour:"5",minute:"36"},"+02":{hour:"5",minute:"24"},"+13:49":{hour:"5",minute:"13"},"-07:56":{hour:"7",minute:"28"},"-12":{hour:"3",minute:"24"},"-0914":{hour:"6",minute:"10"},"-10:03":{hour:"5",minute:"21"},"-0509":{hour:"10",minute:"15"}};Object.entries(tests).forEach(([timeZone,expected])=>{let res=new Intl.DateTimeFormat("en",{timeZone,timeStyle:"short"}).formatToParts(date),hour=res.filter(t=>t.type==="hour")[0].value,minute=res.filter(t=>t.type==="minute")[0].value;assert.sameValue(hour,expected.hour,`hour in ${timeZone} time zone:`),assert.sameValue(minute,expected.minute,`minute in ${timeZone} time zone:`)});



test262/test/intl402/DateTimeFormat/prototype/formatToParts/date-is-infinity-throws.js


var dtf=new Intl.DateTimeFormat(["pt-BR"]);assert.throws(RangeError,function(){dtf.formatToParts(Infinity)},"+Infinity");assert.throws(RangeError,function(){dtf.formatToParts(-1/0)},"-Infinity");


var dtf=new Intl.DateTimeFormat(["pt-BR"]);assert.throws(RangeError,function(){dtf.formatToParts(1/0)},"+Infinity"),assert.throws(RangeError,function(){dtf.formatToParts(-1/0)},"-Infinity");



test262/test/built-ins/Promise/race/S25.4.4.3_A2.1_T1.js


var p=Promise.race([]);assert(!!(p instanceof Promise),"The value of !!(p instanceof Promise) is expected to be true");


var p=Promise.race([]);assert(p instanceof Promise,"The value of !!(p instanceof Promise) is expected to be true");



test262/test/built-ins/Promise/race/iter-returns-undefined-reject.js


try{Promise.race({[Symbol.iterator](){return}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}


try{Promise.race({[Symbol.iterator](){}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}



test262/test/harness/compare-array-message.js


assert.compareArray([],[],!0),assert.compareArray([],[],1),assert.compareArray([],[],1n),assert.compareArray([],[],()=>{}),assert.compareArray([],[],"test262"),assert.compareArray([],[],Symbol("1")),assert.compareArray([],[],{}),assert.compareArray([],[],[]),assert.compareArray([],[],-1),assert.compareArray([],[],Infinity),assert.compareArray([],[],-1/0),assert.compareArray([],[],.1),assert.compareArray([],[],-.1);


assert.compareArray([],[],!0),assert.compareArray([],[],1),assert.compareArray([],[],1n),assert.compareArray([],[],()=>{}),assert.compareArray([],[],"test262"),assert.compareArray([],[],Symbol("1")),assert.compareArray([],[],{}),assert.compareArray([],[],[]),assert.compareArray([],[],-1),assert.compareArray([],[],1/0),assert.compareArray([],[],-1/0),assert.compareArray([],[],.1),assert.compareArray([],[],-.1);



test262/test/built-ins/Promise/race/S25.4.4.3_A2.2_T1.js


var nonIterable=3;Promise.race(nonIterable).then(function(){throw new Test262Error("Promise unexpectedly fulfilled: Promise.race(nonIterable) should throw TypeError")},function(err){assert(!!(err instanceof TypeError),"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);


var nonIterable=3;Promise.race(nonIterable).then(function(){throw new Test262Error("Promise unexpectedly fulfilled: Promise.race(nonIterable) should throw TypeError")},function(err){assert(err instanceof TypeError,"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);



test262/test/intl402/DateTimeFormat/prototype/format/throws-value-non-finite.js


var invalidValues=[NaN,Infinity,-1/0],format=new Intl.DateTimeFormat;invalidValues.forEach(function(value){assert.throws(RangeError,function(){var result=format.format(value)},"Invalid value "+value+" was not rejected.")});


var invalidValues=[NaN,1/0,-1/0],format=new Intl.DateTimeFormat;invalidValues.forEach(function(value){assert.throws(RangeError,function(){var result=format.format(value)},"Invalid value "+value+" was not rejected.")});



test262/test/built-ins/Promise/race/S25.4.4.3_A2.2_T2.js


Promise.race(new Error("abrupt")).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.race(abruptCompletion) should throw TypeError")},function(err){assert(!!(err instanceof TypeError),"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);


Promise.race(new Error("abrupt")).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.race(abruptCompletion) should throw TypeError")},function(err){assert(err instanceof TypeError,"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);



test262/test/harness/testTypedArray.js


assert(typeof TypedArray=="function");assert.sameValue(TypedArray,Object.getPrototypeOf(Uint8Array));var hasFloat16Array=typeof Float16Array!="undefined",callCount=0;testWithTypedArrayConstructors(()=>callCount++);assert.sameValue(callCount,9+hasFloat16Array);var index=0;assert.sameValue(typedArrayConstructors[index++],Float64Array);assert.sameValue(typedArrayConstructors[index++],Float32Array);hasFloat16Array&&assert.sameValue(typedArrayConstructors[index++],Float16Array);assert.sameValue(typedArrayConstructors[index++],Int32Array);assert.sameValue(typedArrayConstructors[index++],Int16Array);assert.sameValue(typedArrayConstructors[index++],Int8Array);assert.sameValue(typedArrayConstructors[index++],Uint32Array);assert.sameValue(typedArrayConstructors[index++],Uint16Array);assert.sameValue(typedArrayConstructors[index++],Uint8Array);assert.sameValue(typedArrayConstructors[index++],Uint8ClampedArray);


assert(typeof TypedArray=="function"),assert.sameValue(TypedArray,Object.getPrototypeOf(Uint8Array));var hasFloat16Array=typeof Float16Array<"u",callCount=0;testWithTypedArrayConstructors(()=>callCount++),assert.sameValue(callCount,9+hasFloat16Array);var index=0;assert.sameValue(typedArrayConstructors[index++],Float64Array),assert.sameValue(typedArrayConstructors[index++],Float32Array),hasFloat16Array&&assert.sameValue(typedArrayConstructors[index++],Float16Array),assert.sameValue(typedArrayConstructors[index++],Int32Array),assert.sameValue(typedArrayConstructors[index++],Int16Array),assert.sameValue(typedArrayConstructors[index++],Int8Array),assert.sameValue(typedArrayConstructors[index++],Uint32Array),assert.sameValue(typedArrayConstructors[index++],Uint16Array),assert.sameValue(typedArrayConstructors[index++],Uint8Array),assert.sameValue(typedArrayConstructors[index++],Uint8ClampedArray);



test262/test/built-ins/String/prototype/repeat/count-is-infinity-throws.js


assert.throws(RangeError,function(){"".repeat(Infinity)});


assert.throws(RangeError,function(){"".repeat(1/0)});



test262/test/intl402/Temporal/PlainMonthDay/prototype/toPlainDate/infinity-throws-rangeerror.js


const instance=new Temporal.PlainMonthDay(5,2,"gregory");[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({era:"ad",eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.toPlainDate({era:"ad",eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainMonthDay(5,2,"gregory");[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.toPlainDate({era:"ad",eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.toPlainDate({era:"ad",eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/intl402/Temporal/PlainMonthDay/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainMonthDay(5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainMonthDay(5,2,"gregory"),base={era:"ad",month:5,day:2,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/intl402/DateTimeFormat/constructor-options-fractionalSecondDigits-valid.js


const validOptions=[[void 0,void 0],[1,1],["1",1],[2,2],["2",2],[3,3],["3",3],[2.9,2],["2.9",2],[1.00001,1],[{toString(){return"3"}},3]];for(const[fractionalSecondDigits,expected]of validOptions){const dtf=new Intl.DateTimeFormat("en",{fractionalSecondDigits}),options=dtf.resolvedOptions();assert.sameValue(options.fractionalSecondDigits,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"fractionalSecondDigits");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}


const validOptions=[[void 0,void 0],[1,1],["1",1],[2,2],["2",2],[3,3],["3",3],[2.9,2],["2.9",2],[1.00001,1],[{toString(){return"3"}},3]];for(const[fractionalSecondDigits,expected]of validOptions){const options=new Intl.DateTimeFormat("en",{fractionalSecondDigits}).resolvedOptions();assert.sameValue(options.fractionalSecondDigits,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"fractionalSecondDigits");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}



test262/test/intl402/DateTimeFormat/constructor-options-timeStyle-valid.js


const validOptions=[[void 0,void 0],["full","full"],["long","long"],["medium","medium"],["short","short"],[{toString(){return"full"}},"full"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[timeStyle,expected]of validOptions){const dtf=new Intl.DateTimeFormat("en",{timeStyle}),options=dtf.resolvedOptions();assert.sameValue(options.timeStyle,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"timeStyle");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}


const validOptions=[[void 0,void 0],["full","full"],["long","long"],["medium","medium"],["short","short"],[{toString(){return"full"}},"full"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[timeStyle,expected]of validOptions){const options=new Intl.DateTimeFormat("en",{timeStyle}).resolvedOptions();assert.sameValue(options.timeStyle,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"timeStyle");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}



test262/test/intl402/DateTimeFormat/this-value-ignored.js


testWithIntlConstructors(function(Constructor){if(Constructor===Intl.DateTimeFormat)return;var obj,newObj;obj=new Constructor;newObj=Intl.DateTimeFormat.call(obj);assert.notSameValue(obj,newObj,'DateTimeFormat object created with "new" was not ignored as this-value.');if(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)return;obj=Constructor();newObj=Intl.DateTimeFormat.call(obj);assert.notSameValue(obj,newObj,"DateTimeFormat object created with constructor as function was not ignored as this-value.")});


testWithIntlConstructors(function(Constructor){if(Constructor!==Intl.DateTimeFormat){var obj,newObj;obj=new Constructor,newObj=Intl.DateTimeFormat.call(obj),assert.notSameValue(obj,newObj,'DateTimeFormat object created with "new" was not ignored as this-value.'),!(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)&&(obj=Constructor(),newObj=Intl.DateTimeFormat.call(obj),assert.notSameValue(obj,newObj,"DateTimeFormat object created with constructor as function was not ignored as this-value."))}});



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-same-size.js


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(4)}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===4,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(4)}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===4,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-same-size-zero-explicit.js


var ab=new ArrayBuffer(0,{maxByteLength:0}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(0)}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(0,{maxByteLength:0}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(0)}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/intl402/DateTimeFormat/constructor-options-dayPeriod-valid.js


const validOptions=[[void 0,void 0],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"narrow"}},"narrow"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[dayPeriod,expected]of validOptions){const dtf=new Intl.DateTimeFormat("en",{dayPeriod}),options=dtf.resolvedOptions();assert.sameValue(options.dayPeriod,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"dayPeriod");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}


const validOptions=[[void 0,void 0],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"narrow"}},"narrow"],[{valueOf(){return"long"},toString:void 0},"long"]];for(const[dayPeriod,expected]of validOptions){const options=new Intl.DateTimeFormat("en",{dayPeriod}).resolvedOptions();assert.sameValue(options.dayPeriod,expected);const propdesc=Object.getOwnPropertyDescriptor(options,"dayPeriod");expected===void 0?assert.sameValue(propdesc,void 0):assert.sameValue(propdesc.value,expected)}



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-shrink.js


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(3)}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===3,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(3)}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===3,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-shrink-zero-explicit.js


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(0)}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(0)}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/intl402/Temporal/PlainDateTime/from/infinity-throws-rangeerror.js


const base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,eraYear:obj},{overflow}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});


const base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.from({...base,eraYear:obj},{overflow})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-shrink-zero-implicit.js


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize()}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(4,{maxByteLength:4}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize()}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-same-size-zero-implicit.js


var ab=new ArrayBuffer(0,{maxByteLength:0}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize()}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(0,{maxByteLength:0}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize()}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===0,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/built-ins/ArrayBuffer/prototype/resize/resize-grow.js


var ab=new ArrayBuffer(4,{maxByteLength:5}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(5)}catch(_){caught=!0}try{ab.slice()}catch(_){throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===5,"byteLength");assert.sameValue(result,void 0,"normal completion value");


var ab=new ArrayBuffer(4,{maxByteLength:5}),caught=!1,result;assert.sameValue(typeof ab.resize,"function");try{result=ab.resize(5)}catch{caught=!0}try{ab.slice()}catch{throw new Test262Error("The ArrayBuffer under test was detached")}assert(caught||ab.byteLength===5,"byteLength"),assert.sameValue(result,void 0,"normal completion value");



test262/test/intl402/Temporal/PlainDateTime/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/intl402/Temporal/PlainDateTime/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-priority.js


var toPrimitiveAccessed=0,toStringAccessed=0,valueOfAccessed=0,thisVal={get[Symbol.toPrimitive](){toPrimitiveAccessed+=1;return},get toString(){return toStringAccessed+=1,function(){return" 42"}},get valueOf(){return valueOfAccessed+=1,function(){return""}}},result=String.prototype.trimStart.call(thisVal);assert.sameValue(toPrimitiveAccessed,1,"thisVal.toString expected to have been accessed.");assert.sameValue(result,"42","thisVal.toString expected to have been called.");assert.sameValue(toPrimitiveAccessed,1,"thisVal[Symbol.toPrimitive should have been accessed.");assert.sameValue(valueOfAccessed,0,"thisVal.valueOf should not have been accessed.");


var toPrimitiveAccessed=0,toStringAccessed=0,valueOfAccessed=0,thisVal={get[Symbol.toPrimitive](){toPrimitiveAccessed+=1},get toString(){return toStringAccessed+=1,function(){return" 42"}},get valueOf(){return valueOfAccessed+=1,function(){return""}}},result=String.prototype.trimStart.call(thisVal);assert.sameValue(toPrimitiveAccessed,1,"thisVal.toString expected to have been accessed."),assert.sameValue(result,"42","thisVal.toString expected to have been called."),assert.sameValue(toPrimitiveAccessed,1,"thisVal[Symbol.toPrimitive should have been accessed."),assert.sameValue(valueOfAccessed,0,"thisVal.valueOf should not have been accessed.");



test262/test/intl402/Temporal/PlainDateTime/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/built-ins/String/prototype/trimStart/this-value-number.js


var trimStart=String.prototype.trimStart;assert.sameValue(trimStart.call(NaN),"NaN","String.prototype.trimStart.call(NaN)");assert.sameValue(trimStart.call(Infinity),"Infinity","String.prototype.trimStart.call(Infinity)");assert.sameValue(trimStart.call(-0),"0","String.prototype.trimStart.call(-0)");assert.sameValue(trimStart.call(1),"1","String.prototype.trimStart.call(1)");assert.sameValue(trimStart.call(-1),"-1","String.prototype.trimStart.call(-1)");


var trimStart=String.prototype.trimStart;assert.sameValue(trimStart.call(NaN),"NaN","String.prototype.trimStart.call(NaN)"),assert.sameValue(trimStart.call(1/0),"Infinity","String.prototype.trimStart.call(Infinity)"),assert.sameValue(trimStart.call(-0),"0","String.prototype.trimStart.call(-0)"),assert.sameValue(trimStart.call(1),"1","String.prototype.trimStart.call(1)"),assert.sameValue(trimStart.call(-1),"-1","String.prototype.trimStart.call(-1)");



test262/test/built-ins/ShadowRealm/prototype/evaluate/wrapped-functions-share-no-properties.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,wrapped=r.evaluate("\nfunction fn() {\n    return fn.secret;\n}\n\nfn.secret = 'confidential';\nfn;\n");assert.sameValue(wrapped.secret,void 0);assert.sameValue(wrapped(),"confidential");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,wrapped=r.evaluate(`
function fn() {
    return fn.secret;
}

fn.secret = 'confidential';
fn;
`);assert.sameValue(wrapped.secret,void 0),assert.sameValue(wrapped(),"confidential");



test262/test/built-ins/String/prototype/slice/S15.5.4.13_A2_T4.js


var __string=new String("this is a string object");if(__string.slice(Infinity,NaN)!=="")throw new Test262Error('#1: __string = new String("this is a string object"); __string.slice(Infinity, NaN) === "". Actual: '+__string.slice(Infinity,NaN));


var __string=new String("this is a string object");if(__string.slice(1/0,NaN)!=="")throw new Test262Error('#1: __string = new String("this is a string object"); __string.slice(Infinity, NaN) === "". Actual: '+__string.slice(1/0,NaN));



test262/test/built-ins/ShadowRealm/prototype/evaluate/wrapped-function-multiple-different-realms.js


const realm1=new ShadowRealm,realm2=new ShadowRealm;globalThis.count=0;assert.notSameValue(realm1,realm2);const r1wrapped=realm1.evaluate("\n  globalThis.count = 0;\n  () => globalThis.count += 1;\n"),r2wrapper=realm2.evaluate("\n  globalThis.wrapped = undefined;\n  globalThis.count = 0; // Bait\n  (fn) => globalThis.wrapped = fn;\n"),rewrapped=r2wrapper(r1wrapped);assert.notSameValue(rewrapped,r1wrapped,"rewrapped !== r1wrapped");const r2wrapped=realm2.evaluate("globalThis.wrapped");assert.notSameValue(r2wrapped,r1wrapped,"r2wrapped !== r1wrapped");assert.notSameValue(r2wrapped,rewrapped,"r2wrapped !== rewrapped");assert.sameValue(realm1.evaluate("globalThis.count"),0,"getting wrapped function won't trigger a call");assert.sameValue(r2wrapped(),1,"call from r2 wrapped (r2wrapped) cycles back to r1");assert.sameValue(realm1.evaluate("globalThis.count"),1,"effects produced in a third realm, #1");assert.sameValue(rewrapped(),2,"call from r2 wrapped (rewrapped) cycles back to r1");assert.sameValue(realm1.evaluate("globalThis.count"),2,"effects produced in a third realm, #2");assert.sameValue(realm2.evaluate("globalThis.count"),0,"no side effects produced in the wrong realm (realm2)");assert.sameValue(globalThis.count,0,"no side effects produced in the wrong realm (main realm)");


const realm1=new ShadowRealm,realm2=new ShadowRealm;globalThis.count=0,assert.notSameValue(realm1,realm2);const r1wrapped=realm1.evaluate(`
  globalThis.count = 0;
  () => globalThis.count += 1;
`),r2wrapper=realm2.evaluate(`
  globalThis.wrapped = undefined;
  globalThis.count = 0; // Bait
  (fn) => globalThis.wrapped = fn;
`),rewrapped=r2wrapper(r1wrapped);assert.notSameValue(rewrapped,r1wrapped,"rewrapped !== r1wrapped");const r2wrapped=realm2.evaluate("globalThis.wrapped");assert.notSameValue(r2wrapped,r1wrapped,"r2wrapped !== r1wrapped"),assert.notSameValue(r2wrapped,rewrapped,"r2wrapped !== rewrapped"),assert.sameValue(realm1.evaluate("globalThis.count"),0,"getting wrapped function won't trigger a call"),assert.sameValue(r2wrapped(),1,"call from r2 wrapped (r2wrapped) cycles back to r1"),assert.sameValue(realm1.evaluate("globalThis.count"),1,"effects produced in a third realm, #1"),assert.sameValue(rewrapped(),2,"call from r2 wrapped (rewrapped) cycles back to r1"),assert.sameValue(realm1.evaluate("globalThis.count"),2,"effects produced in a third realm, #2"),assert.sameValue(realm2.evaluate("globalThis.count"),0,"no side effects produced in the wrong realm (realm2)"),assert.sameValue(globalThis.count,0,"no side effects produced in the wrong realm (main realm)");



test262/test/built-ins/ShadowRealm/prototype/evaluate/errors-from-the-other-realm-is-wrapped-into-a-typeerror.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(SyntaxError,()=>r.evaluate("..."),"SyntaxError exposed to Parent");assert.throws(TypeError,()=>r.evaluate("throw 42"),"throw primitive => TypeError");assert.throws(TypeError,()=>r.evaluate('throw new ReferenceError("aaa")'),"custom ctor => TypeError");assert.throws(TypeError,()=>r.evaluate('throw new TypeError("aaa")'),"Child TypeError => Parent TypeError");assert.throws(TypeError,()=>r.evaluate('eval("...");'),"syntaxerror parsing coming after runtime evaluation");assert.throws(TypeError,()=>r.evaluate(`\n  'use strict';\n  eval("var public = 1;");\n`),"strict-mode only syntaxerror parsing coming after runtime evaluation");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(SyntaxError,()=>r.evaluate("..."),"SyntaxError exposed to Parent"),assert.throws(TypeError,()=>r.evaluate("throw 42"),"throw primitive => TypeError"),assert.throws(TypeError,()=>r.evaluate('throw new ReferenceError("aaa")'),"custom ctor => TypeError"),assert.throws(TypeError,()=>r.evaluate('throw new TypeError("aaa")'),"Child TypeError => Parent TypeError"),assert.throws(TypeError,()=>r.evaluate('eval("...");'),"syntaxerror parsing coming after runtime evaluation"),assert.throws(TypeError,()=>r.evaluate(`
  'use strict';
  eval("var public = 1;");
`),"strict-mode only syntaxerror parsing coming after runtime evaluation");



test262/test/intl402/Temporal/PlainDateTime/prototype/toString/calendarname-critical.js


const tests=[[[],"1976-11-18T15:23:00[!u-ca=iso8601]","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args),result=date.toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}


const tests=[[[],"1976-11-18T15:23:00[!u-ca=iso8601]","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[!u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args).toString({calendarName:"critical"});assert.sameValue(result,expected,`${description} calendar for calendarName = critical`)}



test262/test/intl402/Temporal/PlainDateTime/prototype/toString/calendarname-always.js


const tests=[[[],"1976-11-18T15:23:00[u-ca=iso8601]","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args),result=date.toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}


const tests=[[[],"1976-11-18T15:23:00[u-ca=iso8601]","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args).toString({calendarName:"always"});assert.sameValue(result,expected,`${description} calendar for calendarName = always`)}



test262/test/intl402/Temporal/PlainDateTime/prototype/toString/calendarname-never.js


const tests=[[[],"1976-11-18T15:23:00","built-in ISO"],[["gregory"],"1976-11-18T15:23:00","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args),result=date.toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}


const tests=[[[],"1976-11-18T15:23:00","built-in ISO"],[["gregory"],"1976-11-18T15:23:00","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args).toString({calendarName:"never"});assert.sameValue(result,expected,`${description} calendar for calendarName = never`)}



test262/test/intl402/Temporal/PlainDateTime/prototype/toString/calendarname-auto.js


const tests=[[[],"1976-11-18T15:23:00","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const date=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args),result=date.toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}


const tests=[[[],"1976-11-18T15:23:00","built-in ISO"],[["gregory"],"1976-11-18T15:23:00[u-ca=gregory]","built-in Gregorian"]];for(const[args,expected,description]of tests){const result=new Temporal.PlainDateTime(1976,11,18,15,23,0,0,0,0,...args).toString({calendarName:"auto"});assert.sameValue(result,expected,`${description} calendar for calendarName = auto`)}



test262/test/built-ins/ShadowRealm/prototype/evaluate/throws-syntaxerror-on-bad-syntax.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(SyntaxError,()=>r.evaluate("..."),"SyntaxError exposed to Parent");assert.throws(SyntaxError,()=>r.evaluate('\n  "use strict";\n  throw "do not evaluate";\n  function lol(){\n    arguments = 1;\n  }\n'),"Strict mode only SyntaxError, setting value to a fn arguments");assert.throws(SyntaxError,()=>r.evaluate('\n  "use strict";\n  throw "do not evaluate";\n  var public = 1;\n'),"Strict mode only SyntaxError, var public");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(SyntaxError,()=>r.evaluate("..."),"SyntaxError exposed to Parent"),assert.throws(SyntaxError,()=>r.evaluate(`
  "use strict";
  throw "do not evaluate";
  function lol(){
    arguments = 1;
  }
`),"Strict mode only SyntaxError, setting value to a fn arguments"),assert.throws(SyntaxError,()=>r.evaluate(`
  "use strict";
  throw "do not evaluate";
  var public = 1;
`),"Strict mode only SyntaxError, var public");



test262/test/built-ins/ShadowRealm/prototype/evaluate/nested-realms.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");globalThis.myValue="a";const realm1=new ShadowRealm;realm1.evaluate('globalThis.myValue = "b";');const realm2Evaluate=realm1.evaluate("\n  const realm2 = new ShadowRealm();\n\n  (str) => realm2.evaluate(str);\n");realm2Evaluate('globalThis.myValue = "c";');assert.sameValue(globalThis.myValue,"a");assert.sameValue(realm1.evaluate("globalThis.myValue"),"b");assert.sameValue(realm2Evaluate("globalThis.myValue"),"c");realm1.evaluate('globalThis.myValue = "d"');assert.sameValue(globalThis.myValue,"a","no side effects");assert.sameValue(realm1.evaluate("globalThis.myValue"),"d","no side effects");assert.sameValue(realm2Evaluate("globalThis.myValue"),"c","no side effects");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function"),globalThis.myValue="a";const realm1=new ShadowRealm;realm1.evaluate('globalThis.myValue = "b";');const realm2Evaluate=realm1.evaluate(`
  const realm2 = new ShadowRealm();

  (str) => realm2.evaluate(str);
`);realm2Evaluate('globalThis.myValue = "c";'),assert.sameValue(globalThis.myValue,"a"),assert.sameValue(realm1.evaluate("globalThis.myValue"),"b"),assert.sameValue(realm2Evaluate("globalThis.myValue"),"c"),realm1.evaluate('globalThis.myValue = "d"'),assert.sameValue(globalThis.myValue,"a","no side effects"),assert.sameValue(realm1.evaluate("globalThis.myValue"),"d","no side effects"),assert.sameValue(realm2Evaluate("globalThis.myValue"),"c","no side effects");



test262/test/built-ins/String/prototype/toUpperCase/S15.5.4.18_A7.js


var __FACTORY=String.prototype.toUpperCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toUpperCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.1: var __FACTORY = String.prototype.toUpperCase; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}


var __FACTORY=String.prototype.toUpperCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toUpperCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.1: var __FACTORY = String.prototype.toUpperCase; "__instance = new __FACTORY" throw a TypeError. Actual: '+e)}



test262/test/built-ins/ShadowRealm/prototype/evaluate/wrapped-functions-new-wrapping-on-each-evaluation.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;r.evaluate("\nfunction fn() {\n    return 42;\n}\n");const wrapped=r.evaluate("fn"),otherWrapped=r.evaluate("fn");assert.notSameValue(wrapped,otherWrapped);assert.sameValue(typeof wrapped,"function");assert.sameValue(typeof otherWrapped,"function");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;r.evaluate(`
function fn() {
    return 42;
}
`);const wrapped=r.evaluate("fn"),otherWrapped=r.evaluate("fn");assert.notSameValue(wrapped,otherWrapped),assert.sameValue(typeof wrapped,"function"),assert.sameValue(typeof otherWrapped,"function");



test262/test/intl402/Temporal/PlainDateTime/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,eraYear:obj1},other));assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,eraYear:obj2}));assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const other=new Temporal.PlainDateTime(2e3,5,2,15,0,0,0,0,0,"gregory"),base={era:"ad",month:5,day:2,hour:15,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.compare({...base,eraYear:obj1},other)),assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainDateTime.compare(other,{...base,eraYear:obj2})),assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/bitwise-not/S11.4.8_A1.js


if(eval("~	0")!==-1)throw new Test262Error("#0: ~\\u00090 === -1");if(eval("~\v0")!==-1)throw new Test262Error("#2: ~\\u000B0 === -1");if(eval("~\f0")!==-1)throw new Test262Error("#3: ~\\u000C0 === -1");if(eval("~ 0")!==-1)throw new Test262Error("#4: ~\\u0020 === -1");if(eval("~\xA00")!==-1)throw new Test262Error("#5: ~\\u00A00 === -1");if(eval("~\n0")!==-1)throw new Test262Error("#6: ~\\u000A0 === -1");if(eval("~\r0")!==-1)throw new Test262Error("#7: ~\\u000D0 === -1");if(eval("~\u20280")!==-1)throw new Test262Error("#8: ~\\u20280 === -1");if(eval("~\u20290")!==-1)throw new Test262Error("#9: ~\\u20290 === -1");if(eval("~	\v\f \xA0\n\r\u2028\u20290")!==-1)throw new Test262Error("#10: ~\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290 === -1");


if(eval("~	0")!==-1)throw new Test262Error("#0: ~\\u00090 === -1");if(eval("~\v0")!==-1)throw new Test262Error("#2: ~\\u000B0 === -1");if(eval("~\f0")!==-1)throw new Test262Error("#3: ~\\u000C0 === -1");if(eval("~ 0")!==-1)throw new Test262Error("#4: ~\\u0020 === -1");if(eval("~\xA00")!==-1)throw new Test262Error("#5: ~\\u00A00 === -1");if(eval(`~
0`)!==-1)throw new Test262Error("#6: ~\\u000A0 === -1");if(eval("~\r0")!==-1)throw new Test262Error("#7: ~\\u000D0 === -1");if(eval("~\u20280")!==-1)throw new Test262Error("#8: ~\\u20280 === -1");if(eval("~\u20290")!==-1)throw new Test262Error("#9: ~\\u20290 === -1");if(eval(`~	\v\f \xA0
\r\u2028\u20290`)!==-1)throw new Test262Error("#10: ~\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290 === -1");



test262/test/built-ins/ShadowRealm/prototype/evaluate/no-conditional-strict-mode.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,res=r.evaluate("\n  function lol() {\n    arguments = 42; // This would be a SyntaxError if in strict mode\n\n    return arguments;\n  }\n  lol;\n");assert.sameValue(res(),42);const res2=r.evaluate("var public = 1; 42");assert.sameValue(res2,42);


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,res=r.evaluate(`
  function lol() {
    arguments = 42; // This would be a SyntaxError if in strict mode

    return arguments;
  }
  lol;
`);assert.sameValue(res(),42);const res2=r.evaluate("var public = 1; 42");assert.sameValue(res2,42);



test262/test/built-ins/ShadowRealm/prototype/evaluate/wrapped-function-throws-typeerror-on-non-primitive-returns.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,r.evaluate("() => globalThis"),"globalThis");assert.throws(TypeError,r.evaluate("() => []"),"array literal");assert.throws(TypeError,r.evaluate("\n    () => ({\n        [Symbol.toPrimitive]() { return 'string'; },\n        toString() { return 'str'; },\n        valueOf() { return 1; }\n    });\n"),"object literal with immediate primitive coercion methods");assert.throws(TypeError,r.evaluate("() => Object.create(null)"),"ordinary object with null __proto__");assert.throws(TypeError,r.evaluate("() => new Proxy({}, { apply() {} })"),"non-callable proxy");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,r.evaluate("() => globalThis"),"globalThis"),assert.throws(TypeError,r.evaluate("() => []"),"array literal"),assert.throws(TypeError,r.evaluate(`
    () => ({
        [Symbol.toPrimitive]() { return 'string'; },
        toString() { return 'str'; },
        valueOf() { return 1; }
    });
`),"object literal with immediate primitive coercion methods"),assert.throws(TypeError,r.evaluate("() => Object.create(null)"),"ordinary object with null __proto__"),assert.throws(TypeError,r.evaluate("() => new Proxy({}, { apply() {} })"),"non-callable proxy");



test262/test/intl402/Temporal/PlainYearMonth/from/infinity-throws-rangeerror.js


const base={era:"ad",month:5,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,eraYear:obj},{overflow}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});


const base={era:"ad",month:5,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.from({...base,eraYear:obj},{overflow})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});



test262/test/built-ins/String/prototype/toUpperCase/S15.5.4.18_A1_T8.js


if(Number.prototype.toUpperCase=String.prototype.toUpperCase,Infinity.toUpperCase()!=="INFINITY")throw new Test262Error('#1: Number.prototype.toUpperCase = String.prototype.toUpperCase; Infinity.toUpperCase()=== "INFINITY". Actual: '+Infinity.toUpperCase());


if(Number.prototype.toUpperCase=String.prototype.toUpperCase,(1/0).toUpperCase()!=="INFINITY")throw new Test262Error('#1: Number.prototype.toUpperCase = String.prototype.toUpperCase; Infinity.toUpperCase()=== "INFINITY". Actual: '+(1/0).toUpperCase());



test262/test/language/expressions/bitwise-not/S11.4.8_A2.1_T2.js


try{throw~x,new Test262Error("#1.1: ~x throw ReferenceError. Actual: "+~x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: ~x throw ReferenceError. Actual: "+e)}


try{throw~x,new Test262Error("#1.1: ~x throw ReferenceError. Actual: "+~x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: ~x throw ReferenceError. Actual: "+e)}



test262/test/built-ins/ShadowRealm/prototype/evaluate/returns-proxy-callable-object.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,proxyCallable=r.evaluate("\nfunction fn() { return 42; }\nnew Proxy(fn, {});\n");assert.sameValue(typeof proxyCallable,"function","wrapped proxy callable object is typeof function");assert.sameValue(proxyCallable(),42,"wrappedpfn() returns 42");assert.sameValue(new Proxy(proxyCallable,{})(),42,"wrapped functions can be proxied");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,proxyCallable=r.evaluate(`
function fn() { return 42; }
new Proxy(fn, {});
`);assert.sameValue(typeof proxyCallable,"function","wrapped proxy callable object is typeof function"),assert.sameValue(proxyCallable(),42,"wrappedpfn() returns 42"),assert.sameValue(new Proxy(proxyCallable,{})(),42,"wrapped functions can be proxied");



test262/test/built-ins/String/prototype/slice/S15.5.4.13_A2_T2.js


var __string=new String("this is a string object");if(__string.slice(NaN,Infinity)!=="this is a string object")throw new Test262Error(`#1: __string = new String('this is a string object'); __string.slice(NaN, Infinity) === "this is a string object". Actual: `+__string.slice(NaN,Infinity));


var __string=new String("this is a string object");if(__string.slice(NaN,1/0)!=="this is a string object")throw new Test262Error(`#1: __string = new String('this is a string object'); __string.slice(NaN, Infinity) === "this is a string object". Actual: `+__string.slice(NaN,1/0));



test262/test/built-ins/ArrayBuffer/length-is-too-large-throws.js


assert.throws(RangeError,function(){new ArrayBuffer(9007199254740992)},"`length` parameter is too large"),assert.throws(RangeError,function(){new ArrayBuffer(Infinity)},"`length` parameter is positive Infinity");


assert.throws(RangeError,function(){new ArrayBuffer(9007199254740992)},"`length` parameter is too large"),assert.throws(RangeError,function(){new ArrayBuffer(1/0)},"`length` parameter is positive Infinity");



test262/test/built-ins/ShadowRealm/prototype/evaluate/throws-typeerror-if-evaluation-resolves-to-non-primitive.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate("globalThis"),"globalThis");assert.throws(TypeError,()=>r.evaluate("[]"),"array literal");assert.throws(TypeError,()=>r.evaluate("\n    ({\n        [Symbol.toPrimitive]() { return 'string'; },\n        toString() { return 'str'; },\n        valueOf() { return 1; }\n    });\n"),"object literal with immediate primitive coercion methods");assert.throws(TypeError,()=>r.evaluate("Object.create(null)"),"ordinary object with null __proto__");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate("globalThis"),"globalThis"),assert.throws(TypeError,()=>r.evaluate("[]"),"array literal"),assert.throws(TypeError,()=>r.evaluate(`
    ({
        [Symbol.toPrimitive]() { return 'string'; },
        toString() { return 'str'; },
        valueOf() { return 1; }
    });
`),"object literal with immediate primitive coercion methods"),assert.throws(TypeError,()=>r.evaluate("Object.create(null)"),"ordinary object with null __proto__");



test262/test/language/expressions/logical-or/S11.11.2_A2.1_T2.js


try{throw x||!0,new Test262Error("#1.1: x || true throw ReferenceError. Actual: "+(x||!0))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x || true throw ReferenceError. Actual: "+e)}


try{throw x,new Test262Error("#1.1: x || true throw ReferenceError. Actual: "+(x||!0))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x || true throw ReferenceError. Actual: "+e)}



test262/test/intl402/Temporal/PlainYearMonth/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/logical-or/S11.11.2_A2.1_T3.js


try{throw y,new Test262Error("#1.1: false || y throw ReferenceError. Actual: "+y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: false || y throw ReferenceError. Actual: "+e)}


try{throw y,new Test262Error("#1.1: false || y throw ReferenceError. Actual: "+y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: false || y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/String/prototype/includes/return-true-if-searchstring-is-empty.js


var str="The future is cool!";assert(str.includes("",str.length),'str.includes("", str.length) returns true');assert(str.includes(""),'str.includes("") returns true');assert(str.includes("",Infinity),'str.includes("", Infinity) returns true');


var str="The future is cool!";assert(str.includes("",str.length),'str.includes("", str.length) returns true'),assert(str.includes(""),'str.includes("") returns true'),assert(str.includes("",1/0),'str.includes("", Infinity) returns true');



test262/test/built-ins/String/prototype/codePointAt/returns-undefined-on-position-equal-or-more-than-size.js


assert.sameValue("abc".codePointAt(3),void 0),assert.sameValue("abc".codePointAt(4),void 0),assert.sameValue("abc".codePointAt(Infinity),void 0);


assert.sameValue("abc".codePointAt(3),void 0),assert.sameValue("abc".codePointAt(4),void 0),assert.sameValue("abc".codePointAt(1/0),void 0);



test262/test/intl402/Temporal/PlainYearMonth/prototype/until/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.until({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.until({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/logical-or/S11.11.2_A1.js


if(eval("false	||	true")!==!0)throw new Test262Error("#1: (false\\u0009||\\u0009true) === true");if(eval("false\v||\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B||\\u000Btrue) === true");if(eval("false\f||\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C||\\u000Ctrue) === true");if(eval("false || true")!==!0)throw new Test262Error("#4: (false\\u0020||\\u0020true) === true");if(eval("false\xA0||\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0||\\u00A0true) === true");if(eval("false\n||\ntrue")!==!0)throw new Test262Error("#6: (false\\u000A||\\u000Atrue) === true");if(eval("false\r||\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D||\\u000Dtrue) === true");if(eval("false\u2028||\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028||\\u2028true) === true");if(eval("false\u2029||\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029||\\u2029true) === true");if(eval("false	\v\f \xA0\n\r\u2028\u2029||	\v\f \xA0\n\r\u2028\u2029true")!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029||\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");


if(eval("false	||	true")!==!0)throw new Test262Error("#1: (false\\u0009||\\u0009true) === true");if(eval("false\v||\vtrue")!==!0)throw new Test262Error("#2: (false\\u000B||\\u000Btrue) === true");if(eval("false\f||\ftrue")!==!0)throw new Test262Error("#3: (false\\u000C||\\u000Ctrue) === true");if(eval("false || true")!==!0)throw new Test262Error("#4: (false\\u0020||\\u0020true) === true");if(eval("false\xA0||\xA0true")!==!0)throw new Test262Error("#5: (false\\u00A0||\\u00A0true) === true");if(eval(`false
||
true`)!==!0)throw new Test262Error("#6: (false\\u000A||\\u000Atrue) === true");if(eval("false\r||\rtrue")!==!0)throw new Test262Error("#7: (false\\u000D||\\u000Dtrue) === true");if(eval("false\u2028||\u2028true")!==!0)throw new Test262Error("#8: (false\\u2028||\\u2028true) === true");if(eval("false\u2029||\u2029true")!==!0)throw new Test262Error("#9: (false\\u2029||\\u2029true) === true");if(eval(`false	\v\f \xA0
\r\u2028\u2029||	\v\f \xA0
\r\u2028\u2029true`)!==!0)throw new Test262Error("#10: (false\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029||\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029true) === true");



test262/test/intl402/Temporal/PlainYearMonth/prototype/equals/infinity-throws-rangeerror.js


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.equals({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.equals({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/right-shift/S11.7.2_A3_T2.6.js


if("1">>void 0!==1)throw new Test262Error('#1: "1" >> undefined === 1. Actual: '+("1">>void 0));if(void 0>>"1"!==0)throw new Test262Error('#2: undefined >> "1" === 0. Actual: '+(void 0>>"1"));if(new String("1")>>void 0!==1)throw new Test262Error('#3: new String("1") >> undefined === 1. Actual: '+(new String("1")>>void 0));if(void 0>>new String("1")!==0)throw new Test262Error('#4: undefined >> new String("1") === 0. Actual: '+(void 0>>new String("1")));


if("1">>void 0!==1)throw new Test262Error('#1: "1" >> undefined === 1. Actual: '+("1">>void 0));if(void 0>>"1")throw new Test262Error('#2: undefined >> "1" === 0. Actual: '+(void 0>>"1"));if(new String("1")>>void 0!==1)throw new Test262Error('#3: new String("1") >> undefined === 1. Actual: '+(new String("1")>>void 0));if(void 0>>new String("1"))throw new Test262Error('#4: undefined >> new String("1") === 0. Actual: '+(void 0>>new String("1")));



test262/test/language/expressions/right-shift/S11.7.2_A2.4_T3.js


try{throw x>>(x=1),new Test262Error("#1.1: x >> (x = 1) throw ReferenceError. Actual: "+(x>>(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >> (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x>>(x=1),new Test262Error("#1.1: x >> (x = 1) throw ReferenceError. Actual: "+(x>>(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >> (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/right-shift/S11.7.2_A2.1_T3.js


try{throw 1>>y,new Test262Error("#1.1: 1 >> y throw ReferenceError. Actual: "+(1>>y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 >> y throw ReferenceError. Actual: "+e)}


try{throw 1>>y,new Test262Error("#1.1: 1 >> y throw ReferenceError. Actual: "+(1>>y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 >> y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/String/prototype/charAt/S15.5.4.4_A7.js


var __FACTORY=String.prototype.charAt;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.charAt; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: undefined = 1 throw a TypeError. Actual: "+e)}


var __FACTORY=String.prototype.charAt;try{var __instance=new __FACTORY;throw new Test262Error('#1: __FACTORY = String.prototype.charAt; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: undefined = 1 throw a TypeError. Actual: "+e)}



test262/test/built-ins/ShadowRealm/WrappedFunction/length-throws-typeerror.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate("\nfunction fn() {}\nObject.defineProperty(fn, 'length', {\n  get: () => {\n    throw new Error('blah');\n  },\n  enumerable: false,\n  configurable: true,\n});\nfn;\n"),"expect a TypeError on length getter throwing");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate(`
function fn() {}
Object.defineProperty(fn, 'length', {
  get: () => {
    throw new Error('blah');
  },
  enumerable: false,
  configurable: true,
});
fn;
`),"expect a TypeError on length getter throwing");



test262/test/built-ins/ShadowRealm/WrappedFunction/throws-typeerror-on-revoked-proxy.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,fn=r.evaluate("\nglobalThis.revocable = Proxy.revocable(() => {}, {});\n\nglobalThis.revocable.proxy;\n");r.evaluate("revocable.revoke()");assert.throws(TypeError,()=>fn());


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm,fn=r.evaluate(`
globalThis.revocable = Proxy.revocable(() => {}, {});

globalThis.revocable.proxy;
`);r.evaluate("revocable.revoke()"),assert.throws(TypeError,()=>fn());



test262/test/language/expressions/right-shift/S11.7.2_A2.1_T2.js


try{throw x>>1,new Test262Error("#1.1: x >> 1 throw ReferenceError. Actual: "+(x>>1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x >> 1 throw ReferenceError. Actual: "+e)}


try{throw x>>1,new Test262Error("#1.1: x >> 1 throw ReferenceError. Actual: "+(x>>1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x >> 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/ShadowRealm/WrappedFunction/name-throws-typeerror.js


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate("\nfunction fn() {}\nObject.defineProperty(fn, 'name', {\n  get: () => {\n    throw new Error('blah');\n  },\n  enumerable: false,\n  configurable: true,\n});\nfn;\n"),"expect a TypeError on name getter throwing");


assert.sameValue(typeof ShadowRealm.prototype.evaluate,"function","This test must fail if ShadowRealm.prototype.evaluate is not a function");const r=new ShadowRealm;assert.throws(TypeError,()=>r.evaluate(`
function fn() {}
Object.defineProperty(fn, 'name', {
  get: () => {
    throw new Error('blah');
  },
  enumerable: false,
  configurable: true,
});
fn;
`),"expect a TypeError on name getter throwing");



test262/test/intl402/Temporal/PlainYearMonth/compare/infinity-throws-rangeerror.js


const other=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`);assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,eraYear:obj1},other));assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,eraYear:obj2}));assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const other=new Temporal.PlainYearMonth(2e3,5,"gregory"),base={era:"ad",month:5,calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,eraYear:inf},other),`eraYear property cannot be ${inf}`),assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls1=[],obj1=TemporalHelpers.toPrimitiveObserver(calls1,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare({...base,eraYear:obj1},other)),assert.compareArray(calls1,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value");const calls2=[],obj2=TemporalHelpers.toPrimitiveObserver(calls2,inf,"eraYear");assert.throws(RangeError,()=>Temporal.PlainYearMonth.compare(other,{...base,eraYear:obj2})),assert.compareArray(calls2,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/language/expressions/right-shift/S11.7.2_A3_T2.8.js


if(!0>>void 0!==1)throw new Test262Error("#1: true >> undefined === 1. Actual: "+(!0>>void 0));if(void 0>>1!==0)throw new Test262Error("#2: undefined >> true === 0. Actual: "+(void 0>>1));if(new Boolean(!0)>>void 0!==1)throw new Test262Error("#3: new Boolean(true) >> undefined === 1. Actual: "+(new Boolean(!0)>>void 0));if(void 0>>new Boolean(!0)!==0)throw new Test262Error("#4: undefined >> new Boolean(true) === 0. Actual: "+(void 0>>new Boolean(!0)));


if(!0>>void 0!==1)throw new Test262Error("#1: true >> undefined === 1. Actual: "+(!0>>void 0));if(void 0>>!0)throw new Test262Error("#2: undefined >> true === 0. Actual: "+(void 0>>!0));if(new Boolean(!0)>>void 0!==1)throw new Test262Error("#3: new Boolean(true) >> undefined === 1. Actual: "+(new Boolean(!0)>>void 0));if(void 0>>new Boolean(!0))throw new Test262Error("#4: undefined >> new Boolean(true) === 0. Actual: "+(void 0>>new Boolean(!0)));



test262/test/built-ins/String/prototype/includes/return-false-with-out-of-bounds-position.js


var str="The future is cool!";assert.sameValue(str.includes("!",str.length+1),!1,'str.includes("!", str.length + 1) returns false');assert.sameValue(str.includes("!",100),!1,'str.includes("!", 100) returns false');assert.sameValue(str.includes("!",Infinity),!1,'str.includes("!", Infinity) returns false');assert.sameValue(str.includes("!",str.length),!1,'str.includes("!", str.length) returns false');


var str="The future is cool!";assert.sameValue(str.includes("!",str.length+1),!1,'str.includes("!", str.length + 1) returns false'),assert.sameValue(str.includes("!",100),!1,'str.includes("!", 100) returns false'),assert.sameValue(str.includes("!",1/0),!1,'str.includes("!", Infinity) returns false'),assert.sameValue(str.includes("!",str.length),!1,'str.includes("!", str.length) returns false');



test262/test/language/expressions/right-shift/S11.7.2_A1.js


if(eval("-4	>>	1")!==-2)throw new Test262Error("#1: -4\\u0009>>\\u00091 === -2");if(eval("-4\v>>\v1")!==-2)throw new Test262Error("#2: -4\\u000B>>\\u000B1 === -2");if(eval("-4\f>>\f1")!==-2)throw new Test262Error("#3: -4\\u000C>>\\u000C1 === -2");if(eval("-4 >> 1")!==-2)throw new Test262Error("#4: -4\\u0020>>\\u00201 === -2");if(eval("-4\xA0>>\xA01")!==-2)throw new Test262Error("#5: -4\\u00A0>>\\u00A01 === -2");if(eval("-4\n>>\n1")!==-2)throw new Test262Error("#6: -4\\u000A>>\\u000A1 === -2");if(eval("-4\r>>\r1")!==-2)throw new Test262Error("#7: -4\\u000D>>\\u000D1 === -2");if(eval("-4\u2028>>\u20281")!==-2)throw new Test262Error("#8: -4\\u2028>>\\u20281 === -2");if(eval("-4\u2029>>\u20291")!==-2)throw new Test262Error("#9: -4\\u2029>>\\u20291 === -2");if(eval("-4	\v\f \xA0\n\r\u2028\u2029>>	\v\f \xA0\n\r\u2028\u20291")!==-2)throw new Test262Error("#10: -4\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === -2");


if(eval("-4	>>	1")!==-2)throw new Test262Error("#1: -4\\u0009>>\\u00091 === -2");if(eval("-4\v>>\v1")!==-2)throw new Test262Error("#2: -4\\u000B>>\\u000B1 === -2");if(eval("-4\f>>\f1")!==-2)throw new Test262Error("#3: -4\\u000C>>\\u000C1 === -2");if(eval("-4 >> 1")!==-2)throw new Test262Error("#4: -4\\u0020>>\\u00201 === -2");if(eval("-4\xA0>>\xA01")!==-2)throw new Test262Error("#5: -4\\u00A0>>\\u00A01 === -2");if(eval(`-4
>>
1`)!==-2)throw new Test262Error("#6: -4\\u000A>>\\u000A1 === -2");if(eval("-4\r>>\r1")!==-2)throw new Test262Error("#7: -4\\u000D>>\\u000D1 === -2");if(eval("-4\u2028>>\u20281")!==-2)throw new Test262Error("#8: -4\\u2028>>\\u20281 === -2");if(eval("-4\u2029>>\u20291")!==-2)throw new Test262Error("#9: -4\\u2029>>\\u20291 === -2");if(eval(`-4	\v\f \xA0
\r\u2028\u2029>>	\v\f \xA0
\r\u2028\u20291`)!==-2)throw new Test262Error("#10: -4\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029>>\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === -2");



test262/test/language/expressions/right-shift/bigint-and-number.js


assert.throws(TypeError,function(){1n>>1},"1n >> 1 throws TypeError"),assert.throws(TypeError,function(){1>>1n},"1 >> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>1},"Object(1n) >> 1 throws TypeError"),assert.throws(TypeError,function(){1>>Object(1n)},"1 >> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>Object(1)},"1n >> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>1n},"Object(1) >> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>Object(1)},"Object(1n) >> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>Object(1n)},"Object(1) >> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>NaN},"1n >> NaN throws TypeError"),assert.throws(TypeError,function(){NaN>>1n},"NaN >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>Infinity},"1n >> Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity>>1n},"Infinity >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>1},"1n >> true throws TypeError"),assert.throws(TypeError,function(){!0>>1n},"true >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>"1"},'1n >> "1" throws TypeError'),assert.throws(TypeError,function(){"1">>1n},'"1" >> 1n throws TypeError'),assert.throws(TypeError,function(){1n>>null},"1n >> null throws TypeError"),assert.throws(TypeError,function(){null>>1n},"null >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>void 0},"1n >> undefined throws TypeError"),assert.throws(TypeError,function(){void 0>>1n},"undefined >> 1n throws TypeError");


assert.throws(TypeError,function(){1n>>1},"1n >> 1 throws TypeError"),assert.throws(TypeError,function(){1>>1n},"1 >> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>1},"Object(1n) >> 1 throws TypeError"),assert.throws(TypeError,function(){1>>Object(1n)},"1 >> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>Object(1)},"1n >> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>1n},"Object(1) >> 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)>>Object(1)},"Object(1n) >> Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)>>Object(1n)},"Object(1) >> Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n>>NaN},"1n >> NaN throws TypeError"),assert.throws(TypeError,function(){NaN>>1n},"NaN >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>1/0},"1n >> Infinity throws TypeError"),assert.throws(TypeError,function(){1/0>>1n},"Infinity >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>!0},"1n >> true throws TypeError"),assert.throws(TypeError,function(){!0>>1n},"true >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>"1"},'1n >> "1" throws TypeError'),assert.throws(TypeError,function(){"1">>1n},'"1" >> 1n throws TypeError'),assert.throws(TypeError,function(){1n>>null},"1n >> null throws TypeError"),assert.throws(TypeError,function(){null>>1n},"null >> 1n throws TypeError"),assert.throws(TypeError,function(){1n>>void 0},"1n >> undefined throws TypeError"),assert.throws(TypeError,function(){void 0>>1n},"undefined >> 1n throws TypeError");



test262/test/built-ins/String/prototype/endsWith/return-true-if-searchstring-is-empty.js


var str="The future is cool!";assert(str.endsWith(""),'str.endsWith("") returns true');assert(str.endsWith("",str.length),'str.endsWith("", str.length) returns true');assert(str.endsWith("",Infinity),'str.endsWith("", Infinity) returns true');assert(str.endsWith("",-1),'str.endsWith("", -1) returns true');assert(str.endsWith("",-1/0),'str.endsWith("", -Infinity) returns true');


var str="The future is cool!";assert(str.endsWith(""),'str.endsWith("") returns true'),assert(str.endsWith("",str.length),'str.endsWith("", str.length) returns true'),assert(str.endsWith("",1/0),'str.endsWith("", Infinity) returns true'),assert(str.endsWith("",-1),'str.endsWith("", -1) returns true'),assert(str.endsWith("",-1/0),'str.endsWith("", -Infinity) returns true');



test262/test/built-ins/Promise/reject/S25.4.4.4_A2.1_T1.js


var p=Promise.reject(3);assert(!!(p instanceof Promise),"The value of !!(p instanceof Promise) is expected to be true");p.then(function(){throw new Test262Error("Promise should not be fulfilled.")},function(result){assert.sameValue(result,3,"The value of result is expected to be 3")}).then($DONE,$DONE);


var p=Promise.reject(3);assert(p instanceof Promise,"The value of !!(p instanceof Promise) is expected to be true"),p.then(function(){throw new Test262Error("Promise should not be fulfilled.")},function(result){assert.sameValue(result,3,"The value of result is expected to be 3")}).then($DONE,$DONE);



test262/test/language/expressions/right-shift/S11.7.2_A2.4_T4.js


if((y=1)>>y!==0)throw new Test262Error("#1: (y = 1) >> y === 0. Actual: "+((y=1)>>y));


if((y=1)>>y)throw new Test262Error("#1: (y = 1) >> y === 0. Actual: "+((y=1)>>y));



test262/test/language/expressions/right-shift/S11.7.2_A2.4_T1.js


var x=0;if((x=1)>>x!==0)throw new Test262Error("#1: var x = 0; (x = 1) >> x === 0. Actual: "+((x=1)>>x));var x=-4;if(x>>(x=1)!==-2)throw new Test262Error("#2: var x = -4; x >> (x = 1) === -2. Actual: "+(x>>(x=1)));


var x=0;if((x=1)>>x)throw new Test262Error("#1: var x = 0; (x = 1) >> x === 0. Actual: "+((x=1)>>x));var x=-4;if(x>>(x=1)!==-2)throw new Test262Error("#2: var x = -4; x >> (x = 1) === -2. Actual: "+(x>>(x=1)));



test262/test/language/expressions/right-shift/S11.7.2_A3_T2.4.js


if(1>>void 0!==1)throw new Test262Error("#1: 1 >> undefined === 1. Actual: "+(1>>void 0));if(void 0>>1!==0)throw new Test262Error("#2: undefined >> 1 === 0. Actual: "+(void 0>>1));if(new Number(1)>>void 0!==1)throw new Test262Error("#3: new Number(1) >> undefined === 1. Actual: "+(new Number(1)>>void 0));if(void 0>>new Number(1)!==0)throw new Test262Error("#4: undefined >> new Number(1) === 0. Actual: "+(void 0>>new Number(1)));


if(1>>void 0!==1)throw new Test262Error("#1: 1 >> undefined === 1. Actual: "+(1>>void 0));if(void 0>>1)throw new Test262Error("#2: undefined >> 1 === 0. Actual: "+(void 0>>1));if(new Number(1)>>void 0!==1)throw new Test262Error("#3: new Number(1) >> undefined === 1. Actual: "+(new Number(1)>>void 0));if(void 0>>new Number(1))throw new Test262Error("#4: undefined >> new Number(1) === 0. Actual: "+(void 0>>new Number(1)));



test262/test/built-ins/isFinite/return-false-on-nan-or-infinities.js


assert.sameValue(isFinite(NaN),!1,"NaN"),assert.sameValue(isFinite(Infinity),!1,"Infinity"),assert.sameValue(isFinite(-1/0),!1,"-Infinity");


assert.sameValue(isFinite(NaN),!1,"NaN"),assert.sameValue(isFinite(1/0),!1,"Infinity"),assert.sameValue(isFinite(-1/0),!1,"-Infinity");



test262/test/intl402/Temporal/ZonedDateTime/from/infinity-throws-rangeerror.js


const base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,eraYear:obj},{overflow}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});


const base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[1/0,-1/0].forEach(inf=>{["constrain","reject"].forEach(overflow=>{assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,eraYear:inf},{overflow}),`eraYear property cannot be ${inf} (overflow ${overflow}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>Temporal.ZonedDateTime.from({...base,eraYear:obj},{overflow})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")})});



test262/test/language/statements/while/S12.6.2_A5.js


var __evaluated,__in__do__before__break,__in__do__after__break;__evaluated=eval("while(1) {__in__do__before__break=1; break; __in__do__after__break=2;}");if(__in__do__before__break!==1)throw new Test262Error("#1: __in__do__before__break === 1. Actual:  __in__do__before__break ==="+__in__do__before__break);if(typeof __in__do__after__break!="undefined")throw new Test262Error('#2: typeof __in__do__after__break === "undefined". Actual:  typeof __in__do__after__break ==='+typeof __in__do__after__break);if(__evaluated!==1)throw new Test262Error("#3: __evaluated === 1. Actual:  __evaluated ==="+__evaluated);


var __evaluated,__in__do__before__break,__in__do__after__break;if(__evaluated=eval("while(1) {__in__do__before__break=1; break; __in__do__after__break=2;}"),__in__do__before__break!==1)throw new Test262Error("#1: __in__do__before__break === 1. Actual:  __in__do__before__break ==="+__in__do__before__break);if(typeof __in__do__after__break<"u")throw new Test262Error('#2: typeof __in__do__after__break === "undefined". Actual:  typeof __in__do__after__break ==='+typeof __in__do__after__break);if(__evaluated!==1)throw new Test262Error("#3: __evaluated === 1. Actual:  __evaluated ==="+__evaluated);



test262/test/built-ins/isFinite/tonumber-operations.js


assert.sameValue(isFinite("0"),!0,"'0'"),assert.sameValue(isFinite(""),!0,"the empty string"),assert.sameValue(isFinite("Infinity"),!1,"'Infinity'"),assert.sameValue(isFinite("this is not a number"),!1,"string"),assert.sameValue(isFinite(!0),!0,"true"),assert.sameValue(isFinite(!1),!0,"false"),assert.sameValue(isFinite([1]),!0,"Object [1]"),assert.sameValue(isFinite([Infinity]),!1,"Object [Infinity]"),assert.sameValue(isFinite([NaN]),!1,"Object [NaN]"),assert.sameValue(isFinite(null),!0,"null"),assert.sameValue(isFinite(void 0),!1,"undefined"),assert.sameValue(isFinite(),!1,"no arg");


assert.sameValue(isFinite("0"),!0,"'0'"),assert.sameValue(isFinite(""),!0,"the empty string"),assert.sameValue(isFinite("Infinity"),!1,"'Infinity'"),assert.sameValue(isFinite("this is not a number"),!1,"string"),assert.sameValue(isFinite(!0),!0,"true"),assert.sameValue(isFinite(!1),!0,"false"),assert.sameValue(isFinite([1]),!0,"Object [1]"),assert.sameValue(isFinite([1/0]),!1,"Object [Infinity]"),assert.sameValue(isFinite([NaN]),!1,"Object [NaN]"),assert.sameValue(isFinite(null),!0,"null"),assert.sameValue(isFinite(void 0),!1,"undefined"),assert.sameValue(isFinite(),!1,"no arg");



test262/test/built-ins/encodeURIComponent/S15.1.3.4_A4_T3.js


if(encodeURIComponent("http://unipro.ru/\nabout")!=="http%3A%2F%2Funipro.ru%2F%0Aabout"&&encodeURIComponent("http://unipro.ru/\nabout")!=="http%3A%2F%2Funipro.ru%2F%0aabout")throw new Test262Error("#1: http://unipro.ru/\\nabout");if(encodeURIComponent("http://unipro.ru/\vabout")!=="http%3A%2F%2Funipro.ru%2F%0Babout"&&encodeURIComponent("http://unipro.ru/\vabout")!=="http%3A%2F%2Funipro.ru%2F%0babout")throw new Test262Error("#2: http://unipro.ru/\\vabout");if(encodeURIComponent("http://unipro.ru/\fabout")!=="http%3A%2F%2Funipro.ru%2F%0Cabout"&&encodeURIComponent("http://unipro.ru/\fabout")!=="http%3A%2F%2Funipro.ru%2F%0cabout")throw new Test262Error("#3: http://unipro.ru/\\fabout");if(encodeURIComponent("http://unipro.ru/\rabout")!=="http%3A%2F%2Funipro.ru%2F%0Dabout"&&encodeURIComponent("http://unipro.ru/\rabout")!=="http%3A%2F%2Funipro.ru%2F%0dabout")throw new Test262Error("#4: http://unipro.ru/\\rabout");


if(encodeURIComponent(`http://unipro.ru/
about`)!=="http%3A%2F%2Funipro.ru%2F%0Aabout"&&encodeURIComponent(`http://unipro.ru/
about`)!=="http%3A%2F%2Funipro.ru%2F%0aabout")throw new Test262Error("#1: http://unipro.ru/\\nabout");if(encodeURIComponent("http://unipro.ru/\vabout")!=="http%3A%2F%2Funipro.ru%2F%0Babout"&&encodeURIComponent("http://unipro.ru/\vabout")!=="http%3A%2F%2Funipro.ru%2F%0babout")throw new Test262Error("#2: http://unipro.ru/\\vabout");if(encodeURIComponent("http://unipro.ru/\fabout")!=="http%3A%2F%2Funipro.ru%2F%0Cabout"&&encodeURIComponent("http://unipro.ru/\fabout")!=="http%3A%2F%2Funipro.ru%2F%0cabout")throw new Test262Error("#3: http://unipro.ru/\\fabout");if(encodeURIComponent("http://unipro.ru/\rabout")!=="http%3A%2F%2Funipro.ru%2F%0Dabout"&&encodeURIComponent("http://unipro.ru/\rabout")!=="http%3A%2F%2Funipro.ru%2F%0dabout")throw new Test262Error("#4: http://unipro.ru/\\rabout");



test262/test/built-ins/Promise/resolve/S25.4.4.5_A4.1_T1.js


var resolveP,p=new Promise(function(resolve){resolveP=resolve});resolveP(p);p.then(function(){throw new Test262Error("Should not fulfill: should reject with TypeError.")},function(err){assert(!!(err instanceof TypeError),"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);


var resolveP,p=new Promise(function(resolve){resolveP=resolve});resolveP(p),p.then(function(){throw new Test262Error("Should not fulfill: should reject with TypeError.")},function(err){assert(err instanceof TypeError,"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);



test262/test/built-ins/Promise/prototype/then/S25.4.5.3_A1.1_T1.js


assert(!!(Promise.prototype.then instanceof Function),"The value of !!(Promise.prototype.then instanceof Function) is expected to be true");


assert(Promise.prototype.then instanceof Function,"The value of !!(Promise.prototype.then instanceof Function) is expected to be true");



test262/test/built-ins/encodeURIComponent/S15.1.3.4_A5.3.js


var x=encodeURIComponent.length;verifyNotWritable(encodeURIComponent,"length",null,Infinity);if(encodeURIComponent.length!==x)throw new Test262Error("#1: x = encodeURIComponent.length; encodeURIComponent.length = Infinity; encodeURIComponent.length === x. Actual: "+encodeURIComponent.length);


var x=encodeURIComponent.length;if(verifyNotWritable(encodeURIComponent,"length",null,1/0),encodeURIComponent.length!==x)throw new Test262Error("#1: x = encodeURIComponent.length; encodeURIComponent.length = Infinity; encodeURIComponent.length === x. Actual: "+encodeURIComponent.length);



test262/test/language/statements/while/S12.6.2_A2.js


try{for(;function(){throw 1}();)__in__while="reached";throw new Test262Error(`#1: 'while ((function(){throw 1})()) __in__while = "reached"' lead to throwing exception`)}catch(e){if(e!==1)throw new Test262Error("#1: Exception === 1. Actual:  Exception ==="+e)}if(typeof __in__while!="undefined")throw new Test262Error('#1.1: typeof __in__while === "undefined". Actual: typeof __in__while ==='+typeof __in__while);


try{for(;function(){throw 1}();)__in__while="reached";throw new Test262Error(`#1: 'while ((function(){throw 1})()) __in__while = "reached"' lead to throwing exception`)}catch(e){if(e!==1)throw new Test262Error("#1: Exception === 1. Actual:  Exception ==="+e)}if(typeof __in__while<"u")throw new Test262Error('#1.1: typeof __in__while === "undefined". Actual: typeof __in__while ==='+typeof __in__while);



test262/test/built-ins/encodeURIComponent/S15.1.3.4_A5.7.js


try{throw new encodeURIComponent,new Test262Error("#1.1: new encodeURIComponent() throw TypeError. Actual: "+new encodeURIComponent)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new encodeURIComponent() throw TypeError. Actual: "+e)}


try{throw new encodeURIComponent,new Test262Error("#1.1: new encodeURIComponent() throw TypeError. Actual: "+new encodeURIComponent)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new encodeURIComponent() throw TypeError. Actual: "+e)}



test262/test/intl402/Temporal/ZonedDateTime/prototype/since/infinity-throws-rangeerror.js


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[Infinity,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj}));assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});


const instance=new Temporal.ZonedDateTime(1000000000000000000n,"UTC","gregory"),base={era:"ad",month:5,day:2,hour:15,timeZone:"UTC",calendar:"gregory"};[1/0,-1/0].forEach(inf=>{assert.throws(RangeError,()=>instance.since({...base,eraYear:inf}),`eraYear property cannot be ${inf}`);const calls=[],obj=TemporalHelpers.toPrimitiveObserver(calls,inf,"eraYear");assert.throws(RangeError,()=>instance.since({...base,eraYear:obj})),assert.compareArray(calls,["get eraYear.valueOf","call eraYear.valueOf"],"it fails after fetching the primitive value")});



test262/test/built-ins/String/prototype/toLowerCase/S15.5.4.16_A1_T8.js


if(Number.prototype.toLowerCase=String.prototype.toLowerCase,Infinity.toLowerCase()!=="infinity")throw new Test262Error('#1: Number.prototype.toLowerCase = String.prototype.toLowerCase; Infinity.toLowerCase()=== "infinity". Actual: '+Infinity.toLowerCase());


if(Number.prototype.toLowerCase=String.prototype.toLowerCase,(1/0).toLowerCase()!=="infinity")throw new Test262Error('#1: Number.prototype.toLowerCase = String.prototype.toLowerCase; Infinity.toLowerCase()=== "infinity". Actual: '+(1/0).toLowerCase());



test262/test/language/asi/S7.9_A10_T12.js


a:;





test262/test/built-ins/String/15.5.5.5.2-3-1.js


var s=new String("hello world");assert.sameValue(s["foo"],void 0,'s["foo"]');


var s=new String("hello world");assert.sameValue(s.foo,void 0,'s["foo"]');



test262/test/language/asi/S7.9_A9_T2.js


do ;while(!1);!0;


do;while(!1);



test262/test/built-ins/Object/defineProperty/15.2.3.6-2-34.js


var obj={};Object.defineProperty(obj,"AB\n\\cd",{});assert(obj.hasOwnProperty("AB\n\\cd"),'obj.hasOwnProperty("AB\n\\cd") !== true');


var obj={};Object.defineProperty(obj,`AB
\\cd`,{}),assert(obj.hasOwnProperty(`AB
\\cd`),`obj.hasOwnProperty("AB
\\cd") !== true`);



test262/test/built-ins/String/prototype/toLowerCase/S15.5.4.16_A7.js


var __FACTORY=String.prototype.toLowerCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toLowerCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error('#1.1: var __FACTORY = String.prototype.toLowerCase; "__instance = new __FACTORY" throws a TypeError. Actual: '+e)}


var __FACTORY=String.prototype.toLowerCase;try{var __instance=new __FACTORY;throw new Test262Error('#1: var __FACTORY = String.prototype.toLowerCase; "__instance = new __FACTORY" lead to throwing exception')}catch(e){if(!(e instanceof TypeError))throw new Test262Error('#1.1: var __FACTORY = String.prototype.toLowerCase; "__instance = new __FACTORY" throws a TypeError. Actual: '+e)}



test262/test/language/expressions/multiplication/S11.5.1_A2.4_T3.js


try{throw x*(x=1),new Test262Error("#1.1: x * (x = 1) throw ReferenceError. Actual: "+x*(x=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x * (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x*(x=1),new Test262Error("#1.1: x * (x = 1) throw ReferenceError. Actual: "+x*(x=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x * (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Promise/prototype/then/S25.4.5.3_A1.1_T2.js


var p=new Promise(function(){});assert(!!(p.then instanceof Function),"The value of !!(p.then instanceof Function) is expected to be true");assert.sameValue(p.then.length,2,"The value of p.then.length is expected to be 2");


var p=new Promise(function(){});assert(p.then instanceof Function,"The value of !!(p.then instanceof Function) is expected to be true"),assert.sameValue(p.then.length,2,"The value of p.then.length is expected to be 2");



test262/test/language/asi/S7.9_A5.6_T1.js


var x=0,y=0;x;++y;if(x!==0&y!==1)throw new Test262Error("#1: Check Postfix Increment Operator for automatic semicolon insertion");x;++y;if(x!==0&y!==2)throw new Test262Error("#2: Check Postfix Increment Operator for automatic semicolon insertion");


var x=0,y=0;if(++y,x!==0&y!==1)throw new Test262Error("#1: Check Postfix Increment Operator for automatic semicolon insertion");if(++y,x!==0&y!==2)throw new Test262Error("#2: Check Postfix Increment Operator for automatic semicolon insertion");



test262/test/language/expressions/multiplication/S11.5.1_A4_T5.js


if(Number.NEGATIVE_INFINITY*-1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: -Infinity * -1 === Infinity. Actual: Infinity");if(-1*Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: -1 * -Infinity === Infinity. Actual: Infinity");if(Number.POSITIVE_INFINITY*-1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: Infinity * -1 === -Infinity. Actual: -Infinity");if(-1*Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#4: -1 * Infinity === -Infinity. Actual: -Infinity");if(Number.POSITIVE_INFINITY*Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity * Number.MAX_VALUE === Infinity. Actual: "+Infinity*Number.MAX_VALUE);if(Number.POSITIVE_INFINITY*Number.MAX_VALUE!==Number.MAX_VALUE*Number.POSITIVE_INFINITY)throw new Test262Error("#6: Infinity * Number.MAX_VALUE === Number.MAX_VALUE * Infinity. Actual: "+Infinity*Number.MAX_VALUE);if(Number.NEGATIVE_INFINITY*Number.MIN_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity * Number.MIN_VALUE === -Infinity. Actual: "+-1/0*Number.MIN_VALUE);if(Number.NEGATIVE_INFINITY*Number.MIN_VALUE!==Number.MIN_VALUE*Number.NEGATIVE_INFINITY)throw new Test262Error("#8: -Infinity * Number.MIN_VALUE === Number.MIN_VALUE * -Infinity. Actual: "+-1/0*Number.MIN_VALUE);


if(Number.NEGATIVE_INFINITY*-1!==Number.POSITIVE_INFINITY)throw new Test262Error("#1: -Infinity * -1 === Infinity. Actual: "+-1/0*-1);if(-1*Number.NEGATIVE_INFINITY!==Number.POSITIVE_INFINITY)throw new Test262Error("#2: -1 * -Infinity === Infinity. Actual: "+-1*(-1/0));if(Number.POSITIVE_INFINITY*-1!==Number.NEGATIVE_INFINITY)throw new Test262Error("#3: Infinity * -1 === -Infinity. Actual: "+1/0*-1);if(-1*Number.POSITIVE_INFINITY!==Number.NEGATIVE_INFINITY)throw new Test262Error("#4: -1 * Infinity === -Infinity. Actual: "+-1*(1/0));if(Number.POSITIVE_INFINITY*Number.MAX_VALUE!==Number.POSITIVE_INFINITY)throw new Test262Error("#5: Infinity * Number.MAX_VALUE === Infinity. Actual: "+1/0*Number.MAX_VALUE);if(Number.POSITIVE_INFINITY*Number.MAX_VALUE!==Number.MAX_VALUE*Number.POSITIVE_INFINITY)throw new Test262Error("#6: Infinity * Number.MAX_VALUE === Number.MAX_VALUE * Infinity. Actual: "+1/0*Number.MAX_VALUE);if(Number.NEGATIVE_INFINITY*Number.MIN_VALUE!==Number.NEGATIVE_INFINITY)throw new Test262Error("#7: -Infinity * Number.MIN_VALUE === -Infinity. Actual: "+-1/0*Number.MIN_VALUE);if(Number.NEGATIVE_INFINITY*Number.MIN_VALUE!==Number.MIN_VALUE*Number.NEGATIVE_INFINITY)throw new Test262Error("#8: -Infinity * Number.MIN_VALUE === Number.MIN_VALUE * -Infinity. Actual: "+-1/0*Number.MIN_VALUE);



test262/test/language/asi/S7.9_A5.4_T1.js


var x=1,y=1;x;--y;if(x!==1)throw new Test262Error("#1: Check Prefix Decrement Operator for automatic semicolon insertion");if(y!==0)throw new Test262Error("#1: Check Prefix Decrement Operator for automatic semicolon insertion");


var x=1,y=1;if(--y,x!==1)throw new Test262Error("#1: Check Prefix Decrement Operator for automatic semicolon insertion");if(y!==0)throw new Test262Error("#1: Check Prefix Decrement Operator for automatic semicolon insertion");



test262/test/language/asi/S7.9_A9_T9.js


do {}while(!1);


do;while(!1);



test262/test/language/expressions/multiplication/S11.5.1_A2.1_T3.js


try{throw 1*y,new Test262Error("#1.1: 1 * y throw ReferenceError. Actual: "+1*y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 * y throw ReferenceError. Actual: "+e)}


try{throw 1*y,new Test262Error("#1.1: 1 * y throw ReferenceError. Actual: "+1*y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 * y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/multiplication/S11.5.1_A2.1_T2.js


try{throw x*1,new Test262Error("#1.1: x * 1 throw ReferenceError. Actual: "+x*1)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x * 1 throw ReferenceError. Actual: "+e)}


try{throw x*1,new Test262Error("#1.1: x * 1 throw ReferenceError. Actual: "+x*1)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x * 1 throw ReferenceError. Actual: "+e)}



test262/test/built-ins/String/S15.5.5.1_A3.js


var __str__instance=new String("globglob");if(!__str__instance.hasOwnProperty("length"))throw new Test262Error('#1: var __str__instance = new String("globglob"); __str__instance.hasOwnProperty("length") return true. Actual: '+__str__instance.hasOwnProperty("length"));verifyNotConfigurable(__str__instance,"length");try{if(delete __str__instance.length===!0)throw new Test262Error('#2: var __str__instance = new String("globglob"); delete __str__instance.length !== true')}catch(e){if(e instanceof Test262Error)throw e;assert(e instanceof TypeError)}if(!__str__instance.hasOwnProperty("length"))throw new Test262Error('#3: var __str__instance = new String("globglob"); delete __str__instance.length; __str__instance.hasOwnProperty("length") return true. Actual: '+__str__instance.hasOwnProperty("length"));


var __str__instance=new String("globglob");if(!__str__instance.hasOwnProperty("length"))throw new Test262Error('#1: var __str__instance = new String("globglob"); __str__instance.hasOwnProperty("length") return true. Actual: '+__str__instance.hasOwnProperty("length"));verifyNotConfigurable(__str__instance,"length");try{if(delete __str__instance.length)throw new Test262Error('#2: var __str__instance = new String("globglob"); delete __str__instance.length !== true')}catch(e){if(e instanceof Test262Error)throw e;assert(e instanceof TypeError)}if(!__str__instance.hasOwnProperty("length"))throw new Test262Error('#3: var __str__instance = new String("globglob"); delete __str__instance.length; __str__instance.hasOwnProperty("length") return true. Actual: '+__str__instance.hasOwnProperty("length"));



test262/test/intl402/ListFormat/constructor/constructor/options-undefined.js


Object.defineProperties(Object.prototype,{type:{get(){throw new Error("Should not call type getter")}},style:{get(){throw new Error("Should not call style getter")}}});const optionsArguments=[[],[[]],[[],void 0]];for(const args of optionsArguments){const lf=new Intl.ListFormat(...args),resolvedOptions=lf.resolvedOptions();assert.sameValue(resolvedOptions.type,"conjunction",`Calling with ${args.length} empty arguments should yield the correct value for "type"`);assert.sameValue(resolvedOptions.style,"long",`Calling with ${args.length} empty arguments should yield the correct value for "style"`)}


Object.defineProperties(Object.prototype,{type:{get(){throw new Error("Should not call type getter")}},style:{get(){throw new Error("Should not call style getter")}}});const optionsArguments=[[],[[]],[[],void 0]];for(const args of optionsArguments){const resolvedOptions=new Intl.ListFormat(...args).resolvedOptions();assert.sameValue(resolvedOptions.type,"conjunction",`Calling with ${args.length} empty arguments should yield the correct value for "type"`),assert.sameValue(resolvedOptions.style,"long",`Calling with ${args.length} empty arguments should yield the correct value for "style"`)}



test262/test/language/asi/S7.9_A5.2_T1.js


var x=0,y=0;x;++y;if(x!==0)throw new Test262Error("#1: Check Prefix Increment Operator for automatic semicolon insertion");if(y!==1)throw new Test262Error("#2: Check Prefix Increment Operator for automatic semicolon insertion");


var x=0,y=0;if(++y,x!==0)throw new Test262Error("#1: Check Prefix Increment Operator for automatic semicolon insertion");if(y!==1)throw new Test262Error("#2: Check Prefix Increment Operator for automatic semicolon insertion");



test262/test/intl402/ListFormat/constructor/constructor/options-type-valid.js


const validOptions=[[void 0,"conjunction"],["conjunction","conjunction"],["disjunction","disjunction"],["unit","unit"],[{toString(){return"unit"}},"unit"]];for(const[validOption,expected]of validOptions){const lf=new Intl.ListFormat([],{type:validOption}),resolvedOptions=lf.resolvedOptions();assert.sameValue(resolvedOptions.type,expected)}


const validOptions=[[void 0,"conjunction"],["conjunction","conjunction"],["disjunction","disjunction"],["unit","unit"],[{toString(){return"unit"}},"unit"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.ListFormat([],{type:validOption}).resolvedOptions();assert.sameValue(resolvedOptions.type,expected)}



test262/test/language/expressions/multiplication/S11.5.1_A1.js


if(eval("1	*	1")!==1)throw new Test262Error("#1: 1\\u0009*\\u00091 === 1");if(eval("1\v*\v1")!==1)throw new Test262Error("#2: 1\\u000B*\\u000B1 === 1");if(eval("1\f*\f1")!==1)throw new Test262Error("#3: 1\\u000C*\\u000C1 === 1");if(eval("1 * 1")!==1)throw new Test262Error("#4: 1\\u0020*\\u00201 === 1");if(eval("1\xA0*\xA01")!==1)throw new Test262Error("#5: 1\\u00A0*\\u00A01 === 1");if(eval("1\n*\n1")!==1)throw new Test262Error("#6: 1\\u000A*\\u000A1 === 1");if(eval("1\r*\r1")!==1)throw new Test262Error("#7: 1\\u000D*\\u000D1 === 1");if(eval("1\u2028*\u20281")!==1)throw new Test262Error("#8: 1\\u2028*\\u20281 === 1");if(eval("1\u2029*\u20291")!==1)throw new Test262Error("#9: 1\\u2029*\\u20291 === 1");if(eval("1	\v\f \xA0\n\r\u2028\u2029*	\v\f \xA0\n\r\u2028\u20291")!==1)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029*\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");


if(eval("1	*	1")!==1)throw new Test262Error("#1: 1\\u0009*\\u00091 === 1");if(eval("1\v*\v1")!==1)throw new Test262Error("#2: 1\\u000B*\\u000B1 === 1");if(eval("1\f*\f1")!==1)throw new Test262Error("#3: 1\\u000C*\\u000C1 === 1");if(eval("1 * 1")!==1)throw new Test262Error("#4: 1\\u0020*\\u00201 === 1");if(eval("1\xA0*\xA01")!==1)throw new Test262Error("#5: 1\\u00A0*\\u00A01 === 1");if(eval(`1
*
1`)!==1)throw new Test262Error("#6: 1\\u000A*\\u000A1 === 1");if(eval("1\r*\r1")!==1)throw new Test262Error("#7: 1\\u000D*\\u000D1 === 1");if(eval("1\u2028*\u20281")!==1)throw new Test262Error("#8: 1\\u2028*\\u20281 === 1");if(eval("1\u2029*\u20291")!==1)throw new Test262Error("#9: 1\\u2029*\\u20291 === 1");if(eval(`1	\v\f \xA0
\r\u2028\u2029*	\v\f \xA0
\r\u2028\u20291`)!==1)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029*\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 1");



test262/test/built-ins/String/prototype/split/separator-undef-limit-custom.js


var str="undefined is not a function",result=str.split(void 0,1);assert.sameValue(Array.isArray(result),!0,"1, result is array");assert.sameValue(result.length,1,"1, result.length");assert.sameValue(result[0],str,"1, [0] is the same string");result=str.split(void 0,2);assert.sameValue(Array.isArray(result),!0,"2, result is array");assert.sameValue(result.length,1,"2, result.length");assert.sameValue(result[0],str,"2, [0] is the same string");result=str.split(void 0,void 0);assert.sameValue(Array.isArray(result),!0,"undefined, result is array");assert.sameValue(result.length,1,"undefined, result.length");assert.sameValue(result[0],str,"undefined, [0] is the same string");result=str.split(void 0,!0);assert.sameValue(Array.isArray(result),!0,"boolean, result is array");assert.sameValue(result.length,1,"boolean, result.length");assert.sameValue(result[0],str,"boolean, [0] is the same string");result=str.split(void 0,4294967297);assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 32 + 1, result is array");assert.sameValue(result.length,1,"ToUint32 2 ** 32 + 1, result.length");assert.sameValue(result[0],str,"ToUint32 2 ** 32 + 1, [0] is the same string");result=str.split(void 0,2147483648);assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 31, result is array");assert.sameValue(result.length,1,"ToUint32 2 ** 31, result.length");assert.sameValue(result[0],str,"ToUint32 2 ** 31, [0] is the same string");result=str.split(void 0,65536);assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 16, result is array");assert.sameValue(result.length,1,"ToUint32 2 ** 16, result.length");assert.sameValue(result[0],str,"ToUint32 2 ** 16, [0] is the same string");result=str.split(void 0,{valueOf(){return 1}});assert.sameValue(Array.isArray(result),!0,"boolean, result is array");assert.sameValue(result.length,1,"boolean, result.length");assert.sameValue(result[0],str,"boolean, [0] is the same string");


var str="undefined is not a function",result=str.split(void 0,1);assert.sameValue(Array.isArray(result),!0,"1, result is array"),assert.sameValue(result.length,1,"1, result.length"),assert.sameValue(result[0],str,"1, [0] is the same string"),result=str.split(void 0,2),assert.sameValue(Array.isArray(result),!0,"2, result is array"),assert.sameValue(result.length,1,"2, result.length"),assert.sameValue(result[0],str,"2, [0] is the same string"),result=str.split(void 0,void 0),assert.sameValue(Array.isArray(result),!0,"undefined, result is array"),assert.sameValue(result.length,1,"undefined, result.length"),assert.sameValue(result[0],str,"undefined, [0] is the same string"),result=str.split(void 0,!0),assert.sameValue(Array.isArray(result),!0,"boolean, result is array"),assert.sameValue(result.length,1,"boolean, result.length"),assert.sameValue(result[0],str,"boolean, [0] is the same string"),result=str.split(void 0,2**32+1),assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 32 + 1, result is array"),assert.sameValue(result.length,1,"ToUint32 2 ** 32 + 1, result.length"),assert.sameValue(result[0],str,"ToUint32 2 ** 32 + 1, [0] is the same string"),result=str.split(void 0,2**31),assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 31, result is array"),assert.sameValue(result.length,1,"ToUint32 2 ** 31, result.length"),assert.sameValue(result[0],str,"ToUint32 2 ** 31, [0] is the same string"),result=str.split(void 0,2**16),assert.sameValue(Array.isArray(result),!0,"ToUint32 2 ** 16, result is array"),assert.sameValue(result.length,1,"ToUint32 2 ** 16, result.length"),assert.sameValue(result[0],str,"ToUint32 2 ** 16, [0] is the same string"),result=str.split(void 0,{valueOf(){return 1}}),assert.sameValue(Array.isArray(result),!0,"boolean, result is array"),assert.sameValue(result.length,1,"boolean, result.length"),assert.sameValue(result[0],str,"boolean, [0] is the same string");



test262/test/intl402/ListFormat/constructor/constructor/options-style-valid.js


const validOptions=[[void 0,"long"],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"short"}},"short"],[{toString(){return"long"}},"long"],[{toString(){return"narrow"}},"narrow"]];for(const[validOption,expected]of validOptions){const lf=new Intl.ListFormat([],{style:validOption}),resolvedOptions=lf.resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}


const validOptions=[[void 0,"long"],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"short"}},"short"],[{toString(){return"long"}},"long"],[{toString(){return"narrow"}},"narrow"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.ListFormat([],{style:validOption}).resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}



test262/test/language/expressions/multiplication/bigint-and-number.js


assert.throws(TypeError,function(){1n*1},"1n * 1 throws TypeError"),assert.throws(TypeError,function(){1*1n},"1 * 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)*1},"Object(1n) * 1 throws TypeError"),assert.throws(TypeError,function(){1*Object(1n)},"1 * Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n*Object(1)},"1n * Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)*1n},"Object(1) * 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)*Object(1)},"Object(1n) * Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)*Object(1n)},"Object(1) * Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n*NaN},"1n * NaN throws TypeError"),assert.throws(TypeError,function(){NaN*1n},"NaN * 1n throws TypeError"),assert.throws(TypeError,function(){1n*Infinity},"1n * Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity*1n},"Infinity * 1n throws TypeError"),assert.throws(TypeError,function(){1n*1},"1n * true throws TypeError"),assert.throws(TypeError,function(){!0*1n},"true * 1n throws TypeError"),assert.throws(TypeError,function(){1n*"1"},'1n * "1" throws TypeError'),assert.throws(TypeError,function(){"1"*1n},'"1" * 1n throws TypeError'),assert.throws(TypeError,function(){1n*null},"1n * null throws TypeError"),assert.throws(TypeError,function(){null*1n},"null * 1n throws TypeError"),assert.throws(TypeError,function(){1n*void 0},"1n * undefined throws TypeError"),assert.throws(TypeError,function(){void 0*1n},"undefined * 1n throws TypeError");


assert.throws(TypeError,function(){1n*1},"1n * 1 throws TypeError"),assert.throws(TypeError,function(){1*1n},"1 * 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)*1},"Object(1n) * 1 throws TypeError"),assert.throws(TypeError,function(){1*Object(1n)},"1 * Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n*Object(1)},"1n * Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)*1n},"Object(1) * 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)*Object(1)},"Object(1n) * Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)*Object(1n)},"Object(1) * Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n*NaN},"1n * NaN throws TypeError"),assert.throws(TypeError,function(){NaN*1n},"NaN * 1n throws TypeError"),assert.throws(TypeError,function(){1n*(1/0)},"1n * Infinity throws TypeError"),assert.throws(TypeError,function(){1/0*1n},"Infinity * 1n throws TypeError"),assert.throws(TypeError,function(){1n*!0},"1n * true throws TypeError"),assert.throws(TypeError,function(){!0*1n},"true * 1n throws TypeError"),assert.throws(TypeError,function(){1n*"1"},'1n * "1" throws TypeError'),assert.throws(TypeError,function(){"1"*1n},'"1" * 1n throws TypeError'),assert.throws(TypeError,function(){1n*null},"1n * null throws TypeError"),assert.throws(TypeError,function(){null*1n},"null * 1n throws TypeError"),assert.throws(TypeError,function(){1n*void 0},"1n * undefined throws TypeError"),assert.throws(TypeError,function(){void 0*1n},"undefined * 1n throws TypeError");



test262/test/language/asi/S7.9_A5.6_T2.js


var x=0,y=2;x;--y;if(x!==0&y!==1)throw new Test262Error("#1: Check Postfix Increment Operator for automatic semicolon insertion");x;--y;if(x!==0&y!==0)throw new Test262Error("#2: Check Postfix Increment Operator for automatic semicolon insertion");


var x=0,y=2;if(--y,x!==0&y!==1)throw new Test262Error("#1: Check Postfix Increment Operator for automatic semicolon insertion");if(--y,x!==0&y!==0)throw new Test262Error("#2: Check Postfix Increment Operator for automatic semicolon insertion");



test262/test/intl402/Date/prototype/this-value-invalid-date.js


var functions={toLocaleString:Date.prototype.toLocaleString,toLocaleDateString:Date.prototype.toLocaleDateString,toLocaleTimeString:Date.prototype.toLocaleTimeString},invalidValues=[NaN,Infinity,-1/0];Object.getOwnPropertyNames(functions).forEach(function(p){var f=functions[p];invalidValues.forEach(function(value){var result=f.call(new Date(value));assert.sameValue(result,"Invalid Date","Date.prototype."+p+' did not return "Invalid Date" for '+value)})});


var functions={toLocaleString:Date.prototype.toLocaleString,toLocaleDateString:Date.prototype.toLocaleDateString,toLocaleTimeString:Date.prototype.toLocaleTimeString},invalidValues=[NaN,1/0,-1/0];Object.getOwnPropertyNames(functions).forEach(function(p){var f=functions[p];invalidValues.forEach(function(value){var result=f.call(new Date(value));assert.sameValue(result,"Invalid Date","Date.prototype."+p+' did not return "Invalid Date" for '+value)})});



test262/test/built-ins/Promise/prototype/catch/S25.4.5.1_A1.1_T1.js


assert(!!(Promise.prototype.catch instanceof Function),"The value of !!(Promise.prototype.catch instanceof Function) is expected to be true");


assert(Promise.prototype.catch instanceof Function,"The value of !!(Promise.prototype.catch instanceof Function) is expected to be true");



test262/test/language/asi/S7.9_A10_T11.js


a:;





test262/test/language/expressions/multiplication/S11.5.1_A4_T8.js


if(Number.MAX_VALUE*1.1*.9!==Number.MAX_VALUE*1.1*.9)throw new Test262Error("#1: Number.MAX_VALUE * 1.1 * 0.9 === (Number.MAX_VALUE * 1.1) * 0.9. Actual: "+Number.MAX_VALUE*1.1*.9);if(Number.MAX_VALUE*1.1*.9===Number.MAX_VALUE*.9900000000000001)throw new Test262Error("#2: (Number.MAX_VALUE * 1.1) * 0.9 !== Number.MAX_VALUE * (1.1 * 0.9)");


if(Number.MAX_VALUE*1.1*.9!==Number.MAX_VALUE*1.1*.9)throw new Test262Error("#1: Number.MAX_VALUE * 1.1 * 0.9 === (Number.MAX_VALUE * 1.1) * 0.9. Actual: "+Number.MAX_VALUE*1.1*.9);if(Number.MAX_VALUE*1.1*.9===Number.MAX_VALUE*(1.1*.9))throw new Test262Error("#2: (Number.MAX_VALUE * 1.1) * 0.9 !== Number.MAX_VALUE * (1.1 * 0.9)");



test262/test/built-ins/Promise/all/iter-returns-undefined-reject.js


try{Promise.all({[Symbol.iterator](){return}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}


try{Promise.all({[Symbol.iterator](){}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}



test262/test/language/asi/S7.9_A9_T1.js


do {}while(!1);


do;while(!1);



test262/test/built-ins/Promise/all/S25.4.4.1_A3.1_T1.js


var nonIterable=3;Promise.all(nonIterable).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.all(nonIterable) should throw TypeError")},function(err){assert(!!(err instanceof TypeError),"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);


var nonIterable=3;Promise.all(nonIterable).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.all(nonIterable) should throw TypeError")},function(err){assert(err instanceof TypeError,"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);



test262/test/language/asi/S7.9_A9_T5.js


do {}while(!1);


do;while(!1);



test262/test/built-ins/Promise/prototype/catch/S25.4.5.1_A2.1_T1.js


var p=Promise.resolve(3);assert(!!(p.catch instanceof Function),"The value of !!(p.catch instanceof Function) is expected to be true");


var p=Promise.resolve(3);assert(p.catch instanceof Function,"The value of !!(p.catch instanceof Function) is expected to be true");



test262/test/intl402/Number/prototype/toLocaleString/returns-same-results-as-NumberFormat.js


var numbers=[0,-0,1,-1,5.5,123,-123,-123.45,123.44501,.001234,-1.23e-9,123e-32,1.2,1.2344501e-9,123445.01,12344501e27,-12344501e27,Infinity,-1/0,NaN],locales=[void 0,["de"],["th-u-nu-thai"],["en"],["ja-u-nu-jpanfin"],["ar-u-nu-arab"]],options=[void 0,{style:"percent"},{style:"currency",currency:"EUR",currencyDisplay:"symbol"},{style:"currency",currency:"IQD",currencyDisplay:"symbol"},{style:"currency",currency:"KMF",currencyDisplay:"symbol"},{style:"currency",currency:"CLF",currencyDisplay:"symbol"},{useGrouping:!1,minimumIntegerDigits:3,minimumFractionDigits:1,maximumFractionDigits:3}];locales.forEach(function(locales){options.forEach(function(options){var referenceNumberFormat=new Intl.NumberFormat(locales,options),referenceFormatted=numbers.map(referenceNumberFormat.format),formatted=numbers.map(function(a){return a.toLocaleString(locales,options)});assert.compareArray(formatted,referenceFormatted,"(Testing with locales "+locales+"; options "+(options?JSON.stringify(options):options)+".)")})});


var numbers=[0,-0,1,-1,5.5,123,-123,-123.45,123.44501,.001234,-123e-11,123e-32,1.2,12344501e-16,123445.01,12344501e27,-12344501e27,1/0,-1/0,NaN],locales=[void 0,["de"],["th-u-nu-thai"],["en"],["ja-u-nu-jpanfin"],["ar-u-nu-arab"]],options=[void 0,{style:"percent"},{style:"currency",currency:"EUR",currencyDisplay:"symbol"},{style:"currency",currency:"IQD",currencyDisplay:"symbol"},{style:"currency",currency:"KMF",currencyDisplay:"symbol"},{style:"currency",currency:"CLF",currencyDisplay:"symbol"},{useGrouping:!1,minimumIntegerDigits:3,minimumFractionDigits:1,maximumFractionDigits:3}];locales.forEach(function(locales2){options.forEach(function(options2){var referenceNumberFormat=new Intl.NumberFormat(locales2,options2),referenceFormatted=numbers.map(referenceNumberFormat.format),formatted=numbers.map(function(a){return a.toLocaleString(locales2,options2)});assert.compareArray(formatted,referenceFormatted,"(Testing with locales "+locales2+"; options "+(options2&&JSON.stringify(options2))+".)")})});



test262/test/language/expressions/dynamic-import/usage/syntax-nested-block-labeled-eval-gtbndng-indirect-update.js


label:import("./eval-gtbndng-indirect-update_FIXTURE.js").then(imported=>{assert.sameValue(imported.x,1),fnGlobalObject().test262update(),assert.sameValue(imported.x,2)}).then($DONE,$DONE).catch($DONE);


import("./eval-gtbndng-indirect-update_FIXTURE.js").then(imported=>{assert.sameValue(imported.x,1),fnGlobalObject().test262update(),assert.sameValue(imported.x,2)}).then($DONE,$DONE).catch($DONE);



test262/test/language/asi/S7.9_A10_T10.js


a:;





test262/test/built-ins/Promise/all/S25.4.4.1_A2.3_T1.js


var arg=[];Promise.all(arg).then(function(result){assert(!!(result instanceof Array),"The value of !!(result instanceof Array) is expected to be true")}).then($DONE,$DONE);


var arg=[];Promise.all(arg).then(function(result){assert(result instanceof Array,"The value of !!(result instanceof Array) is expected to be true")}).then($DONE,$DONE);



test262/test/language/expressions/modulus/S11.5.3_A2.1_T3.js


try{throw 1%y,new Test262Error("#1.1: 1 % y throw ReferenceError. Actual: "+1%y)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 % y throw ReferenceError. Actual: "+e)}


try{throw 1%y,new Test262Error("#1.1: 1 % y throw ReferenceError. Actual: "+1%y)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 % y throw ReferenceError. Actual: "+e)}



test262/test/built-ins/Promise/all/S25.4.4.1_A2.1_T1.js


var p=Promise.all([]);assert(!!(p instanceof Promise),"The value of !!(p instanceof Promise) is expected to be true");


var p=Promise.all([]);assert(p instanceof Promise,"The value of !!(p instanceof Promise) is expected to be true");



test262/test/intl402/NumberFormat/this-value-ignored.js


testWithIntlConstructors(function(Constructor){if(Constructor===Intl.NumberFormat)return;var obj,newObj;obj=new Constructor;newObj=Intl.NumberFormat.call(obj);assert.notSameValue(obj,newObj,'NumberFormat object created with "new" was not ignored as this-value.');if(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)return;obj=Constructor();newObj=Intl.NumberFormat.call(obj);assert.notSameValue(obj,newObj,"NumberFormat object created with constructor as function was not ignored as this-value.")});


testWithIntlConstructors(function(Constructor){if(Constructor!==Intl.NumberFormat){var obj,newObj;obj=new Constructor,newObj=Intl.NumberFormat.call(obj),assert.notSameValue(obj,newObj,'NumberFormat object created with "new" was not ignored as this-value.'),!(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)&&(obj=Constructor(),newObj=Intl.NumberFormat.call(obj),assert.notSameValue(obj,newObj,"NumberFormat object created with constructor as function was not ignored as this-value."))}});



test262/test/language/expressions/dynamic-import/usage/syntax-nested-block-labeled-specifier-tostring.js


const obj={toString(){return"./module-code_FIXTURE.js"}};label:import(obj).then(imported=>{assert.sameValue(imported.default,42),assert.sameValue(imported.x,"Test262"),assert.sameValue(imported.z,42)}).then($DONE,$DONE).catch($DONE);


const obj={toString(){return"./module-code_FIXTURE.js"}};import(obj).then(imported=>{assert.sameValue(imported.default,42),assert.sameValue(imported.x,"Test262"),assert.sameValue(imported.z,42)}).then($DONE,$DONE).catch($DONE);



test262/test/intl402/NumberFormat/constructor-compactDisplay-no-compact.js


const values=[[void 0,"short"],["short"],["long"]],notations=[void 0,"standard","scientific","engineering"];for(const notation of notations)for(const[value,expected=value]of values){const callOrder=[],nf=new Intl.NumberFormat([],{get notation(){return callOrder.push("notation"),notation},get compactDisplay(){return callOrder.push("compactDisplay"),value}}),resolvedOptions=nf.resolvedOptions();assert.sameValue("compactDisplay"in resolvedOptions,!1);assert.sameValue(resolvedOptions.compactDisplay,void 0);assert.compareArray(callOrder,["notation","compactDisplay"])}


const values=[[void 0,"short"],["short"],["long"]],notations=[void 0,"standard","scientific","engineering"];for(const notation of notations)for(const[value,expected=value]of values){const callOrder=[],resolvedOptions=new Intl.NumberFormat([],{get notation(){return callOrder.push("notation"),notation},get compactDisplay(){return callOrder.push("compactDisplay"),value}}).resolvedOptions();assert.sameValue("compactDisplay"in resolvedOptions,!1),assert.sameValue(resolvedOptions.compactDisplay,void 0),assert.compareArray(callOrder,["notation","compactDisplay"])}



test262/test/language/expressions/modulus/S11.5.3_A2.1_T2.js


try{throw x%1,new Test262Error("#1.1: x % 1 throw ReferenceError. Actual: "+x%1)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x % 1 throw ReferenceError. Actual: "+e)}


try{throw x%1,new Test262Error("#1.1: x % 1 throw ReferenceError. Actual: "+x%1)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x % 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/dynamic-import/usage/syntax-nested-block-labeled-eval-gtbndng-indirect-update-dflt.js


label:import("./eval-gtbndng-indirect-update-dflt_FIXTURE.js").then(imported=>{assert.sameValue(imported.default(),1),assert.sameValue(imported.default,2)}).then($DONE,$DONE).catch($DONE);


import("./eval-gtbndng-indirect-update-dflt_FIXTURE.js").then(imported=>{assert.sameValue(imported.default(),1),assert.sameValue(imported.default,2)}).then($DONE,$DONE).catch($DONE);



test262/test/built-ins/Promise/all/S25.4.4.1_A7.1_T1.js


var p1=Promise.resolve(3),pAll=Promise.all([p1]);pAll.then(function(result){assert(!!(pAll instanceof Promise),"The value of !!(pAll instanceof Promise) is expected to be true"),assert(!!(result instanceof Array),"The value of !!(result instanceof Array) is expected to be true"),assert.sameValue(result.length,1,"The value of result.length is expected to be 1"),assert.sameValue(result[0],3,"The value of result[0] is expected to be 3")}).then($DONE,$DONE);


var p1=Promise.resolve(3),pAll=Promise.all([p1]);pAll.then(function(result){assert(pAll instanceof Promise,"The value of !!(pAll instanceof Promise) is expected to be true"),assert(result instanceof Array,"The value of !!(result instanceof Array) is expected to be true"),assert.sameValue(result.length,1,"The value of result.length is expected to be 1"),assert.sameValue(result[0],3,"The value of result[0] is expected to be 3")}).then($DONE,$DONE);



test262/test/language/expressions/dynamic-import/usage/nested-if-import-then-is-call-expression-square-brackets.js


import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/language/expressions/dynamic-import/usage/nested-if-braceless-is-call-expression-square-brackets.js


import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/language/expressions/modulus/S11.5.3_A2.4_T3.js


try{throw x%(x=1),new Test262Error("#1.1: x % (x = 1) throw ReferenceError. Actual: "+x%(x=1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x % (x = 1) throw ReferenceError. Actual: "+e)}


try{throw x%(x=1),new Test262Error("#1.1: x % (x = 1) throw ReferenceError. Actual: "+x%(x=1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x % (x = 1) throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/unary-minus/S11.4.7_A2.1_T2.js


try{throw-x,new Test262Error("#1.1: -x throw ReferenceError. Actual: "+-x)}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: -x throw ReferenceError. Actual: "+e)}


try{throw-x,new Test262Error("#1.1: -x throw ReferenceError. Actual: "+-x)}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: -x throw ReferenceError. Actual: "+e)}



test262/test/intl402/NumberFormat/currency-digits-nonstandard-notation.js


for(const notation of["compact","engineering","scientific"])for(const currency of["JPY","KWD","USD"]){let nf=new Intl.NumberFormat("en-US",{style:"currency",currency,notation});const resolvedOptions=nf.resolvedOptions(),minimumFractionDigits=resolvedOptions.minimumFractionDigits,maximumFractionDigits=resolvedOptions.maximumFractionDigits;assert.sameValue(minimumFractionDigits,0,"Didn't get correct minimumFractionDigits for "+currency+" in "+notation+" notation.");assert.sameValue(maximumFractionDigits,3,"Didn't get correct maximumFractionDigits for "+currency+" in "+notation+" notation.")}


for(const notation of["compact","engineering","scientific"])for(const currency of["JPY","KWD","USD"]){const resolvedOptions=new Intl.NumberFormat("en-US",{style:"currency",currency,notation}).resolvedOptions(),minimumFractionDigits=resolvedOptions.minimumFractionDigits,maximumFractionDigits=resolvedOptions.maximumFractionDigits;assert.sameValue(minimumFractionDigits,0,"Didn't get correct minimumFractionDigits for "+currency+" in "+notation+" notation."),assert.sameValue(maximumFractionDigits,3,"Didn't get correct maximumFractionDigits for "+currency+" in "+notation+" notation.")}



test262/test/language/expressions/unary-minus/S11.4.7_A1.js


if(eval("-	1")!==-1)throw new Test262Error("#1: -\\u00091 === -1");if(eval("-\v1")!==-1)throw new Test262Error("#2: -\\u000B1 === -1");if(eval("-\f1")!==-1)throw new Test262Error("#3: -\\u000C1 === -1");if(eval("- 1")!==-1)throw new Test262Error("#4: -\\u0020 === -1");if(eval("-\xA01")!==-1)throw new Test262Error("#5: -\\u00A01 === -1");if(eval("-\n1")!==-1)throw new Test262Error("#6: -\\u000A1 === -1");if(eval("-\r1")!==-1)throw new Test262Error("#7: -\\u000D1 === -1");if(eval("-\u20281")!==-1)throw new Test262Error("#8: -\\u20281 === -1");if(eval("-\u20291")!==-1)throw new Test262Error("#9: -\\u20291 === -1");if(eval("-	\v\f \xA0\n\r\u2028\u20291")!==-1)throw new Test262Error("#10: -\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === -1");


if(eval("-	1")!==-1)throw new Test262Error("#1: -\\u00091 === -1");if(eval("-\v1")!==-1)throw new Test262Error("#2: -\\u000B1 === -1");if(eval("-\f1")!==-1)throw new Test262Error("#3: -\\u000C1 === -1");if(eval("- 1")!==-1)throw new Test262Error("#4: -\\u0020 === -1");if(eval("-\xA01")!==-1)throw new Test262Error("#5: -\\u00A01 === -1");if(eval(`-
1`)!==-1)throw new Test262Error("#6: -\\u000A1 === -1");if(eval("-\r1")!==-1)throw new Test262Error("#7: -\\u000D1 === -1");if(eval("-\u20281")!==-1)throw new Test262Error("#8: -\\u20281 === -1");if(eval("-\u20291")!==-1)throw new Test262Error("#9: -\\u20291 === -1");if(eval(`-	\v\f \xA0
\r\u2028\u20291`)!==-1)throw new Test262Error("#10: -\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === -1");



test262/test/built-ins/Promise/all/S25.4.4.1_A3.1_T2.js


Promise.all(new Error("abrupt")).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.all(abruptCompletion) should throw TypeError")},function(err){assert(!!(err instanceof TypeError),"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);


Promise.all(new Error("abrupt")).then(function(){throw new Test262Error("Promise unexpectedly resolved: Promise.all(abruptCompletion) should throw TypeError")},function(err){assert(err instanceof TypeError,"The value of !!(err instanceof TypeError) is expected to be true")}).then($DONE,$DONE);



test262/test/intl402/PluralRules/prototype/resolvedOptions/return-keys-order-default.js


const allKeys=["locale","type","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","pluralCategories","roundingIncrement","roundingMode","roundingPriority","trailingZeroDisplay"],options=[{},{minimumSignificantDigits:3},{minimumFractionDigits:3}];options.forEach(option=>{const nf=new Intl.PluralRules(void 0,option),resolved=nf.resolvedOptions(),resolvedKeys=Reflect.ownKeys(resolved),expectedKeys=allKeys.filter(key=>key in resolved);assert.compareArray(resolvedKeys,expectedKeys,"resolvedOptions() property key order with options "+JSON.stringify(options))});


const allKeys=["locale","type","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","pluralCategories","roundingIncrement","roundingMode","roundingPriority","trailingZeroDisplay"],options=[{},{minimumSignificantDigits:3},{minimumFractionDigits:3}];options.forEach(option=>{const resolved=new Intl.PluralRules(void 0,option).resolvedOptions(),resolvedKeys=Reflect.ownKeys(resolved),expectedKeys=allKeys.filter(key=>key in resolved);assert.compareArray(resolvedKeys,expectedKeys,"resolvedOptions() property key order with options "+JSON.stringify(options))});



test262/test/language/expressions/unary-minus/S11.4.7_A3_T4.js


if(isNaN(-void 0)!==!0)throw new Test262Error("#1: +void 0 === Not-a-Number. Actual: NaN");


if(isNaN(NaN)!==!0)throw new Test262Error("#1: +void 0 === Not-a-Number. Actual: NaN");



test262/test/language/expressions/dynamic-import/usage/nested-do-while-is-call-expression-square-brackets.js


do import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);while(!1);


do import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);while(!1);



test262/test/language/expressions/modulus/S11.5.3_A1.js


if(eval("1	%	1")!==0)throw new Test262Error("#1: 1\\u0009%\\u00091 === 0");if(eval("1\v%\v1")!==0)throw new Test262Error("#2: 1\\u000B%\\u000B1 === 0");if(eval("1\f%\f1")!==0)throw new Test262Error("#3: 1\\u000C%\\u000C1 === 0");if(eval("1 % 1")!==0)throw new Test262Error("#4: 1\\u0020%\\u00201 === 0");if(eval("1\xA0%\xA01")!==0)throw new Test262Error("#5: 1\\u00A0%\\u00A01 === 0");if(eval("1\n%\n1")!==0)throw new Test262Error("#6: 1\\u000A%\\u000A1 === 0");if(eval("1\r%\r1")!==0)throw new Test262Error("#7: 1\\u000D%\\u000D1 === 0");if(eval("1\u2028%\u20281")!==0)throw new Test262Error("#8: 1\\u2028%\\u20281 === 0");if(eval("1\u2029%\u20291")!==0)throw new Test262Error("#9: 1\\u2029%\\u20291 === 0");if(eval("1	\v\f \xA0\n\r\u2028\u2029%	\v\f \xA0\n\r\u2028\u20291")!==0)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029%\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 0");


if(eval("1	%	1")!==0)throw new Test262Error("#1: 1\\u0009%\\u00091 === 0");if(eval("1\v%\v1")!==0)throw new Test262Error("#2: 1\\u000B%\\u000B1 === 0");if(eval("1\f%\f1")!==0)throw new Test262Error("#3: 1\\u000C%\\u000C1 === 0");if(eval("1 % 1")!==0)throw new Test262Error("#4: 1\\u0020%\\u00201 === 0");if(eval("1\xA0%\xA01")!==0)throw new Test262Error("#5: 1\\u00A0%\\u00A01 === 0");if(eval(`1
%
1`)!==0)throw new Test262Error("#6: 1\\u000A%\\u000A1 === 0");if(eval("1\r%\r1")!==0)throw new Test262Error("#7: 1\\u000D%\\u000D1 === 0");if(eval("1\u2028%\u20281")!==0)throw new Test262Error("#8: 1\\u2028%\\u20281 === 0");if(eval("1\u2029%\u20291")!==0)throw new Test262Error("#9: 1\\u2029%\\u20291 === 0");if(eval(`1	\v\f \xA0
\r\u2028\u2029%	\v\f \xA0
\r\u2028\u20291`)!==0)throw new Test262Error("#10: 1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029%\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291 === 0");



test262/test/intl402/PluralRules/prototype/select/non-finite.js


var invalidValues=[NaN,Infinity,-1/0],pr=new Intl.PluralRules;invalidValues.forEach(function(value){assert.sameValue(pr.select(value),"other")});


var invalidValues=[NaN,1/0,-1/0],pr=new Intl.PluralRules;invalidValues.forEach(function(value){assert.sameValue(pr.select(value),"other")});



test262/test/intl402/NumberFormat/constructor-notation.js


const values=[[void 0,"standard"],["standard"],["scientific"],["engineering"],["compact"]];for(const[value,expected=value]of values){const nf=new Intl.NumberFormat([],{notation:value}),resolvedOptions=nf.resolvedOptions();assert.sameValue("notation"in resolvedOptions,!0);assert.sameValue(resolvedOptions.notation,expected)}


const values=[[void 0,"standard"],["standard"],["scientific"],["engineering"],["compact"]];for(const[value,expected=value]of values){const resolvedOptions=new Intl.NumberFormat([],{notation:value}).resolvedOptions();assert.sameValue("notation"in resolvedOptions,!0),assert.sameValue(resolvedOptions.notation,expected)}



test262/test/language/expressions/modulus/bigint-and-number.js


assert.throws(TypeError,function(){1n%1},"1n % 1 throws TypeError"),assert.throws(TypeError,function(){1%1n},"1 % 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)%1},"Object(1n) % 1 throws TypeError"),assert.throws(TypeError,function(){1%Object(1n)},"1 % Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n%Object(1)},"1n % Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)%1n},"Object(1) % 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)%Object(1)},"Object(1n) % Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)%Object(1n)},"Object(1) % Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n%NaN},"1n % NaN throws TypeError"),assert.throws(TypeError,function(){NaN%1n},"NaN % 1n throws TypeError"),assert.throws(TypeError,function(){1n%Infinity},"1n % Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity%1n},"Infinity % 1n throws TypeError"),assert.throws(TypeError,function(){1n%1},"1n % true throws TypeError"),assert.throws(TypeError,function(){!0%1n},"true % 1n throws TypeError"),assert.throws(TypeError,function(){1n%"1"},'1n % "1" throws TypeError'),assert.throws(TypeError,function(){"1"%1n},'"1" % 1n throws TypeError'),assert.throws(TypeError,function(){1n%null},"1n % null throws TypeError"),assert.throws(TypeError,function(){null%1n},"null % 1n throws TypeError"),assert.throws(TypeError,function(){1n%void 0},"1n % undefined throws TypeError"),assert.throws(TypeError,function(){void 0%1n},"undefined % 1n throws TypeError");


assert.throws(TypeError,function(){1n%1},"1n % 1 throws TypeError"),assert.throws(TypeError,function(){1%1n},"1 % 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)%1},"Object(1n) % 1 throws TypeError"),assert.throws(TypeError,function(){1%Object(1n)},"1 % Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n%Object(1)},"1n % Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)%1n},"Object(1) % 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)%Object(1)},"Object(1n) % Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)%Object(1n)},"Object(1) % Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n%NaN},"1n % NaN throws TypeError"),assert.throws(TypeError,function(){NaN%1n},"NaN % 1n throws TypeError"),assert.throws(TypeError,function(){1n%(1/0)},"1n % Infinity throws TypeError"),assert.throws(TypeError,function(){1/0%1n},"Infinity % 1n throws TypeError"),assert.throws(TypeError,function(){1n%!0},"1n % true throws TypeError"),assert.throws(TypeError,function(){!0%1n},"true % 1n throws TypeError"),assert.throws(TypeError,function(){1n%"1"},'1n % "1" throws TypeError'),assert.throws(TypeError,function(){"1"%1n},'"1" % 1n throws TypeError'),assert.throws(TypeError,function(){1n%null},"1n % null throws TypeError"),assert.throws(TypeError,function(){null%1n},"null % 1n throws TypeError"),assert.throws(TypeError,function(){1n%void 0},"1n % undefined throws TypeError"),assert.throws(TypeError,function(){void 0%1n},"undefined % 1n throws TypeError");



test262/test/language/expressions/left-shift/S11.7.1_A2.4_T1.js


var x=0;if((x=1)<<x!==2)throw new Test262Error("#1: var x = 0; (x = 1) << x === 2. Actual: "+((x=1)<<x));var x=0;if(x<<(x=1)!==0)throw new Test262Error("#2: var x = 0; x << (x = 1) === 0. Actual: "+(x<<(x=1)));


var x=0;if((x=1)<<x!==2)throw new Test262Error("#1: var x = 0; (x = 1) << x === 2. Actual: "+((x=1)<<x));var x=0;if(x<<(x=1))throw new Test262Error("#2: var x = 0; x << (x = 1) === 0. Actual: "+(x<<(x=1)));



test262/test/language/expressions/left-shift/S11.7.1_A3_T2.4.js


if(1<<void 0!==1)throw new Test262Error("#1: 1 << undefined === 1. Actual: "+(1<<void 0));if(void 0<<1!==0)throw new Test262Error("#2: undefined << 1 === 0. Actual: "+(void 0<<1));if(new Number(1)<<void 0!==1)throw new Test262Error("#3: new Number(1) << undefined === 1. Actual: "+(new Number(1)<<void 0));if(void 0<<new Number(1)!==0)throw new Test262Error("#4: undefined << new Number(1) === 0. Actual: "+(void 0<<new Number(1)));


if(1<<void 0!==1)throw new Test262Error("#1: 1 << undefined === 1. Actual: "+(1<<void 0));if(void 0<<1)throw new Test262Error("#2: undefined << 1 === 0. Actual: "+(void 0<<1));if(new Number(1)<<void 0!==1)throw new Test262Error("#3: new Number(1) << undefined === 1. Actual: "+(new Number(1)<<void 0));if(void 0<<new Number(1))throw new Test262Error("#4: undefined << new Number(1) === 0. Actual: "+(void 0<<new Number(1)));



test262/test/intl402/PluralRules/prototype/selectRange/invoked-as-func.js


const pr=new Intl.PluralRules;let sr=pr["selectRange"];assert.sameValue(typeof sr,"function");assert.throws(TypeError,()=>{sr(1,23)});


const pr=new Intl.PluralRules;let sr=pr.selectRange;assert.sameValue(typeof sr,"function"),assert.throws(TypeError,()=>{sr(1,23)});



test262/test/intl402/DisplayNames/prototype/resolvedOptions/option-fallback.js


const fallbacks=["code","none"],types=["language","region","script","currency"];types.forEach(type=>{fallbacks.forEach(fallback=>{const dn=new Intl.DisplayNames("en-US",{fallback,type}),options=dn.resolvedOptions();verifyProperty(options,"fallback",{value:fallback,writable:!0,enumerable:!0,configurable:!0});verifyProperty(options,"type",{value:type,writable:!0,enumerable:!0,configurable:!0});verifyProperty(options,"style",{value:"long",writable:!0,enumerable:!0,configurable:!0})})});


const fallbacks=["code","none"],types=["language","region","script","currency"];types.forEach(type=>{fallbacks.forEach(fallback=>{const options=new Intl.DisplayNames("en-US",{fallback,type}).resolvedOptions();verifyProperty(options,"fallback",{value:fallback,writable:!0,enumerable:!0,configurable:!0}),verifyProperty(options,"type",{value:type,writable:!0,enumerable:!0,configurable:!0}),verifyProperty(options,"style",{value:"long",writable:!0,enumerable:!0,configurable:!0})})});



test262/test/language/expressions/bitwise-and/S11.10.1_A2.4_T3.js


try{throw x&(x=1),new Test262Error("#1.1: x & (x = 1) throw ReferenceError. Actual: "+(x&(x=1)))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x & (x = 1) throw ReferenceError. Actual: "+e)}if(((y=1)&y)!==1)throw new Test262Error("#2: ((y = 1) & y) === 1. Actual: "+((y=1)&y));


try{throw x&(x=1),new Test262Error("#1.1: x & (x = 1) throw ReferenceError. Actual: "+(x&(x=1)))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x & (x = 1) throw ReferenceError. Actual: "+e)}if(((y=1)&y)!==1)throw new Test262Error("#2: ((y = 1) & y) === 1. Actual: "+((y=1)&y));



test262/test/language/expressions/bitwise-and/S11.10.1_A2.1_T2.js


try{throw x&1,new Test262Error("#1.1: x & 1 throw ReferenceError. Actual: "+(x&1))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: x & 1 throw ReferenceError. Actual: "+e)}


try{throw x&1,new Test262Error("#1.1: x & 1 throw ReferenceError. Actual: "+(x&1))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: x & 1 throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/dynamic-import/eval-self-once-script.js


var global=fnGlobalObject(),isFirstScript=typeof global.evaluated=="undefined";isFirstScript&&(global.evaluated=0);global.evaluated++;var p=Promise.all([import("./eval-self-once-script.js"),import("./eval-self-once-script.js")]).then(async()=>{await import("./eval-self-once-script.js"),await import("./eval-self-once-script.js"),assert.sameValue(global.evaluated,2,"global property was defined once and incremented twice")});isFirstScript&&p.then($DONE,$DONE);


var global=fnGlobalObject(),isFirstScript=typeof global.evaluated>"u";isFirstScript&&(global.evaluated=0),global.evaluated++;var p=Promise.all([import("./eval-self-once-script.js"),import("./eval-self-once-script.js")]).then(async()=>{await import("./eval-self-once-script.js"),await import("./eval-self-once-script.js"),assert.sameValue(global.evaluated,2,"global property was defined once and incremented twice")});isFirstScript&&p.then($DONE,$DONE);



test262/test/intl402/DisplayNames/prototype/resolvedOptions/option-style.js


const styles=["narrow","short","long"],types=["language","region","script","currency"];types.forEach(type=>{styles.forEach(style=>{const dn=new Intl.DisplayNames("en-US",{style,type}),options=dn.resolvedOptions();verifyProperty(options,"style",{value:style,writable:!0,enumerable:!0,configurable:!0});verifyProperty(options,"type",{value:type,writable:!0,enumerable:!0,configurable:!0});verifyProperty(options,"fallback",{value:"code",writable:!0,enumerable:!0,configurable:!0})})});


const styles=["narrow","short","long"],types=["language","region","script","currency"];types.forEach(type=>{styles.forEach(style=>{const options=new Intl.DisplayNames("en-US",{style,type}).resolvedOptions();verifyProperty(options,"style",{value:style,writable:!0,enumerable:!0,configurable:!0}),verifyProperty(options,"type",{value:type,writable:!0,enumerable:!0,configurable:!0}),verifyProperty(options,"fallback",{value:"code",writable:!0,enumerable:!0,configurable:!0})})});



test262/test/intl402/NumberFormat/constructor-signDisplay.js


const values=[[void 0,"auto"],["auto"],["never"],["always"],["exceptZero"]];for(const[value,expected=value]of values){const nf=new Intl.NumberFormat([],{signDisplay:value}),resolvedOptions=nf.resolvedOptions();assert.sameValue("signDisplay"in resolvedOptions,!0);assert.sameValue(resolvedOptions.signDisplay,expected)}


const values=[[void 0,"auto"],["auto"],["never"],["always"],["exceptZero"]];for(const[value,expected=value]of values){const resolvedOptions=new Intl.NumberFormat([],{signDisplay:value}).resolvedOptions();assert.sameValue("signDisplay"in resolvedOptions,!0),assert.sameValue(resolvedOptions.signDisplay,expected)}



test262/test/intl402/NumberFormat/constructor-compactDisplay-compact.js


const values=[[void 0,"short"],["short"],["long"]];for(const[value,expected=value]of values){const callOrder=[],nf=new Intl.NumberFormat([],{get notation(){return callOrder.push("notation"),"compact"},get compactDisplay(){return callOrder.push("compactDisplay"),value}}),resolvedOptions=nf.resolvedOptions();assert.sameValue("compactDisplay"in resolvedOptions,!0);assert.sameValue(resolvedOptions.compactDisplay,expected);assert.compareArray(callOrder,["notation","compactDisplay"])}


const values=[[void 0,"short"],["short"],["long"]];for(const[value,expected=value]of values){const callOrder=[],resolvedOptions=new Intl.NumberFormat([],{get notation(){return callOrder.push("notation"),"compact"},get compactDisplay(){return callOrder.push("compactDisplay"),value}}).resolvedOptions();assert.sameValue("compactDisplay"in resolvedOptions,!0),assert.sameValue(resolvedOptions.compactDisplay,expected),assert.compareArray(callOrder,["notation","compactDisplay"])}



test262/test/language/expressions/dynamic-import/eval-self-once-module.js


var global=fnGlobalObject();typeof global.evaluated=="undefined"&&(global.evaluated=0);global.evaluated++;Promise.all([import("./eval-self-once-module.js"),import("./eval-self-once-module.js")]).then(async()=>{await import("./eval-self-once-module.js"),await import("./eval-self-once-module.js"),assert.sameValue(global.evaluated,1,"global property was defined and incremented only once")}).then($DONE,$DONE);


var global=fnGlobalObject();typeof global.evaluated>"u"&&(global.evaluated=0),global.evaluated++,Promise.all([import("./eval-self-once-module.js"),import("./eval-self-once-module.js")]).then(async()=>{await import("./eval-self-once-module.js"),await import("./eval-self-once-module.js"),assert.sameValue(global.evaluated,1,"global property was defined and incremented only once")}).then($DONE,$DONE);



test262/test/language/expressions/bitwise-and/S11.10.1_A2.1_T3.js


try{throw 1&y,new Test262Error("#1.1: 1 & y throw ReferenceError. Actual: "+(1&y))}catch(e){if(e instanceof ReferenceError!==!0)throw new Test262Error("#1.2: 1 & y throw ReferenceError. Actual: "+e)}


try{throw 1&y,new Test262Error("#1.1: 1 & y throw ReferenceError. Actual: "+(1&y))}catch(e){if(!(e instanceof ReferenceError))throw new Test262Error("#1.2: 1 & y throw ReferenceError. Actual: "+e)}



test262/test/language/expressions/bitwise-and/S11.10.1_A1.js


if(eval("1	&	1")!==1)throw new Test262Error("#1: (1\\u0009&\\u00091) === 1");if(eval("1\v&\v1")!==1)throw new Test262Error("#2: (1\\u000B&\\u000B1) === 1");if(eval("1\f&\f1")!==1)throw new Test262Error("#3: (1\\u000C&\\u000C1) === 1");if(eval("1 & 1")!==1)throw new Test262Error("#4: (1\\u0020&\\u00201) === 1");if(eval("1\xA0&\xA01")!==1)throw new Test262Error("#5: (1\\u00A0&\\u00A01) === 1");if(eval("1\n&\n1")!==1)throw new Test262Error("#6: (1\\u000A&\\u000A1) === 1");if(eval("1\r&\r1")!==1)throw new Test262Error("#7: (1\\u000D&\\u000D1) === 1");if(eval("1\u2028&\u20281")!==1)throw new Test262Error("#8: (1\\u2028&\\u20281) === 1");if(eval("1\u2029&\u20291")!==1)throw new Test262Error("#9: (1\\u2029&\\u20291) === 1");if(eval("1	\v\f \xA0\n\r\u2028\u2029&	\v\f \xA0\n\r\u2028\u20291")!==1)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029&\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 1");


if(eval("1	&	1")!==1)throw new Test262Error("#1: (1\\u0009&\\u00091) === 1");if(eval("1\v&\v1")!==1)throw new Test262Error("#2: (1\\u000B&\\u000B1) === 1");if(eval("1\f&\f1")!==1)throw new Test262Error("#3: (1\\u000C&\\u000C1) === 1");if(eval("1 & 1")!==1)throw new Test262Error("#4: (1\\u0020&\\u00201) === 1");if(eval("1\xA0&\xA01")!==1)throw new Test262Error("#5: (1\\u00A0&\\u00A01) === 1");if(eval(`1
&
1`)!==1)throw new Test262Error("#6: (1\\u000A&\\u000A1) === 1");if(eval("1\r&\r1")!==1)throw new Test262Error("#7: (1\\u000D&\\u000D1) === 1");if(eval("1\u2028&\u20281")!==1)throw new Test262Error("#8: (1\\u2028&\\u20281) === 1");if(eval("1\u2029&\u20291")!==1)throw new Test262Error("#9: (1\\u2029&\\u20291) === 1");if(eval(`1	\v\f \xA0
\r\u2028\u2029&	\v\f \xA0
\r\u2028\u20291`)!==1)throw new Test262Error("#10: (1\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029&\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20291) === 1");



test262/test/language/expressions/bitwise-and/bigint-and-number.js


assert.throws(TypeError,function(){1n&1},"1n & 1 throws TypeError"),assert.throws(TypeError,function(){1&1n},"1 & 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)&1},"Object(1n) & 1 throws TypeError"),assert.throws(TypeError,function(){1&Object(1n)},"1 & Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n&Object(1)},"1n & Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)&1n},"Object(1) & 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)&Object(1)},"Object(1n) & Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)&Object(1n)},"Object(1) & Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n&NaN},"1n & NaN throws TypeError"),assert.throws(TypeError,function(){NaN&1n},"NaN & 1n throws TypeError"),assert.throws(TypeError,function(){1n&Infinity},"1n & Infinity throws TypeError"),assert.throws(TypeError,function(){Infinity&1n},"Infinity & 1n throws TypeError"),assert.throws(TypeError,function(){1n&1},"1n & true throws TypeError"),assert.throws(TypeError,function(){!0&1n},"true & 1n throws TypeError"),assert.throws(TypeError,function(){1n&"1"},'1n & "1" throws TypeError'),assert.throws(TypeError,function(){"1"&1n},'"1" & 1n throws TypeError'),assert.throws(TypeError,function(){1n&null},"1n & null throws TypeError"),assert.throws(TypeError,function(){null&1n},"null & 1n throws TypeError"),assert.throws(TypeError,function(){1n&void 0},"1n & undefined throws TypeError"),assert.throws(TypeError,function(){void 0&1n},"undefined & 1n throws TypeError");


assert.throws(TypeError,function(){1n&1},"1n & 1 throws TypeError"),assert.throws(TypeError,function(){1&1n},"1 & 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)&1},"Object(1n) & 1 throws TypeError"),assert.throws(TypeError,function(){1&Object(1n)},"1 & Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n&Object(1)},"1n & Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)&1n},"Object(1) & 1n throws TypeError"),assert.throws(TypeError,function(){Object(1n)&Object(1)},"Object(1n) & Object(1) throws TypeError"),assert.throws(TypeError,function(){Object(1)&Object(1n)},"Object(1) & Object(1n) throws TypeError"),assert.throws(TypeError,function(){1n&NaN},"1n & NaN throws TypeError"),assert.throws(TypeError,function(){NaN&1n},"NaN & 1n throws TypeError"),assert.throws(TypeError,function(){1n&1/0},"1n & Infinity throws TypeError"),assert.throws(TypeError,function(){1/0&1n},"Infinity & 1n throws TypeError"),assert.throws(TypeError,function(){1n&!0},"1n & true throws TypeError"),assert.throws(TypeError,function(){!0&1n},"true & 1n throws TypeError"),assert.throws(TypeError,function(){1n&"1"},'1n & "1" throws TypeError'),assert.throws(TypeError,function(){"1"&1n},'"1" & 1n throws TypeError'),assert.throws(TypeError,function(){1n&null},"1n & null throws TypeError"),assert.throws(TypeError,function(){null&1n},"null & 1n throws TypeError"),assert.throws(TypeError,function(){1n&void 0},"1n & undefined throws TypeError"),assert.throws(TypeError,function(){void 0&1n},"undefined & 1n throws TypeError");



test262/test/built-ins/Object/defineProperty/15.2.3.6-2-11.js


var obj={};Object.defineProperty(obj,Infinity,{});assert(obj.hasOwnProperty("Infinity"),'obj.hasOwnProperty("Infinity") !== true');


var obj={};Object.defineProperty(obj,1/0,{}),assert(obj.hasOwnProperty("Infinity"),'obj.hasOwnProperty("Infinity") !== true');



test262/test/language/expressions/bitwise-and/S11.10.1_A2.4_T1.js


var x=0;if(((x=1)&x)!==1)throw new Test262Error("#1: var x = 0; ((x = 1) & x) === 1. Actual: "+((x=1)&x));var x=0;if((x&(x=1))!==0)throw new Test262Error("#2: var x = 0; (x & (x = 1)) === 0. Actual: "+(x&(x=1)));


var x=0;if(((x=1)&x)!==1)throw new Test262Error("#1: var x = 0; ((x = 1) & x) === 1. Actual: "+((x=1)&x));var x=0;if(x&(x=1))throw new Test262Error("#2: var x = 0; (x & (x = 1)) === 0. Actual: "+(x&(x=1)));



test262/test/built-ins/Promise/any/iter-returns-undefined-reject.js


let callCount=0;Promise.any({[Symbol.iterator](){callCount++;return}}).then(()=>{$DONE("The promise should be rejected, but was resolved")},error=>{assert.sameValue(callCount,1,"callCount === 1"),assert(error instanceof TypeError)}).then($DONE,$DONE);


let callCount=0;Promise.any({[Symbol.iterator](){callCount++}}).then(()=>{$DONE("The promise should be rejected, but was resolved")},error=>{assert.sameValue(callCount,1,"callCount === 1"),assert(error instanceof TypeError)}).then($DONE,$DONE);



test262/test/intl402/NumberFormat/style-unit.js


const validOptions=[[void 0,"decimal"],["unit","unit"],[{toString(){return"unit"}},"unit"]];for(const[validOption,expected]of validOptions){const nf=new Intl.NumberFormat([],{style:validOption,unit:"gigabit"}),resolvedOptions=nf.resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}


const validOptions=[[void 0,"decimal"],["unit","unit"],[{toString(){return"unit"}},"unit"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.NumberFormat([],{style:validOption,unit:"gigabit"}).resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}



test262/test/language/expressions/dynamic-import/assignment-expression/unary-expr.js


const obj={prop:42};import(delete obj.prop);import(void 0);import("object");import(NaN);import(-void 0);import(!0);import(~void 0);import(delete void 0);


const obj={prop:42};import(delete obj.prop),import(void 0),import(typeof{}),import(NaN),import(NaN),import(!0),import(-1),import(delete void 0);



test262/test/built-ins/Promise/allSettled/iter-returns-undefined-reject.js


try{Promise.allSettled({[Symbol.iterator](){return}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert.sameValue(Object.getPrototypeOf(error),TypeError.prototype),assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}


try{Promise.allSettled({[Symbol.iterator](){}}).then(function(){$DONE("The promise should be rejected, but was resolved")},function(error){assert.sameValue(Object.getPrototypeOf(error),TypeError.prototype),assert(error instanceof TypeError)}).then($DONE,$DONE)}catch(error){$DONE(`The promise should be rejected, but threw an exception: ${error.message}`)}



test262/test/intl402/NumberFormat/prototype/resolvedOptions/return-keys-order-default.js


const allKeys=["locale","numberingSystem","style","currency","currencyDisplay","currencySign","unit","unitDisplay","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","useGrouping","notation","compactDisplay","signDisplay","roundingIncrement","roundingMode","roundingPriority","trailingZeroDisplay"],optionsBase={notation:"compact"},optionsExtensions=[{style:"currency",currency:"XTS"},{style:"unit",unit:"percent"}];optionsExtensions.forEach(optionsExtension=>{const options=Object.assign({},optionsBase,optionsExtension),nf=new Intl.NumberFormat(void 0,options),resolved=nf.resolvedOptions(),resolvedKeys=Reflect.ownKeys(resolved),expectedKeys=allKeys.filter(key=>key in resolved);assert.compareArray(resolvedKeys,expectedKeys,"resolvedOptions() property key order with options "+JSON.stringify(options))});


const allKeys=["locale","numberingSystem","style","currency","currencyDisplay","currencySign","unit","unitDisplay","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","useGrouping","notation","compactDisplay","signDisplay","roundingIncrement","roundingMode","roundingPriority","trailingZeroDisplay"],optionsBase={notation:"compact"},optionsExtensions=[{style:"currency",currency:"XTS"},{style:"unit",unit:"percent"}];optionsExtensions.forEach(optionsExtension=>{const options=Object.assign({},optionsBase,optionsExtension),resolved=new Intl.NumberFormat(void 0,options).resolvedOptions(),resolvedKeys=Reflect.ownKeys(resolved),expectedKeys=allKeys.filter(key=>key in resolved);assert.compareArray(resolvedKeys,expectedKeys,"resolvedOptions() property key order with options "+JSON.stringify(options))});



test262/test/built-ins/Object/defineProperty/15.2.3.6-4-191.js


try{Object.defineProperty(Array.prototype,"0",{value:11,configurable:!0});var arrObj=[];Object.defineProperty(arrObj,"0",{configurable:!1});if(!arrObj.hasOwnProperty("0"))throw new Test262Error("Expected arrObj.hasOwnProperty('0') === true, actually "+arrObj.hasOwnProperty("0"));if(Array.prototype[0]!==11)throw new Test262Error("Expected Array.prototype[0] === 11), actually "+Array.prototype[0]);if(typeof arrObj[0]!="undefined")throw new Test262Error("Expected typeof arrObj[0] === 'undefined'), actually "+typeof arrObj[0])}finally{delete Array.prototype[0]}


try{Object.defineProperty(Array.prototype,"0",{value:11,configurable:!0});var arrObj=[];if(Object.defineProperty(arrObj,"0",{configurable:!1}),!arrObj.hasOwnProperty("0"))throw new Test262Error("Expected arrObj.hasOwnProperty('0') === true, actually "+arrObj.hasOwnProperty("0"));if(Array.prototype[0]!==11)throw new Test262Error("Expected Array.prototype[0] === 11), actually "+Array.prototype[0]);if(typeof arrObj[0]<"u")throw new Test262Error("Expected typeof arrObj[0] === 'undefined'), actually "+typeof arrObj[0])}finally{delete Array.prototype[0]}



test262/test/intl402/NumberFormat/prototype/formatRangeToParts/invoked-as-func.js


const nf=new Intl.NumberFormat;let f=nf["formatRangeToParts"];assert.sameValue(typeof f,"function");assert.throws(TypeError,()=>{f(1,23)});


const nf=new Intl.NumberFormat;let f=nf.formatRangeToParts;assert.sameValue(typeof f,"function"),assert.throws(TypeError,()=>{f(1,23)});



test262/test/language/statements/break/S12.8_A7.js


var x=0,y=0;try{LABEL1:do x++,eval("break LABEL1"),y++;while(0);throw new Test262Error('#1: eval("break LABEL1") does not lead to throwing exception')}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("1.1: Appearing of break within eval statement inside of IterationStatement yields SyntaxError")}


var x=0,y=0;try{do x++,eval("break LABEL1"),y++;while(!1);throw new Test262Error('#1: eval("break LABEL1") does not lead to throwing exception')}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("1.1: Appearing of break within eval statement inside of IterationStatement yields SyntaxError")}



test262/test/language/statements/break/12.8-1.js


for(var sum=0,i=1;i<=10;i++){if(i===6)break;sum+=i}assert.sameValue(sum,15,"sum");


for(var sum=0,i=1;i<=10&&i!==6;i++)sum+=i;assert.sameValue(sum,15,"sum");



test262/test/language/statements/break/S12.8_A9_T1.js


var x=0,y=0;(function(){FOR:for(;;)try{x++;if(x===10)return;throw 1}catch(e){break FOR}})();if(x!==1)throw new Test262Error("#1: break inside of try-catch nested in loop is allowed");


var x=0,y=0;if(function(){FOR:for(;;)try{if(x++,x===10)return;throw 1}catch{break FOR}}(),x!==1)throw new Test262Error("#1: break inside of try-catch nested in loop is allowed");



test262/test/language/statements/break/S12.8_A9_T2.js


var x=0,y=0;(function(){FOR:for(;;)try{x++;if(x===10)return;throw 1}catch(e){break}})();if(x!==1)throw new Test262Error("#1: break inside of try-catch nested in loop is allowed");


var x=0,y=0;if(function(){for(;;)try{if(x++,x===10)return;throw 1}catch{break}}(),x!==1)throw new Test262Error("#1: break inside of try-catch nested in loop is allowed");



test262/test/intl402/Collator/this-value-ignored.js


testWithIntlConstructors(function(Constructor){var obj,newObj;obj=new Constructor;newObj=Intl.Collator.call(obj);assert.notSameValue(obj,newObj,'Collator object created with "new" was not ignored as this-value.');if(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)return;obj=Constructor();newObj=Intl.Collator.call(obj);assert.notSameValue(obj,newObj,"Collator object created with constructor as function was not ignored as this-value.")});


testWithIntlConstructors(function(Constructor){var obj,newObj;obj=new Constructor,newObj=Intl.Collator.call(obj),assert.notSameValue(obj,newObj,'Collator object created with "new" was not ignored as this-value.'),!(Constructor!==Intl.Collator&&Constructor!==Intl.NumberFormat&&Constructor!==Intl.DateTimeFormat)&&(obj=Constructor(),newObj=Intl.Collator.call(obj),assert.notSameValue(obj,newObj,"Collator object created with constructor as function was not ignored as this-value."))});



test262/test/built-ins/Object/defineProperty/15.2.3.6-3-197.js


var obj={};Object.defineProperty(obj,"property",{writable:new RegExp});var beforeWrite=obj.hasOwnProperty("property")&&typeof obj.property=="undefined";obj.property="isWritable";var afterWrite=obj.property==="isWritable";assert(beforeWrite,"beforeWrite !== true");assert(afterWrite,"afterWrite !== true");


var obj={};Object.defineProperty(obj,"property",{writable:new RegExp});var beforeWrite=obj.hasOwnProperty("property")&&typeof obj.property>"u";obj.property="isWritable";var afterWrite=obj.property==="isWritable";assert(beforeWrite,"beforeWrite !== true"),assert(afterWrite,"afterWrite !== true");



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-file-does-not-exist.js


label:import("./THIS_FILE_DOES_NOT_EXIST.js").catch(error=>{assert.notSameValue(typeof error,"undefined")}).then($DONE,$DONE);


import("./THIS_FILE_DOES_NOT_EXIST.js").catch(error=>{assert.notSameValue(typeof error,"undefined")}).then($DONE,$DONE);



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-eval-script-code-target.js


label:import("./script-code_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);


import("./script-code_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-instn-iee-err-ambiguous-import.js


label:import("./instn-iee-err-ambiguous-export_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);


import("./instn-iee-err-ambiguous-export_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);



test262/test/language/statements/for-in/S12.6.4_A1.js


try{for(__key in void 0){var key=__key}}catch(e){throw new Test262Error('#1: "for(key in undefined){}" does not lead to throwing exception')}if(key!==void 0)throw new Test262Error("#2: key === undefined. Actual: key === "+key);


try{for(__key in void 0)var key=__key}catch{throw new Test262Error('#1: "for(key in undefined){}" does not lead to throwing exception')}if(key!==void 0)throw new Test262Error("#2: key === undefined. Actual: key === "+key);



test262/test/language/statements/for-in/S12.6.4_A2.js


try{for(__key in null){var key=__key}}catch(e){throw new Test262Error('#1: "for(__key in null){}" does not lead to throwing exception')}if(key!==void 0)throw new Test262Error("#2: key === undefined. Actual: key ==="+key);


try{for(__key in null)var key=__key}catch{throw new Test262Error('#1: "for(__key in null){}" does not lead to throwing exception')}if(key!==void 0)throw new Test262Error("#2: key === undefined. Actual: key ==="+key);



test262/test/built-ins/encodeURI/S15.1.3.3_A4_T3.js


if(encodeURI("http://unipro.ru/\nabout")!=="http://unipro.ru/%0Aabout"&&encodeURI("http://unipro.ru/\nabout")!=="http://unipro.ru/%0aabout")throw new Test262Error("#1: http://unipro.ru/\\nabout");if(encodeURI("http://unipro.ru/\vabout")!=="http://unipro.ru/%0Babout"&&encodeURI("http://unipro.ru/\vabout")!=="http://unipro.ru/%0babout")throw new Test262Error("#2: http://unipro.ru/\\vabout");if(encodeURI("http://unipro.ru/\fabout")!=="http://unipro.ru/%0Cabout"&&encodeURI("http://unipro.ru/\fabout")!=="http://unipro.ru/%0cabout")throw new Test262Error("#3: http://unipro.ru/\\fabout");if(encodeURI("http://unipro.ru/\rabout")!=="http://unipro.ru/%0Dabout"&&encodeURI("http://unipro.ru/\rabout")!=="http://unipro.ru/%0dabout")throw new Test262Error("#4: http://unipro.ru/\\rabout");


if(encodeURI(`http://unipro.ru/
about`)!=="http://unipro.ru/%0Aabout"&&encodeURI(`http://unipro.ru/
about`)!=="http://unipro.ru/%0aabout")throw new Test262Error("#1: http://unipro.ru/\\nabout");if(encodeURI("http://unipro.ru/\vabout")!=="http://unipro.ru/%0Babout"&&encodeURI("http://unipro.ru/\vabout")!=="http://unipro.ru/%0babout")throw new Test262Error("#2: http://unipro.ru/\\vabout");if(encodeURI("http://unipro.ru/\fabout")!=="http://unipro.ru/%0Cabout"&&encodeURI("http://unipro.ru/\fabout")!=="http://unipro.ru/%0cabout")throw new Test262Error("#3: http://unipro.ru/\\fabout");if(encodeURI("http://unipro.ru/\rabout")!=="http://unipro.ru/%0Dabout"&&encodeURI("http://unipro.ru/\rabout")!=="http://unipro.ru/%0dabout")throw new Test262Error("#4: http://unipro.ru/\\rabout");



test262/test/language/statements/for-in/head-decl-expr.js


var iterCount=0;for(let x in null,{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);


var iterCount=0;for(let x in{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);



test262/test/language/statements/for-in/head-expr-expr.js


var iterCount=0,x;for(x in null,{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);


var iterCount=0,x;for(x in{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);



test262/test/language/expressions/dynamic-import/usage/syntax-nested-block-labeled-returns-thenable.js


label:import("./dynamic-import-module_FIXTURE.js").then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/built-ins/Object/S15.2.2.1_A5_T3.js


var num=Infinity;assert.sameValue(typeof num,"number",'The value of `typeof num` is expected to be "number"');var n_obj=new Object(num);assert.sameValue(n_obj.constructor,Number,"The value of n_obj.constructor is expected to equal the value of Number");assert.sameValue(typeof n_obj,"object",'The value of `typeof n_obj` is expected to be "object"');assert(n_obj==num,"The result of evaluating (n_obj == num) is expected to be true");assert.notSameValue(n_obj,num,"The value of n_obj is expected to not equal the value of `num`");


var num=1/0;assert.sameValue(typeof num,"number",'The value of `typeof num` is expected to be "number"');var n_obj=new Object(num);assert.sameValue(n_obj.constructor,Number,"The value of n_obj.constructor is expected to equal the value of Number"),assert.sameValue(typeof n_obj,"object",'The value of `typeof n_obj` is expected to be "object"'),assert(n_obj==num,"The result of evaluating (n_obj == num) is expected to be true"),assert.notSameValue(n_obj,num,"The value of n_obj is expected to not equal the value of `num`");



test262/test/built-ins/encodeURI/S15.1.3.3_A5.7.js


try{throw new encodeURI,new Test262Error("#1.1: new encodeURI() throw TypeError. Actual: "+new encodeURI)}catch(e){if(e instanceof TypeError!==!0)throw new Test262Error("#1.2: new encodeURI() throw TypeError. Actual: "+e)}


try{throw new encodeURI,new Test262Error("#1.1: new encodeURI() throw TypeError. Actual: "+new encodeURI)}catch(e){if(!(e instanceof TypeError))throw new Test262Error("#1.2: new encodeURI() throw TypeError. Actual: "+e)}



test262/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-non-finite.js


const rtf=new Intl.RelativeTimeFormat("en-US");assert.sameValue(typeof rtf.formatToParts,"function","formatToParts should be supported");const values=[[void 0,"undefined"],[NaN,"NaN"],[Infinity,"Infinity"],[-1/0,"-Infinity"],["string",'"string"'],[{},"empty object"],[{toString(){return NaN},valueOf:void 0},"object with toString"],[{valueOf(){return NaN},toString:void 0},"object with valueOf"]];for(const[value,name]of values)assert.throws(RangeError,()=>rtf.formatToParts(value,"second"),name);


const rtf=new Intl.RelativeTimeFormat("en-US");assert.sameValue(typeof rtf.formatToParts,"function","formatToParts should be supported");const values=[[void 0,"undefined"],[NaN,"NaN"],[1/0,"Infinity"],[-1/0,"-Infinity"],["string",'"string"'],[{},"empty object"],[{toString(){return NaN},valueOf:void 0},"object with toString"],[{valueOf(){return NaN},toString:void 0},"object with valueOf"]];for(const[value,name]of values)assert.throws(RangeError,()=>rtf.formatToParts(value,"second"),name);



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-specifier-tostring-abrupt-rejects.js


const obj={toString(){throw"custom error"}};label:import(obj).catch(error=>{assert.sameValue(error,"custom error")}).then($DONE,$DONE);


const obj={toString(){throw"custom error"}};import(obj).catch(error=>{assert.sameValue(error,"custom error")}).then($DONE,$DONE);



test262/test/language/statements/for-in/head-var-expr.js


var iterCount=0;for(var x in null,{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);


var iterCount=0;for(var x in{key:0})assert.sameValue(x,"key"),iterCount+=1;assert.sameValue(iterCount,1);



test262/test/language/expressions/dynamic-import/usage/nested-block-import-then-is-call-expression-square-brackets.js


import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/language/statements/continue/no-label-continue.js


var count=0;for(let x=0;x<10;){x++;count++;continue}assert.sameValue(count,10,"The value of `count` is `10`");


var count=0;for(let x=0;x<10;)x++,count++;assert.sameValue(count,10,"The value of `count` is `10`");



test262/test/built-ins/encodeURI/S15.1.3.3_A5.3.js


var x=encodeURI.length;verifyNotWritable(encodeURI,"length",null,Infinity);if(encodeURI.length!==x)throw new Test262Error("#1: x = encodeURI.length; encodeURI.length = Infinity; encodeURI.length === x. Actual: "+encodeURI.length);


var x=encodeURI.length;if(verifyNotWritable(encodeURI,"length",null,1/0),encodeURI.length!==x)throw new Test262Error("#1: x = encodeURI.length; encodeURI.length = Infinity; encodeURI.length === x. Actual: "+encodeURI.length);



test262/test/language/statements/continue/S12.7_A9_T2.js


var x=0,y=0;(function(){FOR:for(;;)try{x++;if(x===10)return;throw 1}catch(e){continue}})();if(x!==10)throw new Test262Error("#1: Continue inside of try-catch nested in loop is allowed");


var x=0,y=0;if(function(){for(;;)try{if(x++,x===10)return;throw 1}catch{continue}}(),x!==10)throw new Test262Error("#1: Continue inside of try-catch nested in loop is allowed");



test262/test/built-ins/undefined/15.1.1.3-2.js


var global=this;assert.throws(TypeError,function(){global["undefined"]=5});assert.sameValue(global["undefined"],void 0);assert.sameValue(void 0,void 0);


var global=this;assert.throws(TypeError,function(){global.undefined=5}),assert.sameValue(global.undefined,void 0),assert.sameValue(void 0,void 0);



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-eval-rqstd-abrupt-typeerror.js


label:import("./eval-rqstd-abrupt-err-type_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"TypeError")}).then($DONE,$DONE);


import("./eval-rqstd-abrupt-err-type_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"TypeError")}).then($DONE,$DONE);



test262/test/built-ins/Object/setPrototypeOf/bigint.js


try{let{}=0n}catch(e){throw new Test262Error("Expected RequireObjectCoercible to succeed for BigInt values")}assert.sameValue(Object.setPrototypeOf(0n,null),0n);


try{let{}=0n}catch{throw new Test262Error("Expected RequireObjectCoercible to succeed for BigInt values")}assert.sameValue(Object.setPrototypeOf(0n,null),0n);



test262/test/language/statements/continue/S12.7_A9_T1.js


var x=0,y=0;(function(){FOR:for(;;)try{x++;if(x===10)return;throw 1}catch(e){continue FOR}})();if(x!==10)throw new Test262Error("#1: Continue inside of try-catch nested in loop is allowed");


var x=0,y=0;if(function(){FOR:for(;;)try{if(x++,x===10)return;throw 1}catch{continue FOR}}(),x!==10)throw new Test262Error("#1: Continue inside of try-catch nested in loop is allowed");



test262/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js


const units=["second","minute","hour","day","week","month","quarter","year"],rtf=new Intl.RelativeTimeFormat("en-US",{numeric:"auto"});assert.sameValue(typeof rtf.format,"function","format should be supported");const exceptions={year:{"-1":"last year",0:"this year",1:"next year"},quarter:{"-1":"last quarter",0:"this quarter",1:"next quarter"},month:{"-1":"last month",0:"this month",1:"next month"},week:{"-1":"last week",0:"this week",1:"next week"},day:{"-1":"yesterday",0:"today",1:"tomorrow"},hour:{"-1":"1 hour ago",0:"this hour",1:"in 1 hour"},minute:{"-1":"1 minute ago",0:"this minute",1:"in 1 minute"},second:{"-1":"1 second ago",0:"now",1:"in 1 second"}};for(const unit of units){const expected=unit in exceptions?[exceptions[unit]["1"],exceptions[unit]["0"],exceptions[unit]["0"],exceptions[unit]["-1"]]:[`in 1 ${unit}`,`in 0 ${unit}s`,`0 ${unit}s ago`,`1 ${unit} ago`];assert.sameValue(rtf.format(1e3,unit),`in 1,000 ${unit}s`);assert.sameValue(rtf.format(10,unit),`in 10 ${unit}s`);assert.sameValue(rtf.format(2,unit),`in 2 ${unit}s`);assert.sameValue(rtf.format(1,unit),expected[0]);assert.sameValue(rtf.format(0,unit),expected[1]);assert.sameValue(rtf.format(-0,unit),expected[2]);assert.sameValue(rtf.format(-1,unit),expected[3]);assert.sameValue(rtf.format(-2,unit),`2 ${unit}s ago`);assert.sameValue(rtf.format(-10,unit),`10 ${unit}s ago`);assert.sameValue(rtf.format(-1e3,unit),`1,000 ${unit}s ago`)}


const units=["second","minute","hour","day","week","month","quarter","year"],rtf=new Intl.RelativeTimeFormat("en-US",{numeric:"auto"});assert.sameValue(typeof rtf.format,"function","format should be supported");const exceptions={year:{"-1":"last year",0:"this year",1:"next year"},quarter:{"-1":"last quarter",0:"this quarter",1:"next quarter"},month:{"-1":"last month",0:"this month",1:"next month"},week:{"-1":"last week",0:"this week",1:"next week"},day:{"-1":"yesterday",0:"today",1:"tomorrow"},hour:{"-1":"1 hour ago",0:"this hour",1:"in 1 hour"},minute:{"-1":"1 minute ago",0:"this minute",1:"in 1 minute"},second:{"-1":"1 second ago",0:"now",1:"in 1 second"}};for(const unit of units){const expected=unit in exceptions?[exceptions[unit][1],exceptions[unit][0],exceptions[unit][0],exceptions[unit][-1]]:[`in 1 ${unit}`,`in 0 ${unit}s`,`0 ${unit}s ago`,`1 ${unit} ago`];assert.sameValue(rtf.format(1e3,unit),`in 1,000 ${unit}s`),assert.sameValue(rtf.format(10,unit),`in 10 ${unit}s`),assert.sameValue(rtf.format(2,unit),`in 2 ${unit}s`),assert.sameValue(rtf.format(1,unit),expected[0]),assert.sameValue(rtf.format(0,unit),expected[1]),assert.sameValue(rtf.format(-0,unit),expected[2]),assert.sameValue(rtf.format(-1,unit),expected[3]),assert.sameValue(rtf.format(-2,unit),`2 ${unit}s ago`),assert.sameValue(rtf.format(-10,unit),`10 ${unit}s ago`),assert.sameValue(rtf.format(-1e3,unit),`1,000 ${unit}s ago`)}



test262/test/language/statements/continue/nested-let-bound-for-loops-outer-continue.js


var count=0;for(let x=0;x<10;){x++;for(let y=0;y<2;)y++,count++;continue}assert.sameValue(count,20,"The value of `count` is `20`");


var count=0;for(let x=0;x<10;){x++;for(let y=0;y<2;)y++,count++}assert.sameValue(count,20,"The value of `count` is `20`");



test262/test/language/statements/continue/S12.7_A7.js


var x=0,y=0;try{LABEL1:do x++,eval("continue LABEL1"),y++;while(0);throw new Test262Error('#1: eval("continue LABEL1") does not lead to throwing exception')}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("1.1: Appearing of continue within eval statement inside of IterationStatement yields SyntaxError")}


var x=0,y=0;try{do x++,eval("continue LABEL1"),y++;while(!1);throw new Test262Error('#1: eval("continue LABEL1") does not lead to throwing exception')}catch(e){if(!(e instanceof SyntaxError))throw new Test262Error("1.1: Appearing of continue within eval statement inside of IterationStatement yields SyntaxError")}



test262/test/language/expressions/dynamic-import/usage/top-level-import-then-is-call-expression-square-brackets.js


import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/intl402/NumberFormat/prototype/format/value-tonumber.js


const toNumberResults=[[void 0,NaN],[null,0],[!0,1],[!1,0],["42",42],["foo",NaN],["Infinity",Infinity],["-Infinity",-1/0]],nf=new Intl.NumberFormat;toNumberResults.forEach(pair=>{const[value,result]=pair;assert.sameValue(nf.format(value),nf.format(result))});let count=0;const dummy={};dummy[Symbol.toPrimitive]=hint=>hint==="number"?++count:NaN;assert.sameValue(nf.format(dummy),nf.format(count));assert.sameValue(count,1);assert.throws(TypeError,()=>nf.format(Symbol()),"ToNumber(arg) throws a TypeError when arg is of type 'Symbol'");


const toNumberResults=[[void 0,NaN],[null,0],[!0,1],[!1,0],["42",42],["foo",NaN],["Infinity",1/0],["-Infinity",-1/0]],nf=new Intl.NumberFormat;toNumberResults.forEach(pair=>{const[value,result]=pair;assert.sameValue(nf.format(value),nf.format(result))});let count=0;const dummy={};dummy[Symbol.toPrimitive]=hint=>hint==="number"?++count:NaN,assert.sameValue(nf.format(dummy),nf.format(count)),assert.sameValue(count,1),assert.throws(TypeError,()=>nf.format(Symbol()),"ToNumber(arg) throws a TypeError when arg is of type 'Symbol'");



test262/test/intl402/RelativeTimeFormat/prototype/format/value-non-finite.js


const rtf=new Intl.RelativeTimeFormat("en-US");assert.sameValue(typeof rtf.format,"function","format should be supported");const values=[[void 0,"undefined"],[NaN,"NaN"],[Infinity,"Infinity"],[-1/0,"-Infinity"],["string",'"string"'],[{},"empty object"],[{toString(){return NaN},valueOf:void 0},"object with toString"],[{valueOf(){return NaN},toString:void 0},"object with valueOf"]];for(const[value,name]of values)assert.throws(RangeError,()=>rtf.format(value,"second"),name);


const rtf=new Intl.RelativeTimeFormat("en-US");assert.sameValue(typeof rtf.format,"function","format should be supported");const values=[[void 0,"undefined"],[NaN,"NaN"],[1/0,"Infinity"],[-1/0,"-Infinity"],["string",'"string"'],[{},"empty object"],[{toString(){return NaN},valueOf:void 0},"object with toString"],[{valueOf(){return NaN},toString:void 0},"object with valueOf"]];for(const[value,name]of values)assert.throws(RangeError,()=>rtf.format(value,"second"),name);



test262/test/intl402/NumberFormat/prototype/format/bound-to-numberformat-instance.js


var numbers=[0,-0,1,-1,5.5,123,-123,-123.45,123.44501,.001234,-1.23e-9,123e-32,1.2,1.2344501e-9,123445.01,12344501e27,-12344501e27,Infinity,-1/0,NaN],locales=[void 0,["de"],["th-u-nu-thai"],["en"],["ja-u-nu-jpanfin"],["ar-u-nu-arab"]],options=[void 0,{style:"percent"},{style:"currency",currency:"EUR",currencyDisplay:"symbol"},{style:"currency",currency:"IQD",currencyDisplay:"symbol"},{style:"currency",currency:"KMF",currencyDisplay:"symbol"},{style:"currency",currency:"CLF",currencyDisplay:"symbol"},{useGrouping:!1,minimumIntegerDigits:3,minimumFractionDigits:1,maximumFractionDigits:3}];locales.forEach(function(locales){options.forEach(function(options){var formatObj=new Intl.NumberFormat(locales,options),formatFunc=formatObj.format;numbers.forEach(function(number){var referenceFormatted=formatObj.format(number),formatted=formatFunc(number);assert.sameValue(referenceFormatted,formatted,"format function produces different result than format method for locales "+locales+"; options: "+(options?JSON.stringify(options):options)+".")})})});


var numbers=[0,-0,1,-1,5.5,123,-123,-123.45,123.44501,.001234,-123e-11,123e-32,1.2,12344501e-16,123445.01,12344501e27,-12344501e27,1/0,-1/0,NaN],locales=[void 0,["de"],["th-u-nu-thai"],["en"],["ja-u-nu-jpanfin"],["ar-u-nu-arab"]],options=[void 0,{style:"percent"},{style:"currency",currency:"EUR",currencyDisplay:"symbol"},{style:"currency",currency:"IQD",currencyDisplay:"symbol"},{style:"currency",currency:"KMF",currencyDisplay:"symbol"},{style:"currency",currency:"CLF",currencyDisplay:"symbol"},{useGrouping:!1,minimumIntegerDigits:3,minimumFractionDigits:1,maximumFractionDigits:3}];locales.forEach(function(locales2){options.forEach(function(options2){var formatObj=new Intl.NumberFormat(locales2,options2),formatFunc=formatObj.format;numbers.forEach(function(number){var referenceFormatted=formatObj.format(number),formatted=formatFunc(number);assert.sameValue(referenceFormatted,formatted,"format function produces different result than format method for locales "+locales2+"; options: "+(options2&&JSON.stringify(options2))+".")})})});



test262/test/language/expressions/dynamic-import/usage/nested-else-import-then-is-call-expression-square-brackets.js


import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/language/expressions/dynamic-import/usage/syntax-nested-block-labeled-is-call-expression-square-brackets.js


label:import("./dynamic-import-module_FIXTURE.js")["then"](x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);


import("./dynamic-import-module_FIXTURE.js").then(x=>x).then(imported=>{assert.sameValue(imported.x,1)}).then($DONE,$DONE).catch($DONE);



test262/test/built-ins/Boolean/S9.2_A1_T1.js


assert.sameValue(!1,!1,"Boolean(undefined) must return false"),assert.sameValue(!1,!1,"Boolean(void 0) must return false"),assert.sameValue(!!eval("var x"),!1,'Boolean(eval("var x")) must return false'),assert.sameValue(Boolean(),!1,"Boolean() must return false");


assert.sameValue(!1,!1,"Boolean(undefined) must return false"),assert.sameValue(!1,!1,"Boolean(void 0) must return false"),assert.sameValue(!!eval("var x"),!1,'Boolean(eval("var x")) must return false'),assert.sameValue(!1,!1,"Boolean() must return false");



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-eval-rqstd-abrupt-urierror.js


label:import("./eval-rqstd-abrupt-err-uri_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"URIError")}).then($DONE,$DONE);


import("./eval-rqstd-abrupt-err-uri_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"URIError")}).then($DONE,$DONE);



test262/test/language/expressions/dynamic-import/catch/nested-block-labeled-instn-iee-err-circular.js


label:import("./instn-iee-err-circular-1_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);


import("./instn-iee-err-circular-1_FIXTURE.js").catch(error=>{assert.sameValue(error.name,"SyntaxError")}).then($DONE,$DONE);



test262/test/built-ins/StringIteratorPrototype/next/next-iteration-surrogate-pairs.js


var lo="\\ud834",hi="\\udf06",pair=lo+hi,string="a"+pair+"b"+lo+pair+hi+lo,iterator=string[Symbol.iterator](),result;result=iterator.next();assert.sameValue(result.value,"a","First normal code point `value`");assert.sameValue(result.done,!1,"First normal code point `done` flag");result=iterator.next();assert.sameValue(result.value,pair,"Surrogate pair `value` (between normal code points)");assert.sameValue(result.done,!1,"Surrogate pair `done` flag (between normal code points)");result=iterator.next();assert.sameValue(result.value,"b","Second normal code point `value`");assert.sameValue(result.done,!1,"Second normal code point `done` flag");result=iterator.next();assert.sameValue(result.value,lo,"Lone lower code point `value` (following normal code point)");assert.sameValue(result.done,!1,"Lone lower code point `done` flag (following normal code point)");result=iterator.next();assert.sameValue(result.value,pair,"Surrogate pair `value` (between lone lower- and upper- code points)");assert.sameValue(result.done,!1,"Surrogate pair `done` flag (between lone lower- and upper- code points)");result=iterator.next();assert.sameValue(result.value,hi,"Lone upper code point `value`");assert.sameValue(result.done,!1,"Lone upper code point `done` flag");result=iterator.next();assert.sameValue(result.value,lo,"Lone lower code point `value` (following lone upper code point)");assert.sameValue(result.done,!1,"Lone lower code point `done` flag (following lone upper code point)");result=iterator.next();assert.sameValue(result.value,void 0,"Exhausted result `value`");assert.sameValue(result.done,!0,"Exhausted result `done` flag");result=iterator.next();assert.sameValue(result.value,void 0,"Exhausted result `value` (repeated request)");assert.sameValue(result.done,!0,"Exhausted result `done` flag (repeated request");


var lo="\uD834",hi="\uDF06",pair=lo+hi,string="a"+pair+"b"+lo+pair+hi+lo,iterator=string[Symbol.iterator](),result;result=iterator.next(),assert.sameValue(result.value,"a","First normal code point `value`"),assert.sameValue(result.done,!1,"First normal code point `done` flag"),result=iterator.next(),assert.sameValue(result.value,pair,"Surrogate pair `value` (between normal code points)"),assert.sameValue(result.done,!1,"Surrogate pair `done` flag (between normal code points)"),result=iterator.next(),assert.sameValue(result.value,"b","Second normal code point `value`"),assert.sameValue(result.done,!1,"Second normal code point `done` flag"),result=iterator.next(),assert.sameValue(result.value,lo,"Lone lower code point `value` (following normal code point)"),assert.sameValue(result.done,!1,"Lone lower code point `done` flag (following normal code point)"),result=iterator.next(),assert.sameValue(result.value,pair,"Surrogate pair `value` (between lone lower- and upper- code points)"),assert.sameValue(result.done,!1,"Surrogate pair `done` flag (between lone lower- and upper- code points)"),result=iterator.next(),assert.sameValue(result.value,hi,"Lone upper code point `value`"),assert.sameValue(result.done,!1,"Lone upper code point `done` flag"),result=iterator.next(),assert.sameValue(result.value,lo,"Lone lower code point `value` (following lone upper code point)"),assert.sameValue(result.done,!1,"Lone lower code point `done` flag (following lone upper code point)"),result=iterator.next(),assert.sameValue(result.value,void 0,"Exhausted result `value`"),assert.sameValue(result.done,!0,"Exhausted result `done` flag"),result=iterator.next(),assert.sameValue(result.value,void 0,"Exhausted result `value` (repeated request)"),assert.sameValue(result.done,!0,"Exhausted result `done` flag (repeated request");



test262/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-valid.js


const validOptions=[[void 0,"always"],["always","always"],["auto","auto"],[{toString(){return"auto"}},"auto"]];for(const[validOption,expected]of validOptions){const tf=new Intl.RelativeTimeFormat([],{numeric:validOption}),resolvedOptions=tf.resolvedOptions();assert.sameValue(resolvedOptions.numeric,expected)}


const validOptions=[[void 0,"always"],["always","always"],["auto","auto"],[{toString(){return"auto"}},"auto"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.RelativeTimeFormat([],{numeric:validOption}).resolvedOptions();assert.sameValue(resolvedOptions.numeric,expected)}



test262/test/intl402/NumberFormat/prototype/formatRange/invoked-as-func.js


const nf=new Intl.NumberFormat;let f=nf["formatRange"];assert.sameValue(typeof f,"function");assert.throws(TypeError,()=>{f(1,23)});


const nf=new Intl.NumberFormat;let f=nf.formatRange;assert.sameValue(typeof f,"function"),assert.throws(TypeError,()=>{f(1,23)});



test262/test/language/expressions/dynamic-import/syntax/valid/nested-block-labeled-import-attributes-trailing-comma-first.js


label:import("./empty_FIXTURE.js");


import("./empty_FIXTURE.js");



test262/test/language/expressions/dynamic-import/syntax/valid/nested-block-labeled-nested-imports.js


label:import(import(import("./empty_FIXTURE.js")));


import(import(import("./empty_FIXTURE.js")));



test262/test/intl402/RelativeTimeFormat/constructor/constructor/options-undefined.js


Object.defineProperties(Object.prototype,{style:{get(){throw new Error("Should not call style getter")}},numeric:{get(){throw new Error("Should not call numeric getter")}}});const optionsArguments=[[],[[]],[[],void 0]];for(const args of optionsArguments){const rtf=new Intl.RelativeTimeFormat(...args),resolvedOptions=rtf.resolvedOptions();assert.sameValue(resolvedOptions.style,"long",`Calling with ${args.length} empty arguments should yield the fallback value for "style"`);assert.sameValue(resolvedOptions.numeric,"always",`Calling with ${args.length} empty arguments should yield the fallback value for "numeric"`)}


Object.defineProperties(Object.prototype,{style:{get(){throw new Error("Should not call style getter")}},numeric:{get(){throw new Error("Should not call numeric getter")}}});const optionsArguments=[[],[[]],[[],void 0]];for(const args of optionsArguments){const resolvedOptions=new Intl.RelativeTimeFormat(...args).resolvedOptions();assert.sameValue(resolvedOptions.style,"long",`Calling with ${args.length} empty arguments should yield the fallback value for "style"`),assert.sameValue(resolvedOptions.numeric,"always",`Calling with ${args.length} empty arguments should yield the fallback value for "numeric"`)}



test262/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-valid.js


const validOptions=[[void 0,"long"],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"narrow"}},"narrow"]];for(const[validOption,expected]of validOptions){const tf=new Intl.RelativeTimeFormat([],{style:validOption}),resolvedOptions=tf.resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}


const validOptions=[[void 0,"long"],["long","long"],["short","short"],["narrow","narrow"],[{toString(){return"narrow"}},"narrow"]];for(const[validOption,expected]of validOptions){const resolvedOptions=new Intl.RelativeTimeFormat([],{style:validOption}).resolvedOptions();assert.sameValue(resolvedOptions.style,expected)}



test262/test/language/expressions/dynamic-import/syntax/valid/nested-block-labeled-empty-str-is-valid-assign-expr.js


label:import("");


import("");


esbuild_test262 Summary:
AST Parsed     : 44101/44101 (100.00%)
Positive Passed: 41787/44101 (94.75%)
